<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[通过gulp 在原html文件上自动化添加js、css版本号]]></title>
      <url>http://www.missfli.com/2016/09/12/gulp-auto-add-version/</url>
      <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000006204457" target="_blank" rel="external">文章出处</a></p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>修改js和css文件<br>通过对js,css文件内容进行hash运算，生成一个文件的唯一hash字符串(如果文件修改则hash号会发生变化)<br>替换html中的js,css文件名，生成一个带版本号的文件名</p>
<a id="more"></a>
<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><p>现在网上的方案都是生成一个新的dist目录，里面包含了要发布的html,js,css等文件。但是在实际的公司的项目中，会有情况不能生成新的HTML进行发布，需要在原来的HTML文件上进行js ,css版本的替换. 这里分享下我在实际项目中通过改动插件然后在原目录结构下进行版本的控制方案。</p>
<p>原html文件代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default.css"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>预期效果：在原目录结构下html文件代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default.css?v=5a636d79c4"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app.js?v=3a0d844594"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p><strong>1. 安装gulp和gulp插件</strong><br>执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div><div class="line">npm install --save-dev gulp-rev</div><div class="line">npm install --save-dev gulp-rev-collector</div><div class="line">npm install --save-dev run-sequence</div></pre></td></tr></table></figure>
<p><strong>2. 编写gulpfile.js</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//引入gulp和gulp插件</div><div class="line">var gulp = require(<span class="string">'gulp'</span>),</div><div class="line">    runSequence = require(<span class="string">'run-sequence'</span>),</div><div class="line">    rev = require(<span class="string">'gulp-rev'</span>),</div><div class="line">    revCollector = require(<span class="string">'gulp-rev-collector'</span>);</div><div class="line"></div><div class="line">//定义css、js源文件路径</div><div class="line">var cssSrc = <span class="string">'css/*.css'</span>,</div><div class="line">    jsSrc = <span class="string">'js/*.js'</span>;</div><div class="line"></div><div class="line"></div><div class="line">//CSS生成文件<span class="built_in">hash</span>编码并生成 rev-manifest.json文件名对照映射</div><div class="line">gulp.task(<span class="string">'revCss'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(cssSrc)</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'rev/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//js生成文件<span class="built_in">hash</span>编码并生成 rev-manifest.json文件名对照映射</div><div class="line">gulp.task(<span class="string">'revJs'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(jsSrc)</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'rev/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//Html替换css、js文件版本</div><div class="line">gulp.task(<span class="string">'revHtml'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src([<span class="string">'rev/**/*.json'</span>, <span class="string">'View/*.html'</span>])</div><div class="line">        .pipe(revCollector())</div><div class="line">        .pipe(gulp.dest(<span class="string">'View'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//开发构建</div><div class="line">gulp.task(<span class="string">'dev'</span>, <span class="keyword">function</span> (<span class="keyword">done</span>) &#123;</div><div class="line">    condition = <span class="literal">false</span>;</div><div class="line">    runSequence(</div><div class="line">        [<span class="string">'revCss'</span>],</div><div class="line">        [<span class="string">'revJs'</span>],</div><div class="line">        [<span class="string">'revHtml'</span>],</div><div class="line">        <span class="keyword">done</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'dev'</span>]);</div></pre></td></tr></table></figure>
<p><strong>执行gulp命令后的效果</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//rev目录下生成了manifest.json对应文件</div><div class="line">&#123;</div><div class="line">  <span class="string">"default.css"</span>: <span class="string">"default-803a7fe4ae.css"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default-803a7fe4ae.css"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app-3a0d844594.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>很显然这不是我们需要的效果</p>
<p><strong>3. 更改gulp-rev和gulp-rev-collector</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开node_modules\gulp-rev\index.js</div><div class="line">第144行 manifest[originalFile] = revisionedFile;</div><div class="line">更新为: manifest[originalFile] = originalFile + <span class="string">'?v='</span> + file.revHash;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开nodemodules\gulp-rev\nodemodules\rev-path\index.js</div><div class="line">10行 <span class="built_in">return</span> filename + <span class="string">'-'</span> + <span class="built_in">hash</span> + ext;</div><div class="line">更新为: <span class="built_in">return</span> filename + ext;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开node_modules\gulp-rev-collector\index.js</div><div class="line">31行<span class="keyword">if</span> ( !_.isString(json[key]) || path.basename(json[key]).replace(new RegExp( opts.revSuffix ), <span class="string">''</span> ) !==  path.basename(key) ) &#123;</div><div class="line">更新为: <span class="keyword">if</span> ( !_.isString(json[key]) || path.basename(json[key]).split(<span class="string">'?'</span>)[0] !== path.basename(key) ) &#123;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开node_modules\gulp-rev-collector\index.js</div><div class="line">第107行 regexp: new RegExp( <span class="string">'([\/\\\\\'</span><span class="string">"])' + pattern, 'g' ),</span></div><div class="line">更新为: regexp: new RegExp( '([\/\\\\\'"])<span class="string">' + pattern+'</span>(\\?v=\\w&#123;10&#125;)?<span class="string">', '</span>g<span class="string">' ),</span></div></pre></td></tr></table></figure>
<p><strong>最终结果</strong></p>
<p>经过上面的四步修改之后现在你不管执行多少遍gulp命令，得到的html效果都是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default.css?v=5a636d79c4"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app.js?v=3a0d844594"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[域名信息查询]]></title>
      <url>http://www.missfli.com/2016/09/07/domain-search-whois/</url>
      <content type="html"><![CDATA[<p>你想知道网站域名的相关信息吗？其实很简单，跟谷哥或度娘说：whois，一大堆结果。在这里呢，就只给你推荐几个比较权威准确点的。</p>
<a id="more"></a>
<h2 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h2><p>免费用户有查询次数限制：<a href="http://whois.domaintools.com/" target="_blank" rel="external">http://whois.domaintools.com/</a></p>
<h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><ul>
<li><a href="https://x.threatbook.cn/" target="_blank" rel="external">威胁情报分析平台ThreatBook</a></li>
<li><a href="https://whois.aliyun.com/" target="_blank" rel="external">阿里云域名查询</a></li>
<li><a href="http://whois.chinaz.com/" target="_blank" rel="external">站长工具域名查询</a></li>
</ul>
<p><strong>查询结果</strong></p>
<ul>
<li>www.google.com ：208.111.59.15/19/23/27/29/30/34/38/42/44/45/49/53/57/59,93.46.8.89</li>
<li>www.microsoft.com ：118.215.11.168,182.215.11.168</li>
<li>www.apple.com/cn ：23.15.152.48,17.142.160.11,17.172.224.30,17.178.96.11</li>
<li>www.focebook.com ：31.13.79.220,179.60.192.3</li>
<li>www.twitter.com ：104.244.42.193/65</li>
<li>www.youtube.com ：74.125.200.136/190/91/93,216.58.211.46</li>
<li>www.philips.com ：118.215.81.147 </li>
<li>www.linkedin.com ：103.20.94.1</li>
<li>www.amazon.com ：54.239.25.200,54.239.29.3</li>
<li>www.baidu.com ：14.215.177.37/38,103.235.46.212</li>
<li>www.alibaba.com ：205.204.101.42,110.75.112.20,140.205.94.148</li>
<li>www.qq.com ：101.226.103.106</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ip定位查询]]></title>
      <url>http://www.missfli.com/2016/09/07/ip-location/</url>
      <content type="html"><![CDATA[<p>有时候需要访客位置信息，这时你如果拿到访客的ip，那么通过下面的ip定位的方法就能做到了。搜集了不少资料，大致罗列了网上的方法，希望对你有用。国内国外大致就这些：淘宝，腾讯，新浪，百度，IP2Location,DB-IP,纯真IP数据库，MaxMind GeoLite2，当然还有其他的。</p>
<a id="more"></a>
<h2 id="调用三方的接口"><a href="#调用三方的接口" class="headerlink" title="调用三方的接口"></a>调用三方的接口</h2><p>推荐新浪接口，我用了一些常用和非常用ip（根据国内外大网站的域名查询出来的ip,文章末尾会将ip列举出来）做了个大致的查询比较。</p>
<ul>
<li>新浪接口：<code>http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;ip=54.239.25.200</code></li>
<li>淘宝接口：<code>http://ip.taobao.com/service/getIpInfo.php?ip=123.123.123.123</code></li>
<li>IP查询：<code>http://www.ipip.net/ip.html</code></li>
</ul>
<h2 id="调用自己本地数据库"><a href="#调用自己本地数据库" class="headerlink" title="调用自己本地数据库"></a>调用自己本地数据库</h2><p>这种方法就要你去网上下载相应的纯真IP数据库了。</p>
<ul>
<li><a href="http://www.ipip.net/" target="_blank" rel="external">http://www.ipip.net/</a></li>
<li><a href="http://lite.ip2location.com/" target="_blank" rel="external">http://lite.ip2location.com/</a></li>
<li><a href="https://www.maxmind.com/zh/geoip2-services-and-databases" target="_blank" rel="external">https://www.maxmind.com/zh/geoip2-services-and-databases</a></li>
</ul>
<h2 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h2><ul>
<li><a href="https://www.ipip.net/" target="_blank" rel="external">https://www.ipip.net/</a>免费版有1000次/天限制</li>
<li><a href="http://www.haoweichi.com/Index/iplocate" target="_blank" rel="external">http://www.haoweichi.com/Index/iplocate</a></li>
<li><a href="http://www.ip138.com/ips1388.asp" target="_blank" rel="external">http://www.ip138.com/ips1388.asp</a></li>
<li><a href="http://ip.lockview.cn/default.aspx" target="_blank" rel="external">http://ip.lockview.cn/default.aspx</a></li>
<li><a href="http://www.123cha.com/" target="_blank" rel="external">http://www.123cha.com/</a></li>
</ul>
<p><strong>IP列表</strong></p>
<ul>
<li>这几个比较偏：31.13.79.220，103.235.46.212，31.13.79.220，23.15.152.48，182.215.11.168，208.111.59.15</li>
<li>www.google.com ：208.111.59.15/19/23/27/29/30/34/38/42/44/45/49/53/57/59,93.46.8.89</li>
<li>www.microsoft.com ：118.215.11.168,182.215.11.168</li>
<li>www.apple.com/cn ：23.15.152.48,17.142.160.11,17.172.224.30,17.178.96.11</li>
<li>www.focebook.com ：31.13.79.220,179.60.192.3</li>
<li>www.twitter.com ：104.244.42.193/65</li>
<li>www.youtube.com ：74.125.200.136/190/91/93,216.58.211.46</li>
<li>www.philips.com ：118.215.81.147 </li>
<li>www.linkedin.com ：103.20.94.1</li>
<li>www.amazon.com ：54.239.25.200,54.239.29.3</li>
<li>www.baidu.com ：14.215.177.37/38,103.235.46.212</li>
<li>www.alibaba.com ：205.204.101.42,110.75.112.20,140.205.94.148</li>
<li>www.qq.com ：101.226.103.106</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jekyll和github pages搭建个人博客]]></title>
      <url>http://www.missfli.com/2016/09/04/jekyll-github-buildblog/</url>
      <content type="html"><![CDATA[<p>用过一些博客网站写博客，总会感觉要么这里差强人意，要么那里有些不舒服，然后搜集网上资料找博客平台，最后呢，发现还是得自己搭建。然后就发现了jekyll和github结合起来搭建博客不错，比较满意。虽然最后因为主题没自己喜欢的，编译没hexo快等等原因，而选择了重新用hexo和next。这里呢，不会讲详细的搭建细节，只是讲一下我的搭建历程。</p>
<a id="more"></a>
<p>发现了jekyll + github pages能搭建个人博客网站，虽然只能是静态页面，不过倒是蛮符合自己的需求的，然后就走上了这条坑爹的道路。反正这路上我是碰到不少坑。</p>
<p><strong>域名注册解析</strong></p>
<p>首先，我想博客网站有自己的域名，无意中发现阿里出了个<code>.xin</code>域名，然后兴冲冲的去阿里云官网去注册申请一个跟自己名字相关的域名，结果别人家注册了，最后想了个域名<code>www.nifei.xin</code>，中间部分更本人姓名谐音，然后连起来呢，寓意“你费点心”。付款后，才发现，坑啊，这种域名相对于其他类型的域名来说比较贵，并且国内域名（大陆）都要备案啊（方便政府监管呗），还有点小小不爽就是你只有域名的使用权，没有拥有权，有种租用的感觉。<br>哎，反正都付钱了，不管了。去github随便新建了个测试项目，开始着手域名解析过来，试试新域名的感觉。其实github针对每个账户是可以拥有一个专有的域名的（<code>username.github.io</code>）,你要是不介意这个域名了，也可以不去注册域名，也就不用解析域名了。跑到阿里云的域名管理区域，解析域名，发现一堆限制。看了一下他的具体解析规则，总结下来，就是<code>www.nifei.xin</code>的域名要解析，必须备案。然后查了一下发现备案短则两周，长则三周一个月。我那个去，火了，重新注册域名吧。<br>其实，也是之前看见<code>.xin</code>觉得新鲜，冲动了，没怎么搜相关资料进行详细了解和比较。这次做了各种比较后，去国外的网站<a href="https://hk.godaddy.com" target="_blank" rel="external">GoDaddy</a>注册了个新域名<code>www.missfli.com</code>。然后解析了，听说用域名服务商自己来解析比较慢，用国内的<a href="https://www.dnspod.cn/d]" target="_blank" rel="external">DNSpod</a>来解析比较快。也就是在这里解析，我才发现，其实之前的那个域名<code>www.nifei.xin</code>是可以解析的。只是之前的解析方式不对，所以没生效。</p>
<p><strong>jekyll安装</strong></p>
<p>接下来，就要开始搭建博客项目了。<a href="http://jekyll.bootcss.com/" target="_blank" rel="external">jekyll官网</a>有详细的安装步骤，当然，你也会发现他不推荐在windows上安装。所以，在windows可能会遇到各种坑，我就是那个倒霉的孩子，碰到了各种坑。<br>    比如：</p>
<ul>
<li>坑一：很多网上的安装教程（如<a href="http://pwnny.cn/original/2016/06/26/MakeBlog.html" target="_blank" rel="external">Jekyll和Github搭建个人静态博客</a>）在jekyll安装之前的步骤基本都一样的，就是<a href="http://railsinstaller.org/en" target="_blank" rel="external">ruby</a>的安装(用 RailsInstaller 来安装 Ruby 环境)。我就是按照这个步骤安装的，安装完后，用查看版本的命令<code>ruby -v</code>,<code>gem -v</code>都能看到对应的版本，也就是说ruby是安装成功滴。可是，等安装好后jekyll(用<code>jekyll -v</code>查看版本)用本地调试命令<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，总是不能正常访问。后来才发现，jekyll创建的默认项目对代码高亮支持是需要Pygments这个玩意的，所以最后，找到了<a href="http://www.madhur.co.in/blog/2011/09/01/runningjekyllwindows.html" target="_blank" rel="external">Running Jekyll on Windows</a>，才真正跑起来测试项目。</li>
<li>坑二：特别是安装jekyll和相关插件时，由于要翻墙，所以有时候不一定会安装成功。如果你不仔细还以为安装成功了，结果跑不起来。解决方法：多安装几次直到安装成功。</li>
<li>坑三：jekyll创建的默认项目。默认模板主题minima，要是你没有安装，也是跑不起来的。</li>
<li>坑四：安装好后，启动项目本地调试，总是报错，这个错跟“bundler”相关，这时，你需要用命令<code>gem install bundle</code>安装bundler。</li>
</ul>
<p>环境搭建好了，就是博客项目开工的时候了。其实呢，有三种方式：</p>
<ol>
<li>完全自己定制博客</li>
<li>找一份框架，修改后使用，比如<a href="http://jekyllbootstrap.com/" target="_blank" rel="external">http://jekyllbootstrap.com/</a></li>
<li>从GitHub上fork别人的博客代码，在其中添加自己的文章，自己Google一下 github.io 博客<br>能找到不少博客,去fork,然后修改一下就好。 最近有一个 jekyll-now，在 GitHub 上已经获取了 1000+ 的fork，可以关注一下<a href="https://github.com/barryclark/jekyll-now" target="_blank" rel="external">https://github.com/barryclark/jekyll-now</a></li>
</ol>
<p>我是选的第一种。为什么呢？第二种，我把他的里面的所有主题都试了一下，感觉不太满意。第三种呢，也看过没找到满意的。还专门去<a href="http://jekyllthemes.org/" target="_blank" rel="external">jekyll主题</a>全部看了一遍，还是没有满意的。还有一点，就是这些博客没有针对中文字体做排版，切换成中文后看起来就没那么舒服了。选了第一种后，又给自己挖坑了。字体选择，logo设计，页面布局排版，网页适配，博客分类等等，这些还好，可以慢慢来优化。<br>关键还是其他需要引入的插件：</p>
<ul>
<li>评论插件（<a href="http://www.tuicool.com/articles/YZfem2" target="_blank" rel="external">jekyll配置有言评论插件</a>）</li>
<li>分页功能（<a href="http://www.52ij.com/jishu/99014.html" target="_blank" rel="external">分页功能_jekyll 中使用分页功能</a>,但是好像jekyll的分页插件只能是博客首页，其他分类标签等等页面要使用分页的话，得自己另外写）</li>
<li>文章目录树（<a href="http://www.111cn.net/sys/linux/70052.htm" target="_blank" rel="external">Jekyll 生成文章目录树配置</a>）</li>
<li>文章分类索引（<a href="http://www.tuicool.com/articles/INBnMz" target="_blank" rel="external">使用Jekyll在Github上搭建个人博客（文章分类索引）</a>）</li>
<li>代码高亮（<a href="http://www.2cto.com/kf/201602/489968.html" target="_blank" rel="external">Jekyll 代码高亮的几种选择</a>，<a href="https://highlightjs.org/download" target="_blank" rel="external">highlightjs</a>，<a href="https://highlightjs.org/static/demo" target="_blank" rel="external">代码高亮的各种样式</a>）</li>
</ul>
<p>当把相关需要的资料准备好，搞到一半就发现了next主题，眼前一亮，就是我想要的那种。但是他不是jekyll的，是hexo的。然后就去搞hexo+next了，还不错，很快就出来雏形了，瞬间就抛弃了jekyll。但是说不准以后还会去折腾jekyll，所以写了这篇文章。之前的jekyll的雏形项目地址：<a href="https://github.com/woaiwojia321314/jekyllblog" target="_blank" rel="external">https://github.com/woaiwojia321314/jekyllblog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo免输入密码部署到github]]></title>
      <url>http://www.missfli.com/2016/09/03/hexo-deploy-no-psw/</url>
      <content type="html"><![CDATA[<p>hexo部署到github时，会要求你输入用户名密码，每次提交都要输入，肯定让你抓狂吧，下面的2步配置就能把你从痛苦中解救出来。</p>
<a id="more"></a>
<h6 id="在系统变量中添加一个环境变量："><a href="#在系统变量中添加一个环境变量：" class="headerlink" title="在系统变量中添加一个环境变量："></a>在系统变量中添加一个环境变量：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">变量名：HOME</div><div class="line">变量值：%USERPROFILE%</div></pre></td></tr></table></figure>
<p>见图：<br><img src="/images/blog/hexo-deploy-no-psw-01.jpg" alt="img"></p>
<h6 id="接着在你的用户目录（C-Users-username）下新建一个叫-netrc的文件编辑这个文件"><a href="#接着在你的用户目录（C-Users-username）下新建一个叫-netrc的文件编辑这个文件" class="headerlink" title="接着在你的用户目录（C:\Users\username）下新建一个叫 _netrc的文件编辑这个文件"></a>接着在你的用户目录（C:\Users\username）下新建一个叫 _netrc的文件编辑这个文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine github.com</div><div class="line">login username</div><div class="line">password password</div></pre></td></tr></table></figure>
<p>设置好这些后，当你再次部署时，就不用输入用户名和密码了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo问题--hexo部署到github]]></title>
      <url>http://www.missfli.com/2016/09/03/faq-hexo-deploy-q1/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>hexo部署到github时，报错：fatal: unable to auto-detect email address</p>
<a id="more"></a>
<p>异常信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">D:\workspace\fliblog&gt;hexo deploy</div><div class="line">INFO  Deploying: git</div><div class="line">INFO  Clearing .deploy_git folder...</div><div class="line">INFO  Copying files from public folder...</div><div class="line"></div><div class="line">*** Please tell me who you are.</div><div class="line"></div><div class="line">Run</div><div class="line"></div><div class="line">  git config --global user.email <span class="string">"you@example.com"</span></div><div class="line">  git config --global user.name <span class="string">"Your Name"</span></div><div class="line"></div><div class="line">to <span class="built_in">set</span> your account<span class="string">'s default identity.</span></div><div class="line">Omit --global to set the identity only in this repository.</div><div class="line"></div><div class="line">fatal: unable to auto-detect email address (got 'feili@feili-PC.(none)<span class="string">')</span></div><div class="line">Branch master set up to track remote branch master from https://github.com/woaiw</div><div class="line">ojia321314/woaiwojia321314.github.io.git.</div><div class="line">Everything up-to-date</div><div class="line">INFO  Deploy done: git</div></pre></td></tr></table></figure></p>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>找到工程目录的.git文件夹（比如我的项目是fliblog,路径就是…./fliblog/.deploy_git.git），打开之后找到config文件，在最后边加上一句话</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    email = your email</div><div class="line">    name = your name</div></pre></td></tr></table></figure>
<p>your email 和your name随便写上就行</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown常用语法(hexo)]]></title>
      <url>http://www.missfli.com/2016/09/01/markdown-test/</url>
      <content type="html"><![CDATA[<p>文章内容概要或引文</p>
<a id="more"></a>
<h2 id="h2标题二"><a href="#h2标题二" class="headerlink" title="h2标题二"></a>h2标题二</h2><h3 id="h3标题三"><a href="#h3标题三" class="headerlink" title="h3标题三"></a>h3标题三</h3><h4 id="h4标题四"><a href="#h4标题四" class="headerlink" title="h4标题四"></a>h4标题四</h4><h5 id="h5标题五"><a href="#h5标题五" class="headerlink" title="h5标题五"></a>h5标题五</h5><h6 id="h6标题六"><a href="#h6标题六" class="headerlink" title="h6标题六"></a>h6标题六</h6><p><strong>加粗</strong><br><em>斜体</em></p>
<p><code>行内代码</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span>代码块--行1</div><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo中文网</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题</a></p>
<p><img src="/images/blog/test.png" alt="img name"></p>
<blockquote class="blockquote-center"><p>居中文本text center </p>
</blockquote>
<img src="/images/blog/test.png" class="full-image" alt="alt" title="图片放大26%">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java获取客户端真实IP（转载）]]></title>
      <url>http://www.missfli.com/2016/08/31/fetch-customer-id-java/</url>
      <content type="html"><![CDATA[<p>转载自<a href="http://www.cnblogs.com/ITtangtang/p/3927768.html" target="_blank" rel="external"><strong>Java获取客户端IP</strong></a><br>有时候希望记录用户登录ip，用于获取他的登录地址。网上搜了很多资料，发现常用的1种方式比较全面而实用的方式：request获取。<br><a id="more"></a></p>
<h2 id="request获取方式"><a href="#request获取方式" class="headerlink" title="request获取方式"></a>request获取方式</h2><p>在开发工作中,我们常常需要获取客户端的IP。一般获取客户端的IP地址的方法是: <strong>request.getRemoteAddr()</strong> ;但是在通过了Apache,Squid等反向代理软件就不能获取到客户端的真实IP地址了。</p>
<p>原因:</p>
<p>由于在客户端和服务之间增加了中间代理,因此服务器无法直接拿到客户端的IP,服务器端应用也无法直接通过转发请求的地址返回给客户端。</p>
<p><strong>现在图示代理上网和IP的关系：</strong></p>
<p><em>第一种情况：不通过代理上网,服务器端拿到真实IP</em></p>
<p><img src="/images/blog/fetch-customer-id-java-01.png" alt="img"></p>
<p><em>第二种情况：通过代理服务器如:Nginx,Squid等一层代理或多层代理上网，如下图:</em></p>
<p><img src="/images/blog/fetch-customer-id-java-02.png" alt="img"></p>
<p>需要注意的是X-Forwarded-For和X-Real-IP都不是http的正式协议头，而是squid等反向代理软件最早引入的，之所以resin能拿到，是因为NGINX里一般缺省都会这么配置转发的http请求：</p>
<ul>
<li><p><strong>proxy_pass       <a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a>;</strong></p>
</li>
<li><p><strong>proxy_set_header   Host             $host;</strong></p>
</li>
<li><p><strong>proxy_set_header   X-Real-IP        $remote_addr;</strong></p>
</li>
<li><p><strong>proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</strong></p>
<p>从X-Forwarded-For的定义来看，ips[0]才是原始客户端ip，如果这个都不是，那拿第二个就更不靠谱了，我们平时检验的时候，可能是直接在内网挂代理去访问的，跟外面网友访问经过的网络路径不一样，后面不停添加的是经过的每一层代理ip才对,下面举例说明;</p>
</li>
<li><p><strong>request.getRemoteAddr() 192.168.239.196</strong></p>
</li>
<li><p><strong>request.getHeader(“X-Forwarded-For”) 58.63.227.162, 192.168.237.178, 192.168.238.218</strong></p>
</li>
<li><p><strong>request.getHeader(“X-Real-IP”) 192.168.238.218</strong></p>
</li>
</ul>
<p>所以访问的流程应该是这样，客户端58.63.227.162发出请求，经过192.168.237.178, 192.168.238.218两层转发，到了192.168.239.196这台NGINX上，NGINX就把X-Real-IP头设成了自己看到的remote_addr，也就是直接发给到他的192.168.238.218，这时候resin收到这个包，对resin来说直接发给他的remote_addr就是NGINX的ip，也就是192.168.239.196，那么resin里面的request.getRemoteAddr()就是192.168.239.196，那么在resin里拿最原始的ip逻辑（也就是拿能够知道的最外层的ip）应该是这样：</p>
<ol>
<li><p><strong>如果XFF不为空，拿XFF的左边第一个</strong></p>
</li>
<li><p><strong>如果XFF为空，拿XRI</strong></p>
</li>
<li><p><strong>如果XRI为空，只能拿request.getRemoteAddr()，也就是只能拿到最直接发给他的机器ip了，</strong></p>
</li>
</ol>
<p>其他都不可考究,参考代码如下(已经封装成一个工具类)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package com.le.util;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">public class IPFetch &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * fetch customer real ip</div><div class="line">	 * @param request</div><div class="line">	 * @<span class="built_in">return</span> string</div><div class="line">	 */</div><div class="line">	public static String getRealIp(HttpServletRequest request) &#123;</div><div class="line"></div><div class="line">        String ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip))&#123;</div><div class="line">            //多次反向代理后会有多个ip值，第一个ip才是真实ip</div><div class="line">            int index = ip.indexOf(<span class="string">","</span>);</div><div class="line">            <span class="keyword">if</span>(index != -1)&#123;</div><div class="line">                <span class="built_in">return</span> ip.substring(0,index);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">return</span> ip;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</div><div class="line">        <span class="keyword">if</span>(isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip))&#123;</div><div class="line">            <span class="built_in">return</span> ip;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> request.getRemoteAddr();</div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * Check whether string is empty</div><div class="line">	 * @param str String</div><div class="line">	 * @<span class="built_in">return</span> boolean</div><div class="line">	 */</div><div class="line">	public static boolean isNotEmpty(String str) &#123;</div><div class="line">		<span class="built_in">return</span> !(str == null || str.length() == 0);</div><div class="line">	&#125;//method</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js获取客户端真实IP]]></title>
      <url>http://www.missfli.com/2016/08/31/fetch-customer-id-js/</url>
      <content type="html"><![CDATA[<p>java获取客户端程序本身还有对应的对象来实现。而js却不行。搜罗了一些资料，发现比较全而好的前端获取客户端IP的方法基本都是通过三方接口。也就是调用别人写好的接口。用浏览器已有的控件ActiveXObject的控件方式，有一定的兼容性问题。<br><a id="more"></a></p>
<h2 id="方法一：（所有的平台及浏览器）"><a href="#方法一：（所有的平台及浏览器）" class="headerlink" title="方法一：（所有的平台及浏览器）"></a>方法一：（所有的平台及浏览器）</h2><p>使用搜狐接口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script src=<span class="string">"http://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.write(<span class="built_in">return</span>CitySN[<span class="string">"cip"</span>]+<span class="string">','</span>+<span class="built_in">return</span>CitySN[<span class="string">"cname"</span>])</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="方法二：（所有的平台及浏览器）"><a href="#方法二：（所有的平台及浏览器）" class="headerlink" title="方法二：（所有的平台及浏览器）"></a>方法二：（所有的平台及浏览器）</h2><p>使用新浪接口：(我测试过，此方法好像不行。访问网站也不能访问了。)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://counter.sina.com.cn/ip/"</span> charset=<span class="string">"gb2312"</span>&gt;&lt;/script&gt;       &lt;!--获取接口数据，注意charset --&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.writeln(<span class="string">"IP地址："</span>+ILData[0]+<span class="string">"&lt;br /&gt;"</span>);             //输出接口数据中的IP地址</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[1]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的类型</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[2]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的省市</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[3]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[4]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的运营商</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>个人Robert Hashemian写的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script language=<span class="string">"JavaScript"</span> src=<span class="string">"http://www.hashemian.com/js/visitorIP.js.php"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</div><div class="line">    VIH_BackColor = <span class="string">"palegreen"</span>;</div><div class="line">    VIH_ForeColor = <span class="string">"navy"</span>;</div><div class="line">    VIH_FontPix = <span class="string">"16"</span>;</div><div class="line">    VIH_DisplayFormat = <span class="string">"You are visiting from:&lt;br&gt;IP Address: %%IP%%&lt;br&gt;Host: %%HOST%%"</span>;</div><div class="line">    VIH_DisplayOnPage = <span class="string">"yes"</span>;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。"><a href="#方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。" class="headerlink" title="方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。"></a>方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。</h2><p>利用ActiveXObject控件，ie浏览器里要开启此控件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">GetLocalIPAddr</span></span>()&#123; var oSetting = null; var ip = null; try&#123; oSetting = new ActiveXObject(<span class="string">"rcbdyctl.Setting"</span>); ip = oSetting.GetIPAddress; <span class="keyword">if</span> (ip.length == 0)&#123; <span class="built_in">return</span> <span class="string">"没有连接到Internet"</span>; &#125; oSetting = null; &#125;catch(e)&#123; <span class="built_in">return</span> ip; &#125; <span class="built_in">return</span> ip; &#125; document.write(GetLocalIPAddr()+<span class="string">"&lt;br/&gt;"</span>)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.jb51.net/article/52484.htm" target="_blank" rel="external">JS获取客户端IP地址、MAC和主机名的7个方法汇总</a></li>
<li><a href="http://www.jb51.net/article/43586.htm" target="_blank" rel="external">js获取客户端外网ip的简单实例</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssm(struts2+spring3+mybatis3)问题集Q2]]></title>
      <url>http://www.missfli.com/2016/08/29/faq-ssm-q2/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>java.lang.NoClassDefFoundError: org/objectweb/asm/ClassVisitor<br><a id="more"></a></p>
<p>异常信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">SEVERE: Exception starting filter struts2</div><div class="line">java.lang.NoClassDefFoundError: org/objectweb/asm/ClassVisitor</div><div class="line">    at org.apache.struts2.convention.PackageBasedActionConfigBuilder.findActions(PackageBasedActionConfigBuilder.java:390)</div><div class="line">    at org.apache.struts2.convention.PackageBasedActionConfigBuilder.buildActionConfigs(PackageBasedActionConfigBuilder.java:347)</div><div class="line">    at org.apache.struts2.convention.ClasspathPackageProvider.loadPackages(ClasspathPackageProvider.java:53)</div><div class="line">    at com.opensymphony.xwork2.config.impl.DefaultConfiguration.reloadContainer(DefaultConfiguration.java:260)</div><div class="line">    at com.opensymphony.xwork2.config.ConfigurationManager.getConfiguration(ConfigurationManager.java:67)</div><div class="line">    at org.apache.struts2.dispatcher.Dispatcher.init_PreloadConfiguration(Dispatcher.java:429)</div><div class="line">    at org.apache.struts2.dispatcher.Dispatcher.init(Dispatcher.java:473)</div><div class="line">    at org.apache.struts2.dispatcher.ng.InitOperations.initDispatcher(InitOperations.java:74)</div><div class="line">    at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.init(StrutsPrepareAndExecuteFilter.java:51)</div><div class="line">    at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:281)</div><div class="line">    at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:262)</div><div class="line">    at org.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFilterConfig.java:107)</div><div class="line">    at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4775)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5452)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">    at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1559)</div><div class="line">    at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1549)</div><div class="line">    at java.util.concurrent.FutureTask<span class="variable">$Sync</span>.innerRun(Unknown Source)</div><div class="line">    at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(Unknown Source)</div><div class="line">    at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: java.lang.ClassNotFoundException: org.objectweb.asm.ClassVisitor</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1714)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1559)</div><div class="line">    ... 22 more</div></pre></td></tr></table></figure></p>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>添加以下struts的jar包：</p>
<ul>
<li>asm-commons-3.3.jar</li>
<li>asm-3.3.jar</li>
<li>asm-tree-3.3.jar</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssm(struts2+spring3+mybatis3)问题集Q1]]></title>
      <url>http://www.missfli.com/2016/08/29/faq-ssm-q1/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>不允许有匹配 “[xX][mM][lL]” 的处理指令目标。<br><a id="more"></a></p>
<p>异常信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">aused by: 不允许有匹配 <span class="string">"[xX][mM][lL]"</span> 的处理指令目标。 - file:/D:/apache-tomcat-7.0.70/webapps/security/WEB-INF/classes/struts.xml:1:7</div><div class="line">	at com.opensymphony.xwork2.util.DomHelper.parse(DomHelper.java:119)</div><div class="line">	at com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.loadConfigurationFiles(XmlConfigurationProvider.java:1021)</div><div class="line">	... 23 more</div><div class="line">Caused by: org.xml.sax.SAXParseException; systemId: file:/D:/apache-tomcat-7.0.70/webapps/security/WEB-INF/classes/struts.xml; lineNumber: 1; columnNumber: 7; 不允许有匹配 <span class="string">"[xX][mM][lL]"</span> 的处理指令目标。</div><div class="line">	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:198)</div><div class="line">	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1388)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLScanner.scanPIData(XMLScanner.java:675)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanPIData(XMLDocumentFragmentScannerImpl.java:980)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLScanner.scanPI(XMLScanner.java:643)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl<span class="variable">$PrologDriver</span>.next(XMLDocumentScannerImpl.java:913)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:607)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:489)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:835)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1210)</div><div class="line">	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl<span class="variable">$JAXPSAXParser</span>.parse(SAXParserImpl.java:568)</div><div class="line">	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.parse(SAXParserImpl.java:302)</div><div class="line">	at com.opensymphony.xwork2.util.DomHelper.parse(DomHelper.java:117)</div><div class="line">	... 24 more</div><div class="line">八月 29, 2016 10:20:43 上午 com.sun.faces.config.ConfigureListener contextInitialized</div></pre></td></tr></table></figure></p>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>看看struts.xml配置文件的声明 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code> 前面是否有空格啥的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何把myeclipse中安装的SVN中文插件转变为英文版]]></title>
      <url>http://www.missfli.com/2014/11/14/myeclipse-svn-change-en/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_ec2031db0102v6tl.html" target="_blank" rel="external">原地址</a><br>在Eclipse的configuration文件下找到config.ini文件，用写字板打开，在最后面添加上如下代码即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Set Subversion English Version</span></div><div class="line">osgi.nl=en_US</div></pre></td></tr></table></figure></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[oracle数据库安装卸载]]></title>
      <url>http://www.missfli.com/2014/07/11/oracle-install-and-uninstall/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_ec2031db0102uwyw.html" target="_blank" rel="external">原地址</a><br>oracle的安装和卸载相对于mysqll而言要麻烦些，故记录在此。方便以后查阅。<br><a id="more"></a></p>
<h2 id="Oracle-9i安装"><a href="#Oracle-9i安装" class="headerlink" title="Oracle 9i安装"></a>Oracle 9i安装</h2><ol>
<li>安装文件目录必须放置于非汉字目录下；</li>
<li>检查磁盘空间；</li>
<li>注意安装文件路径，一般不要放在C盘;</li>
<li>服务器安装时一般选择标准版或者企业版;</li>
<li>数据库的端口：1521</li>
</ol>
<p><strong>Oracle数据库创建：</strong></p>
<ol>
<li>configuration and migration tools –&gt; database configuration assistant –&gt; 创建数据库 –&gt; New Database  –&gt; 数据库名（英文）</li>
<li>enterprise manager console –&gt; 选择数据库，以系统管理员SYSDBA连接身份登录</li>
<li>创建表空间：存储 –&gt; 表空间 –&gt; 名称：比如vcall，数据文件：vcall_1、vcall_2、vcall_3，类型：永久</li>
<li>创建用户：安全性 –&gt; 用户 –&gt; 用户名，密码，表空间 –&gt; 角色：CONNECT,DBA</li>
</ol>
<h2 id="oracle-11g-2R安装"><a href="#oracle-11g-2R安装" class="headerlink" title="oracle 11g-2R安装"></a>oracle 11g-2R安装</h2><ol>
<li>安装程序目录和安装目录都不能含中文，安装目录还不能含有下划线。</li>
<li>密码是：首写字母大写，数字字母混合，不少于8位。</li>
<li>11g默认账户密码不存在过期问题，如果是新建账户，则只有180天的有效期，需要修改。<br><code>select * from dba_profiles where profile=&#39;DEFAULT&#39; and RESOURCE_NAME like &#39;PASSWORD%&#39;</code><br>以上语句可以查看相关信息。<br>如果想设置密码不过期，可用管理员登陆，然后执行：<br><code>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</code></li>
</ol>
<h2 id="oracle数据库卸载"><a href="#oracle数据库卸载" class="headerlink" title="oracle数据库卸载"></a>oracle数据库卸载</h2><ol>
<li><strong>关服务</strong><br>关闭oracle服务：services.msc</li>
<li><strong>卸产品</strong><br>用oracle自带的卸载项，卸载相关产品。</li>
<li><strong>删目录</strong><br>找到安装位置，删除oracle安装目录。</li>
<li><strong>删注册表</strong><br>打开注册表：regedit ,然后删除以下目录：<ul>
<li>注册oracle安装信息：<code>HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE</code></li>
<li>注册oracle服务：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\下oracle开头的服务名</code></li>
<li>写oracle事件日志：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\</code>下oracle开头的目录</li>
</ul>
</li>
<li><strong>删变量</strong><br>删除环境变量path中和oracle相关的内容（非必须的，不删也可以）。我的电脑–&gt;属性–&gt;高级–&gt;环境变量–&gt;PATH变量</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux设置中文输入法]]></title>
      <url>http://www.missfli.com/2014/07/11/linux-setting-chinese-input-method/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_ec2031db0102uwys.html" target="_blank" rel="external">原地址</a><br>有时候在linux环境下也是需要中文输入的。centos6自带有ibus输入法。<br><a id="more"></a></p>
<p><strong>ibus未安装时</strong></p>
<p><em>centos 6.2用yum安装ibus中文输入法:</em></p>
<ol>
<li>su root</li>
<li>yum install “@Chinese Support”</li>
<li>exit</li>
<li>回到桌面，system-&gt;preferences-&gt;input method</li>
<li>如果没有，先注销一下。</li>
<li>按照提示添加输入法。</li>
<li>最后 再次注销，登录即可。</li>
</ol>
<p><strong>ibus安装后：</strong></p>
<p>system–&gt;preferences–&gt;input method,调出中文拼音即可。</p>
]]></content>
    </entry>
    
  
  
</search>
