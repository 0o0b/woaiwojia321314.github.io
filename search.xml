<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SpringSecurity 3.2 自定义权限控制代码实现]]></title>
      <url>http://www.missfli.com/2016/09/28/spring-security3.2-custom-authority-control/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/hehaiyang/category/649866.html" target="_blank" rel="external">何海洋的SpringSecurity 3.2相关的教程系列</a></p>
<p>Spring Security 以前叫做 acegi ，是后来才成为Spring的一个子项目，也是目前最为流行的一个安全权限管理框架，它与Spring紧密结合在一起。<br>Spring Security 关注的重点是在企业应用安全层为您提供服务，你将发现业务问题领域存在着各式各样的需求。银行系统跟电子商务应用就有很大的不同。电子商务系统与企业销售自动化工具又有很大不同。这些客户化需求让应用安全显得有趣，富有挑战性而且物有所值。 Spring Security 为基于J2EE的企业应用软件提供了一套全面的安全解决方案。</p>
<a id="more"></a>
<h2 id="相关jar包下载"><a href="#相关jar包下载" class="headerlink" title="相关jar包下载"></a>相关jar包下载</h2><p><a href="http://www.missfli.com/2016/09/28/spring-download-jar/">spring和spring security相关的jar包和源码下载</a><br><a href="https://pan.baidu.com/s/1jINj8Aq" target="_blank" rel="external">我使用的spring security3.2的jar包和源码</a></p>
<h2 id="spring-security权限控制的流程"><a href="#spring-security权限控制的流程" class="headerlink" title="spring security权限控制的流程"></a>spring security权限控制的流程</h2><p><a href="http://www.missfli.com/2016/09/28/spring-security-flowsheet/">spring security权限控制的流程介绍</a></p>
<h2 id="spring-security使用分类"><a href="#spring-security使用分类" class="headerlink" title="spring security使用分类"></a>spring security使用分类</h2><p>如何使用 spring security ，相信百度过的都知道，总共有四种用法，从简到深为：</p>
<ol>
<li>不用数据库，全部数据写在配置文件，这个也是官方文档里面的 demo ；</li>
<li>使用数据库，根据spring security默认实现代码设计数据库，也就是说数据库已经固定了，这种方法不灵活，而且那个数据库设计得很简陋，实用性差；</li>
<li>spring security 和 Acegi 不同，它不能修改默认 filter 了，但支持插入 filter ，所以根据这个，我们可以插入自己的 filter 来灵活使用；</li>
<li>暴力手段，修改源码，前面说的修改默认 filter 只是修改配置文件以替换 filter 而已，这种是直接改了里面的源码，但是这种不符合OO设计原则，而且不实际，不可用。</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h4 id="1-一个自定义的filter，必须包含-authenticationManager，accessDecisionManager，securityMetadataSource-三个属性，我们的所有控制将在这三个类中实现-。"><a href="#1-一个自定义的filter，必须包含-authenticationManager，accessDecisionManager，securityMetadataSource-三个属性，我们的所有控制将在这三个类中实现-。" class="headerlink" title="1. 一个自定义的filter，必须包含 authenticationManager，accessDecisionManager，securityMetadataSource 三个属性，我们的所有控制将在这三个类中实现 。"></a>1. 一个自定义的filter，必须包含 authenticationManager，accessDecisionManager，securityMetadataSource 三个属性，我们的所有控制将在这三个类中实现 。</h4><p>MySecurityFilter.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import javax.servlet.Filter;</div><div class="line">import javax.servlet.FilterChain;</div><div class="line">import javax.servlet.FilterConfig;</div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.ServletRequest;</div><div class="line">import javax.servlet.ServletResponse;</div><div class="line"></div><div class="line">import org.springframework.security.access.SecurityMetadataSource;</div><div class="line">import org.springframework.security.access.intercept.AbstractSecurityInterceptor;</div><div class="line">import org.springframework.security.access.intercept.InterceptorStatusToken;</div><div class="line">import org.springframework.security.web.FilterInvocation;</div><div class="line">import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;</div><div class="line"></div><div class="line">public class MySecurityFilter extends AbstractSecurityInterceptor implements</div><div class="line">        Filter &#123;</div><div class="line"></div><div class="line"></div><div class="line">    // 与securityConfig.xml里的myFilter的属性securityMetadataSource对应，</div><div class="line">    // 其他的两个组件，已经在AbstractSecurityInterceptor定义</div><div class="line">    private FilterInvocationSecurityMetadataSource securityMetadataSource;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public SecurityMetadataSource <span class="function"><span class="title">obtainSecurityMetadataSource</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> this.securityMetadataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="keyword">do</span>Filter(ServletRequest request, ServletResponse response,</div><div class="line">            FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">        System.out.println(<span class="string">"------------MyFilterSecurityInterceptor.doFilter()-----------开始拦截了...."</span>);</div><div class="line">        FilterInvocation <span class="keyword">fi</span> = new FilterInvocation(request, response, chain);</div><div class="line">        invoke(<span class="keyword">fi</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void invoke(FilterInvocation <span class="keyword">fi</span>) throws IOException,</div><div class="line">            ServletException &#123;</div><div class="line">        System.out.println(<span class="string">"--------------用户发送请求--------------"</span>);</div><div class="line">        InterceptorStatusToken token = null;</div><div class="line">        token = super.beforeInvocation(<span class="keyword">fi</span>);</div><div class="line">        try &#123;</div><div class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</div><div class="line">        &#125;catch (Exception e) &#123;</div><div class="line">        &#125;finally &#123;</div><div class="line">            super.afterInvocation(token, null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"------------MyFilterSecurityInterceptor.doFilter()-----------拦截结束了...."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public FilterInvocationSecurityMetadataSource <span class="function"><span class="title">getSecurityMetadataSource</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> securityMetadataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>SecurityMetadataSource(</div><div class="line">            FilterInvocationSecurityMetadataSource securityMetadataSource) &#123;</div><div class="line">        this.securityMetadataSource = securityMetadataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void init(FilterConfig arg0) throws ServletException &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="function"><span class="title">destroy</span></span>() &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Class&lt;? extends Object&gt; <span class="function"><span class="title">getSecureObjectClass</span></span>() &#123;</div><div class="line">        // 下面的MyAccessDecisionManager的supports方面必须放回<span class="literal">true</span>,否则会提醒类型错误</div><div class="line">        <span class="built_in">return</span> FilterInvocation.class;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-用于启动时加载资源列表，还拥有判断是否拥有请求访问资源权限的方法。"><a href="#2-用于启动时加载资源列表，还拥有判断是否拥有请求访问资源权限的方法。" class="headerlink" title="2. 用于启动时加载资源列表，还拥有判断是否拥有请求访问资源权限的方法。"></a>2. 用于启动时加载资源列表，还拥有判断是否拥有请求访问资源权限的方法。</h4><p>MyFilterInvocationSecurityMetadataSource.java（相关类：SecurityUserDao.java，SecurityUserDaoImp.java，MyRoleResource.java）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Collection;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Map.Entry;</div><div class="line">import org.springframework.security.access.ConfigAttribute;</div><div class="line">import org.springframework.security.access.SecurityConfig;</div><div class="line">import org.springframework.security.web.FilterInvocation;</div><div class="line">import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;</div><div class="line"></div><div class="line">import com.le.dao.security.SecurityUserDao;</div><div class="line">import com.le.util.StringUtils;</div><div class="line"></div><div class="line">public class MyFilterInvocationSecurityMetadataSource implements FilterInvocationSecurityMetadataSource &#123;</div><div class="line">	//原本资源(url)与角色的对应关系需要从数据源中获取，这里做了简化</div><div class="line">    private Map&lt;String, Collection&lt;ConfigAttribute&gt;&gt; resourceMap;</div><div class="line">    //这里不能使用属性注解注入的方式，得用构造函数里注解注入的方式。</div><div class="line">    private SecurityUserDao securityUserDaoImp;</div><div class="line"></div><div class="line"></div><div class="line">    public MyFilterInvocationSecurityMetadataSource(SecurityUserDao securityUserDaoImp) &#123;</div><div class="line">    	//使用注解方式的话，只能在构造函数执行完成后才能获得实例</div><div class="line">    	this.securityUserDaoImp = securityUserDaoImp;</div><div class="line">    	resourceMap = loadResourceMatchAuthority();</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">    public <span class="function"><span class="title">MyFilterInvocationSecurityMetadataSource</span></span>() &#123;</div><div class="line">    	resourceMap = loadResourceMatchAuthority();</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line"></div><div class="line">    public Collection&lt;ConfigAttribute&gt; getAttributes(Object object) throws IllegalArgumentException &#123;</div><div class="line"></div><div class="line">        String url = ((FilterInvocation) object).getRequestUrl();</div><div class="line">        System.out.println(<span class="string">"requestUrl is "</span> + url);</div><div class="line">        //System.out.println(resourceMap.size());</div><div class="line">        //判断空值后，首次启动时就加载缓存起来使用；不判断空值就是每次url请求都会加载一次。</div><div class="line">        //<span class="keyword">if</span> (resourceMap == null) &#123;</div><div class="line">        	resourceMap = loadResourceMatchAuthority();</div><div class="line">        //&#125;</div><div class="line">        <span class="built_in">return</span> resourceMap.get(url);</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line"></div><div class="line">    public Collection&lt;ConfigAttribute&gt; <span class="function"><span class="title">getAllConfigAttributes</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">    public boolean supports(Class&lt;?&gt; clazz) &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;//method</div><div class="line"></div><div class="line"></div><div class="line">    private Map&lt;String, Collection&lt;ConfigAttribute&gt;&gt; <span class="function"><span class="title">loadResourceMatchAuthority</span></span>() &#123;</div><div class="line"></div><div class="line">        Map&lt;String, Collection&lt;ConfigAttribute&gt;&gt; map = new HashMap&lt;String, Collection&lt;ConfigAttribute&gt;&gt;();</div><div class="line"></div><div class="line">        //eg: jsp/user/user.jsp -- ROLE_SUPERADMIN,ROLE_SUBADMIN</div><div class="line">        Map&lt;String, String&gt; configs = getResourcesConfig();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : configs.entrySet()) &#123;</div><div class="line">            Collection&lt;ConfigAttribute&gt; list = new ArrayList&lt;ConfigAttribute&gt;();</div><div class="line">            String[] vals = entry.getValue().split(<span class="string">","</span>);</div><div class="line">            <span class="keyword">for</span> (String val : vals) &#123;</div><div class="line">                ConfigAttribute config = new SecurityConfig(val);</div><div class="line">                list.add(config);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            map.put(entry.getKey(), list);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> map;</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 定义简单url 与role的对应</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">    private Map&lt;String, String&gt; <span class="function"><span class="title">getResourcesConfig</span></span>() &#123;</div><div class="line"></div><div class="line"></div><div class="line">        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</div><div class="line">        //<span class="built_in">test</span> <span class="keyword">for</span> no db</div><div class="line">//        map.put(<span class="string">"/admin.jsp"</span>, <span class="string">"ROLE_ADMIN"</span>);</div><div class="line">//        map.put(<span class="string">"/adminuser.jsp"</span>, <span class="string">"ROLE_ADMIN,ROLE_USER"</span>);</div><div class="line">//        map.put(<span class="string">"/user.jsp"</span>, <span class="string">"ROLE_USER"</span>);</div><div class="line"></div><div class="line">        List&lt;MyRoleResource&gt; list = (List&lt;MyRoleResource&gt;)securityUserDaoImp.querySecurityFuncs();</div><div class="line">        <span class="keyword">if</span> (list.size()&gt;0) &#123;</div><div class="line">			<span class="keyword">for</span> (MyRoleResource obj : list) &#123;</div><div class="line">				//System.out.println(<span class="string">"url:【"</span>+obj.getUrl()+<span class="string">"】，role:【"</span>+obj.getRole()+<span class="string">"】"</span>);</div><div class="line">				String urlStr = obj.getUrl();</div><div class="line">				String roleStr = obj.getRole();</div><div class="line"></div><div class="line">				//eg: jsp/user/user.jsp -- ROLE_SUPERADMIN,ROLE_SUBADMIN</div><div class="line">				String urlTemp = <span class="string">""</span>;</div><div class="line">				<span class="keyword">if</span>(urlStr.indexOf(<span class="string">"jsp"</span>)&gt;-1)&#123;</div><div class="line">					urlTemp = <span class="string">"/back_control/"</span>+urlStr;</div><div class="line">				&#125;<span class="keyword">else</span> &#123;</div><div class="line">					urlTemp = <span class="string">"/"</span>+urlStr;</div><div class="line">				&#125;</div><div class="line">				//System.out.println(map.get(urlTemp));</div><div class="line">				<span class="keyword">if</span>(map.get(urlTemp)== null || map.get(urlTemp).length() == 0)&#123;</div><div class="line">					map.put(urlTemp, roleStr);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					map.put(urlTemp, map.get(urlTemp)+<span class="string">","</span>+roleStr);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> map;</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SecurityUserDao.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.le.dao.security;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public interface SecurityUserDao &#123;</div><div class="line"></div><div class="line">	public List&lt;?&gt; querySecurityUsers();</div><div class="line">	public List&lt;?&gt; querySecurityFuncs();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SecurityUserDaoImp.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">package com.le.dao.security;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import javax.annotation.Resource;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">import com.le.pagin.MySqlMapClientTemplate;</div><div class="line"></div><div class="line">@Repository(<span class="string">"securityUserDaoImp"</span>)</div><div class="line">public class SecurityUserDaoImp implements SecurityUserDao&#123;</div><div class="line">	/** sqlMapClientTemplate */</div><div class="line">	private @Resource(name = <span class="string">"sqlMapClientTemplate"</span>)</div><div class="line">	MySqlMapClientTemplate sqlMapClientTemplate;</div><div class="line"></div><div class="line"></div><div class="line">	@SuppressWarnings(<span class="string">"deprecation"</span>)</div><div class="line">	@Override</div><div class="line">	public List&lt;?&gt; <span class="function"><span class="title">querySecurityUsers</span></span>() &#123;</div><div class="line">		List&lt;?&gt; result = null;</div><div class="line">		try &#123;</div><div class="line">			result = sqlMapClientTemplate.queryForList(<span class="string">"querySecurityUsers"</span>);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">return</span> result;</div><div class="line">	&#125;//method</div><div class="line"></div><div class="line">	@SuppressWarnings(<span class="string">"deprecation"</span>)</div><div class="line">	@Override</div><div class="line">	public List&lt;?&gt; <span class="function"><span class="title">querySecurityFuncs</span></span>() &#123;</div><div class="line">		List&lt;?&gt; result = null;</div><div class="line">		try &#123;</div><div class="line">			result = sqlMapClientTemplate.queryForList(<span class="string">"querySecurityFuncs"</span>);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">return</span> result;</div><div class="line">	&#125;//method</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MyRoleResource.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line">public class MyRoleResource &#123;</div><div class="line"></div><div class="line">	// Fields</div><div class="line"></div><div class="line">	public String role;//角色（ROLE_开头）</div><div class="line">	public String url;//资源url</div><div class="line"></div><div class="line">	// Property accessors</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getRole</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> role;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Role(String role) &#123;</div><div class="line">		this.role = role;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getUrl</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> url;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Url(String url) &#123;</div><div class="line">		this.url = url;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源-做最终的访问控制决定。"><a href="#3-访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源-做最终的访问控制决定。" class="headerlink" title="3. 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 ;做最终的访问控制决定。"></a>3. 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 ;做最终的访问控制决定。</h4><p>MyAccessDecisionManager.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line">import java.util.Collection;</div><div class="line">import java.util.Iterator;</div><div class="line"></div><div class="line">import org.springframework.security.access.AccessDecisionManager;</div><div class="line">import org.springframework.security.access.AccessDeniedException;</div><div class="line">import org.springframework.security.access.ConfigAttribute;</div><div class="line">import org.springframework.security.authentication.InsufficientAuthenticationException;</div><div class="line">import org.springframework.security.core.Authentication;</div><div class="line">import org.springframework.security.core.GrantedAuthority;</div><div class="line"></div><div class="line">public class MyAccessDecisionManager implements AccessDecisionManager &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  认证用户是否具有权限访问该url地址</div><div class="line">     *</div><div class="line">     */</div><div class="line">    public void decide(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes) throws AccessDeniedException, InsufficientAuthenticationException &#123;</div><div class="line">        System.out.println(<span class="string">"--------------匹配用户拥有权限和请求权限(MyAccessDecisionManager:decide)--------------"</span>);</div><div class="line">        System.out.println(<span class="string">"--------------验证用户是否具有一定的权限--------------"</span>);</div><div class="line">         <span class="keyword">if</span>(configAttributes == null) &#123;</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">        //所请求的资源拥有的权限(一个资源对多个权限)</div><div class="line">        Iterator&lt;ConfigAttribute&gt; iterator = configAttributes.iterator();</div><div class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</div><div class="line">            ConfigAttribute configAttribute = iterator.next();</div><div class="line">            //访问所请求资源所需要的权限</div><div class="line">            String needPermission = configAttribute.getAttribute();</div><div class="line">            System.out.println(<span class="string">"--------------访问所请求资源所需要的权限为 "</span> + needPermission+<span class="string">"--------------"</span>);</div><div class="line">            //用户所拥有的权限authentication</div><div class="line">            <span class="keyword">for</span>(GrantedAuthority ga : authentication.getAuthorities()) &#123;</div><div class="line">                <span class="keyword">if</span>(needPermission.equals(ga.getAuthority())) &#123;</div><div class="line">                    System.out.println(<span class="string">"--------------权限验证通过--------------"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //没有权限让我们去捕捉</div><div class="line">        System.out.println(<span class="string">"--------------权限验证未通过--------------"</span>);</div><div class="line">        throw new AccessDeniedException(<span class="string">" 没有权限访问！"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 启动时候被AbstractSecurityInterceptor调用，决定AccessDecisionManager是否可以执行传递ConfigAttribute。</div><div class="line">     */</div><div class="line">    public boolean supports(ConfigAttribute attribute) &#123;</div><div class="line">//         System.out.println(<span class="string">"MyAccessDescisionManager.supports()------------"</span>+attribute.getAttribute());</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">      /**</div><div class="line">     * 被安全拦截器实现调用，包含安全拦截器将显示的AccessDecisionManager支持安全对象的类型</div><div class="line">     */</div><div class="line">    public boolean supports(Class&lt;?&gt; clazz) &#123;</div><div class="line">        System.out.println(<span class="string">"MyAccessDescisionManager.supports()--------------------------------"</span>);</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-验证登录信息。"><a href="#4-验证登录信息。" class="headerlink" title="4. 验证登录信息。"></a>4. 验证登录信息。</h4><p>MyUsernamePasswordAuthenticationFilter.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line">import javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line">import org.apache.struts2.StrutsStatics;</div><div class="line">import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</div><div class="line">import org.springframework.security.core.Authentication;</div><div class="line">import org.springframework.security.core.AuthenticationException;</div><div class="line">import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</div><div class="line"></div><div class="line">import com.le.common.MD5Util;</div><div class="line">import com.le.dao.user.UserDao;</div><div class="line">import com.le.dto.resultdto.user.BgUserResultDto;</div><div class="line"></div><div class="line">public class MyUsernamePasswordAuthenticationFilter extends UsernamePasswordAuthenticationFilter &#123;</div><div class="line">    private static final String USERNAME = <span class="string">"username"</span>;</div><div class="line">    private static final String PASSWORD = <span class="string">"password"</span>;</div><div class="line">    private UserDao userDaoImp;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException &#123;</div><div class="line"></div><div class="line">        String username = obtainUsername(request);</div><div class="line">        String password = obtainPassword(request);</div><div class="line">        password = MD5Util.MD5Encode(password, <span class="string">"utf-8"</span>);//md5加密</div><div class="line"></div><div class="line">        //将action中登陆要做的事全部移动过来（暂时只移动了session部分）</div><div class="line">		HttpSession session = request.getSession();</div><div class="line">		BgUserResultDto <span class="built_in">bg</span>User = new BgUserResultDto();</div><div class="line">		<span class="built_in">bg</span>User.setUsercode(username);</div><div class="line">		<span class="built_in">bg</span>User.setPassword(password);</div><div class="line">		//BgUserResultDto re = userServiceImp.backLogin(<span class="built_in">bg</span>User);</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">bg</span>User != null) &#123;</div><div class="line">			Object kk = session.getAttribute(<span class="string">"SYS_MEMBER_INFO"</span>);</div><div class="line">			<span class="keyword">if</span> (kk == null) &#123;</div><div class="line">				session.setAttribute(<span class="string">"SYS_MEMBER_INFO"</span>, <span class="built_in">bg</span>User);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">        // 实现 Authentication</div><div class="line">        UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);</div><div class="line">        // 允许子类设置详细属性</div><div class="line">        <span class="built_in">set</span>Details(request, authRequest);</div><div class="line">        // 运行UserDetailsService的loadUserByUsername 再次封装Authentication</div><div class="line">        <span class="built_in">return</span> this.getAuthenticationManager().authenticate(authRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String obtainUsername(HttpServletRequest request) &#123;</div><div class="line">        Object obj = request.getParameter(USERNAME);</div><div class="line">        <span class="built_in">return</span> null == obj ? <span class="string">""</span> : obj.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String obtainPassword(HttpServletRequest request) &#123;</div><div class="line">        Object obj = request.getParameter(PASSWORD);</div><div class="line">        <span class="built_in">return</span> null == obj ? <span class="string">""</span> : obj.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="built_in">set</span>Details(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) &#123;</div><div class="line">        super.setDetails(request, authRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	public UserDao <span class="function"><span class="title">getUserDaoImp</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> userDaoImp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>UserDaoImp(UserDao userDaoImp) &#123;</div><div class="line">		this.userDaoImp = userDaoImp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="5-登录成功后，根据用户名，返回一个Userdetail。"><a href="#5-登录成功后，根据用户名，返回一个Userdetail。" class="headerlink" title="5. 登录成功后，根据用户名，返回一个Userdetail。"></a>5. 登录成功后，根据用户名，返回一个Userdetail。</h4><p>MyUserDetailsService.java（相关类：MyUserDetails.java）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.dao.DataAccessException;</div><div class="line">import org.springframework.security.core.userdetails.UserDetails;</div><div class="line">import org.springframework.security.core.userdetails.UserDetailsService;</div><div class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</div><div class="line"></div><div class="line">import com.le.dao.security.SecurityUserDao;</div><div class="line">import com.le.security.MyUserDetails;</div><div class="line"></div><div class="line"></div><div class="line">public class MyUserDetailsService implements UserDetailsService &#123;</div><div class="line">	//模拟临时的用户信息存储,实际应用当中应该是从数据源加载</div><div class="line">	private Map&lt;String,UserDetails&gt; usersinfo = new HashMap&lt;String,UserDetails&gt;();</div><div class="line">	@Autowired</div><div class="line">	private SecurityUserDao securityUserDaoImp;</div><div class="line"></div><div class="line">    //登录验证</div><div class="line">    @Override</div><div class="line">    public UserDetails loadUserByUsername(String username)</div><div class="line">    throws UsernameNotFoundException, DataAccessException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(usersinfo.isEmpty())&#123;</div><div class="line">            loadUsersinfo();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> usersinfo.get(username);</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">    //模拟用户信息</div><div class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">	private void <span class="function"><span class="title">loadUsersinfo</span></span>()&#123;</div><div class="line">    	// <span class="built_in">test</span> <span class="keyword">for</span> no db</div><div class="line">//        UserDetails detailsOne = new MyUserDetails(<span class="string">"superadmin"</span>,<span class="string">"e10adc3949ba59abbe56e057f20f883e"</span>,<span class="string">"ROLE_SUPERADMIN"</span>,<span class="literal">true</span>);</div><div class="line">//        usersinfo.put(<span class="string">"superadmin"</span>, detailsOne);</div><div class="line">//</div><div class="line">//        UserDetails detailsTwo = new MyUserDetails(<span class="string">"fli"</span>,<span class="string">"e10adc3949ba59abbe56e057f20f883e"</span>,<span class="string">"ROLE_USER"</span>,<span class="literal">true</span>);</div><div class="line">//        usersinfo.put(<span class="string">"fli"</span>, detailsTwo);</div><div class="line"></div><div class="line">		List&lt;MyUserDetails&gt; list = (List&lt;MyUserDetails&gt;)securityUserDaoImp.querySecurityUsers();</div><div class="line">        <span class="keyword">if</span> (list.size()&gt;0) &#123;</div><div class="line">			<span class="keyword">for</span> (MyUserDetails obj : list) &#123;</div><div class="line">				//System.out.println(<span class="string">"username:["</span>+obj.getUsername()+<span class="string">"],password:["</span>+obj.getPassword()+<span class="string">"],role:["</span>+obj.getRole()+<span class="string">"]"</span>);</div><div class="line">				usersinfo.put(obj.getUsername(), obj);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MyUserDetails.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">package com.le.security;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collection;</div><div class="line">import org.springframework.security.core.GrantedAuthority;</div><div class="line">import org.springframework.security.core.authority.GrantedAuthorityImpl;</div><div class="line">//import org.springframework.security.core.authority.SimpleGrantedAuthority;</div><div class="line">import org.springframework.security.core.userdetails.UserDetails;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 用户信息</div><div class="line"> * @author fli</div><div class="line"> * @see UserDetails</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line">public class MyUserDetails implements UserDetails &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    private String username;//用戶名</div><div class="line">    private String password;//密码</div><div class="line">    private String role;//角色</div><div class="line">    private boolean enabled=<span class="literal">true</span>;//账户是否可用</div><div class="line">    private static final String ROLE_LOGIN=<span class="string">"ROLE_LOGIN"</span>;</div><div class="line"></div><div class="line">    public <span class="function"><span class="title">MyUserDetails</span></span>()&#123;</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">    public MyUserDetails(String username, String password, String role, boolean enabled) &#123;</div><div class="line"></div><div class="line">        super();</div><div class="line">        this.username = username;</div><div class="line">        this.password = password;</div><div class="line">        this.role = role;</div><div class="line">        this.enabled = enabled;</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取当前用户的权限</div><div class="line">     * 其实用户应该拥有多个角色,这里简单起见只用了一个String类型来表示</div><div class="line">     * 其实用户 角色权限 资源三者可以各自创建对象并关联能实现一个非常复杂的权限控制</div><div class="line">     */</div><div class="line"></div><div class="line">    public Collection&lt;GrantedAuthority&gt; <span class="function"><span class="title">getAuthorities</span></span>() &#123;</div><div class="line"></div><div class="line">        GrantedAuthority[] gas = new GrantedAuthority[2];</div><div class="line">        gas[0] = new GrantedAuthorityImpl(role);</div><div class="line">        //分配登录权限给所有通过登录验证的角色</div><div class="line">        gas[1] = new GrantedAuthorityImpl(ROLE_LOGIN);</div><div class="line"></div><div class="line">        <span class="built_in">return</span> Arrays.asList(gas);</div><div class="line"></div><div class="line">    &#125;//method</div><div class="line"></div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getPassword</span></span>() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> password;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public String <span class="function"><span class="title">getUsername</span></span>() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> username;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public boolean <span class="function"><span class="title">isAccountNonExpired</span></span>() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public boolean <span class="function"><span class="title">isAccountNonLocked</span></span>() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public boolean <span class="function"><span class="title">isCredentialsNonExpired</span></span>() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public boolean <span class="function"><span class="title">isEnabled</span></span>() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> enabled;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>Username(String username) &#123;</div><div class="line"></div><div class="line">        this.username = username;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>Password(String password) &#123;</div><div class="line"></div><div class="line">        this.password = password;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>Enabled(boolean enabled) &#123;</div><div class="line"></div><div class="line">        this.enabled = enabled;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getRole</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> role;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Role(String role) &#123;</div><div class="line">		this.role = role;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="6-配置信息"><a href="#6-配置信息" class="headerlink" title="6. 配置信息"></a>6. 配置信息</h4><p>securityConfig.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">    xmlns:security=<span class="string">"http://www.springframework.org/schema/security"</span></div><div class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">            http://www.springframework.org/schema/security</div><div class="line">            http://www.springframework.org/schema/security/spring-security-3.2.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;!-- 配置不过滤的资源（静态资源及登录相关） --&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/favicon.ico"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/back_control/css/**"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/back_control/images/**"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/back_control/js/**"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/back_control/plugin/**"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/back_control/m_login.jsp"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line">    &lt;security:http pattern=<span class="string">"/index.jsp"</span> security=<span class="string">"none"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;!-- 配置SpringSecurity的http安全服务 --&gt;</div><div class="line">    &lt;security:http access-denied-page=<span class="string">"/back_control/403.jsp"</span> entry-point-ref=<span class="string">"authenticationProcessingFilterEntryPoint"</span>&gt;</div><div class="line">    	&lt;!--</div><div class="line">		单用户登陆(max-sessions=<span class="string">"1"</span> 其中1表示一个帐号可同时登录的次数)</div><div class="line">        1. 仅配置max-sessions=<span class="string">"1"</span>,则第二次登录会让第一次登录失效。</div><div class="line">        2. 同时配置max-sessions=<span class="string">"1"</span> error-if-maximum-exceeded=<span class="string">"true"</span>，则可以防止第二次登录</div><div class="line">        --&gt;</div><div class="line">        &lt;security:session-management&gt;</div><div class="line">            &lt;security:concurrency-control max-sessions=<span class="string">"1"</span> error-if-maximum-exceeded=<span class="string">"false"</span>/&gt;</div><div class="line">        &lt;/security:session-management&gt;</div><div class="line"></div><div class="line">        &lt;!-- 检测失效的sessionId,session超时时，定位到另外一个URL --&gt;</div><div class="line">        &lt;security:session-management invalid-session-url=<span class="string">"/back_control/sessionTimeOut.jsp"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;!-- 配置登出信息，指定退出系统后，跳转页面  --&gt;</div><div class="line">        &lt;security:<span class="built_in">logout</span> <span class="built_in">logout</span>-url=<span class="string">"/BackLogout"</span> <span class="built_in">logout</span>-success-url=<span class="string">"/back_control/m_login.jsp"</span> invalidate-session=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;!-- 认证和授权 --&gt;</div><div class="line">        &lt;security:custom-filter ref=<span class="string">"myLoginFilter"</span> position=<span class="string">"FORM_LOGIN_FILTER"</span>  /&gt;</div><div class="line">        &lt;security:custom-filter ref=<span class="string">"securityFilter"</span> before=<span class="string">"FILTER_SECURITY_INTERCEPTOR"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;/security:http&gt;</div><div class="line"></div><div class="line">    &lt;!-- 验证配置 ， 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 --&gt;</div><div class="line">    &lt;security:authentication-manager <span class="built_in">alias</span>=<span class="string">"myAuthenticationManager"</span>&gt;</div><div class="line">        &lt;!-- 使用自己数据库中的用户和角色表,获取用户拥有的权限 --&gt;</div><div class="line">        &lt;security:authentication-provider user-service-ref=<span class="string">"myUserDetailsServiceImpl"</span> /&gt;</div><div class="line">    &lt;/security:authentication-manager&gt;</div><div class="line"></div><div class="line">    &lt;!-- 登录认证过滤器 --&gt;</div><div class="line">    &lt;bean id=<span class="string">"myLoginFilter"</span> class=<span class="string">"com.le.security.MyUsernamePasswordAuthenticationFilter"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"filterProcessesUrl"</span> value=<span class="string">"/BackUserlogin"</span>&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"usernameParameter"</span> value=<span class="string">"username"</span>&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"passwordParameter"</span> value=<span class="string">"password"</span>&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"userDaoImp"</span> ref=<span class="string">"userDaoImp"</span>&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"authenticationSuccessHandler"</span> ref=<span class="string">"loginLogAuthenticationSuccessHandler"</span>&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"authenticationFailureHandler"</span> ref=<span class="string">"simpleUrlAuthenticationFailureHandler"</span>&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"authenticationManager"</span> ref=<span class="string">"myAuthenticationManager"</span>&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    &lt;bean id=<span class="string">"loginLogAuthenticationSuccessHandler"</span></div><div class="line">        class=<span class="string">"org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"defaultTargetUrl"</span> value=<span class="string">"/back_control/m_home.jsp"</span>&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    &lt;bean id=<span class="string">"simpleUrlAuthenticationFailureHandler"</span></div><div class="line">        class=<span class="string">"org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"defaultFailureUrl"</span> value=<span class="string">"/back_control/m_login.jsp"</span>&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    &lt;bean id=<span class="string">"userDaoImp"</span> class=<span class="string">"com.le.dao.user.UserDaoImp"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;!-- 认证过滤器 --&gt;</div><div class="line">    &lt;bean id=<span class="string">"securityFilter"</span> class=<span class="string">"com.le.security.MySecurityFilter"</span>&gt;</div><div class="line">        &lt;!-- 用户拥有的权限 --&gt;</div><div class="line">        &lt;property name=<span class="string">"authenticationManager"</span> ref=<span class="string">"myAuthenticationManager"</span> /&gt;</div><div class="line">        &lt;!-- 用户是否拥有所请求资源的权限 --&gt;</div><div class="line">        &lt;property name=<span class="string">"accessDecisionManager"</span> ref=<span class="string">"myAccessDecisionManager"</span> /&gt;</div><div class="line">        &lt;!-- 资源与权限对应关系 --&gt;</div><div class="line">        &lt;property name=<span class="string">"securityMetadataSource"</span> ref=<span class="string">"myFilterInvocationSecurityMetadataSource"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=<span class="string">"myUserDetailsServiceImpl"</span> class=<span class="string">"com.le.security.MyUserDetailsService"</span>/&gt;</div><div class="line">    &lt;bean id=<span class="string">"myAccessDecisionManager"</span> class=<span class="string">"com.le.security.MyAccessDecisionManager"</span>/&gt;</div><div class="line">    &lt;bean id=<span class="string">"myFilterInvocationSecurityMetadataSource"</span> class=<span class="string">"com.le.security.MyFilterInvocationSecurityMetadataSource"</span>&gt;</div><div class="line">    	&lt;constructor-arg ref=<span class="string">"securityUserDaoImp"</span>/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;!-- 未登录的切入点 --&gt;</div><div class="line">    &lt;bean id=<span class="string">"authenticationProcessingFilterEntryPoint"</span> class=<span class="string">"org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"loginFormUrl"</span> value=<span class="string">"/back_control/m_login.jsp"</span>/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;!-- 定义上下文返回的消息的国际化</div><div class="line">    &lt;bean id=<span class="string">"messageSource"</span></div><div class="line">        class=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"basename"</span></div><div class="line">            value=<span class="string">"classpath:org/springframework/seurity/messages_zh_CN"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>web.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xmlns:web=<span class="string">"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> version=<span class="string">"3.0"</span>&gt;</div><div class="line">  &lt;filter&gt;</div><div class="line">    &lt;filter-name&gt;setcharacterencodingfilter&lt;/filter-name&gt;</div><div class="line">    &lt;filter-class&gt;</div><div class="line">           com.le.common.SetCharacterEncodingFilter</div><div class="line">       &lt;/filter-class&gt;</div><div class="line">    &lt;init-param&gt;</div><div class="line">      &lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">      &lt;param-value&gt;utf-8&lt;/param-value&gt;</div><div class="line">    &lt;/init-param&gt;</div><div class="line">  &lt;/filter&gt;</div><div class="line">  &lt;filter-mapping&gt;</div><div class="line">    &lt;filter-name&gt;setcharacterencodingfilter&lt;/filter-name&gt;</div><div class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">  &lt;/filter-mapping&gt;</div><div class="line">  &lt;display-name&gt;JI&lt;/display-name&gt;</div><div class="line">  &lt;description&gt;Job Integration&lt;/description&gt;</div><div class="line">  &lt;context-param&gt;</div><div class="line">    &lt;param-name&gt;webAppRootKey&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;servermgt.root&lt;/param-value&gt;</div><div class="line">  &lt;/context-param&gt;</div><div class="line">  &lt;context-param&gt;</div><div class="line">    &lt;param-name&gt;<span class="built_in">log</span>4jConfigLocation&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;/WEB-INF/classes/<span class="built_in">log</span>4j.properties&lt;/param-value&gt;</div><div class="line">  &lt;/context-param&gt;</div><div class="line">  &lt;context-param&gt;</div><div class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;/WEB-INF/applicationContext.xml, classpath:securityConfig.xml&lt;/param-value&gt;</div><div class="line">  &lt;/context-param&gt;</div><div class="line">  &lt;!-- Spring Secutiry3的过滤器配置 --&gt;</div><div class="line">  &lt;filter&gt;</div><div class="line">      &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</div><div class="line">      &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</div><div class="line">  &lt;/filter&gt;</div><div class="line">  &lt;filter-mapping&gt;</div><div class="line">      &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</div><div class="line">      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">  &lt;/filter-mapping&gt;</div><div class="line">  &lt;!-- 获取Spring Security session的生命周期,这个监听器会在 session 创建和销毁的时候通知 Spring Security --&gt;</div><div class="line">  &lt;listener&gt;</div><div class="line">      &lt;listener-class&gt;org.springframework.security.web.session.HttpSessionEventPublisher&lt;/listener-class&gt;</div><div class="line">  &lt;/listener&gt;</div><div class="line">  &lt;!-- /Spring Secutiry3的过滤器配置 --&gt;</div><div class="line">  &lt;listener&gt;</div><div class="line">    &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;</div><div class="line">  &lt;/listener&gt;</div><div class="line">  &lt;listener&gt;</div><div class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">  &lt;/listener&gt;</div><div class="line">  &lt;filter&gt;</div><div class="line">    &lt;filter-name&gt;struts&lt;/filter-name&gt;</div><div class="line">    &lt;filter-class&gt;org.apache.struts2.dispatcher.FilterDispatcher&lt;/filter-class&gt;</div><div class="line">  &lt;/filter&gt;</div><div class="line">  &lt;filter-mapping&gt;</div><div class="line">    &lt;filter-name&gt;struts&lt;/filter-name&gt;</div><div class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;</div><div class="line">    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;</div><div class="line">  &lt;/filter-mapping&gt;</div><div class="line"></div><div class="line">  &lt;welcome-file-list&gt;</div><div class="line">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">  &lt;/welcome-file-list&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>applicationContext.xml （数据库连接配置）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line"></div><div class="line">&lt;beans  xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">		xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">		xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">		xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">		xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">		xsi:schemaLocation=<span class="string">"</span></div><div class="line">			http://www.springframework.org/schema/beans</div><div class="line">			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">			http://www.springframework.org/schema/aop</div><div class="line">			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">			http://www.springframework.org/schema/tx</div><div class="line">			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">			http://www.springframework.org/schema/context</div><div class="line">			http://www.springframework.org/schema/context/spring-context-3.2.xsd"</div><div class="line">            default-lazy-init=<span class="string">"false"</span> default-init-method=<span class="string">"initialize"</span>&gt;</div><div class="line">		&lt;aop:aspectj-autoproxy/&gt;</div><div class="line"></div><div class="line">    &lt;context:annotation-config /&gt;</div><div class="line">    &lt;context:component-scan base-package=<span class="string">"com.le.*"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> destroy-method=<span class="string">"close"</span>&gt;</div><div class="line">    	&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</div><div class="line">		&lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://10.0.0.100:3306/server_demo?characterEncoding=UTF-8"</span> /&gt;</div><div class="line">		&lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"******"</span> /&gt;</div><div class="line"></div><div class="line">		&lt;!-- 连接初始值，连接池启动时创建的连接数量的初始值 --&gt;</div><div class="line">		&lt;property name=<span class="string">"initialSize"</span> value=<span class="string">"10"</span> /&gt;</div><div class="line">		&lt;!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制 --&gt;</div><div class="line">		&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"100"</span> /&gt;</div><div class="line">		&lt;!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制--&gt;</div><div class="line">		&lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"50"</span> /&gt;</div><div class="line">		&lt;!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 --&gt;</div><div class="line">		&lt;property name=<span class="string">"minIdle"</span> value=<span class="string">"10"</span> /&gt;</div><div class="line">		&lt;!-- 是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 --&gt;</div><div class="line">		&lt;property name=<span class="string">"poolPreparedStatements"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line">		&lt;!-- 是否对sql进行自动提交 --&gt;</div><div class="line">		&lt;property name=<span class="string">"defaultAutoCommit"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=<span class="string">"sqlMapClient"</span> class=<span class="string">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"WEB-INF/SqlMapConfig.xml"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=<span class="string">"sqlMapClientTemplate"</span> class=<span class="string">"com.le.pagin.MySqlMapClientTemplate"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"sqlMapClient"</span> ref=<span class="string">"sqlMapClient"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">  	&lt;bean id=<span class="string">"transactionManager"</span></div><div class="line">		class=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span>&gt;&lt;ref <span class="built_in">local</span>=<span class="string">"dataSource"</span>/&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>SecurityAuthority.xml （sql语句配置文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> standalone=<span class="string">"no"</span>?&gt;</div><div class="line">&lt;!DOCTYPE sqlMap PUBLIC <span class="string">"-//iBATIS.com//DTD SQL Map 2.0//EN"</span></div><div class="line">                 <span class="string">"http://www.ibatis.com/dtd/sql-map-2.dtd"</span>&gt;</div><div class="line"></div><div class="line">&lt;sqlMap namespace=<span class="string">"SecurityAuthority"</span>&gt;</div><div class="line"></div><div class="line">	&lt;<span class="built_in">type</span>Alias <span class="built_in">alias</span>=<span class="string">"myUserDetails"</span> <span class="built_in">type</span>=<span class="string">"com.le.security.MyUserDetails"</span> /&gt;</div><div class="line">	&lt;<span class="built_in">type</span>Alias <span class="built_in">alias</span>=<span class="string">"myRoleResource"</span> <span class="built_in">type</span>=<span class="string">"com.le.security.MyRoleResource"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;select id=<span class="string">"querySecurityUsers"</span> parameterClass=<span class="string">"myUserDetails"</span> resultClass=<span class="string">"myUserDetails"</span>&gt;</div><div class="line">		select</div><div class="line">			u.usercode as username,</div><div class="line">			u.password as password,</div><div class="line">			r.rolecode as role</div><div class="line">		from let_bg_user u</div><div class="line">		left join let_role r on(u.roleid=r.roleid)</div><div class="line">		<span class="built_in">where</span> u.isvalid=1</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line">	&lt;select id=<span class="string">"querySecurityFuncs"</span> parameterClass=<span class="string">"myRoleResource"</span> resultClass=<span class="string">"myRoleResource"</span>&gt;</div><div class="line">		select</div><div class="line">			r.rolecode as role,</div><div class="line">			f.relatepage as url</div><div class="line">		from let_rolefunction rf</div><div class="line">		join let_function f on(f.functionid=rf.functionid)</div><div class="line">		join let_role r on(r.roleid=rf.roleid)</div><div class="line">		<span class="built_in">where</span> 1=1 and (f.relatepage is not null or f.relatepage=<span class="string">''</span>)</div><div class="line">		order by f.relatepage</div><div class="line">	&lt;/select&gt;</div><div class="line"></div><div class="line">&lt;/sqlMap&gt;</div></pre></td></tr></table></figure></p>
<h4 id="7-页面（form的提交要用post方法）"><a href="#7-页面（form的提交要用post方法）" class="headerlink" title="7. 页面（form的提交要用post方法）"></a>7. 页面（form的提交要用post方法）</h4><p>m_login.jsp （403.jsp和sessionTimeOut.jsp就是一个提示的页面，没有实际内容就不贴代码了）、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</div><div class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</div><div class="line">    &lt;title&gt;后台管理系统&lt;/title&gt;</div><div class="line">    &lt;meta name=<span class="string">"renderer"</span> content=<span class="string">"webkit|ie-comp|ie-stand"</span> /&gt;</div><div class="line">     &lt;!-- css --&gt;</div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/js/themes/default/easyui.css"</span> /&gt;</div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/js/themes/icon.css"</span> /&gt;</div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/css/ui.page.css"</span> /&gt;</div><div class="line">    &lt;!-- js --&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/js/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/js/jquery.easyui.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;!--</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/js/nav-menu.js"</span>&gt; &lt;/script&gt;</div><div class="line">     --&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body class=<span class="string">"login"</span>&gt;</div><div class="line">	&lt;div class=<span class="string">"login-box"</span>&gt;</div><div class="line">		&lt;h1 class=<span class="string">"title3"</span> title=<span class="string">""</span>&gt;&lt;img src=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/back_control/images/login-logo.png"</span>/&gt;&lt;/h1&gt;</div><div class="line">		&lt;div class=<span class="string">"forms"</span>&gt;</div><div class="line">			&lt;div class=<span class="string">"forms-lists"</span>&gt;</div><div class="line">				&lt;form action=<span class="string">"<span class="variable">$&#123;pageContext.request.contextPath&#125;</span>/BackUserlogin"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">					&lt;p class=<span class="string">"gray"</span>&gt;系统后台管理&lt;/p&gt;</div><div class="line">					&lt;p&gt;</div><div class="line">						&lt;label&gt;用户名：&lt;/label&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;</div><div class="line">					&lt;/p&gt;</div><div class="line">					&lt;p&gt;</div><div class="line">						&lt;label&gt;密　码：&lt;/label&gt;&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> /&gt;</div><div class="line">					&lt;/p&gt;</div><div class="line"></div><div class="line">					&lt;div class=<span class="string">"submit-box"</span>&gt;</div><div class="line">						&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> class=<span class="string">"submit"</span> value=<span class="string">"确　定"</span> /&gt;&lt;input <span class="built_in">type</span>=<span class="string">"reset"</span> class=<span class="string">"reset"</span> value=<span class="string">"重　置"</span> /&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">				&lt;/form&gt;</div><div class="line"></div><div class="line">			&lt;/div&gt;</div><div class="line"></div><div class="line">		&lt;/div&gt;</div><div class="line"></div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">		$(<span class="string">"input"</span>).eq(0).focus();</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><a href="https://pan.baidu.com/s/1gfx7ocj" target="_blank" rel="external">demo相关代码文件</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">document.body.onload = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var curCode = document.getElementsByClassName(<span class="string">"highlight"</span>);</div><div class="line">    <span class="keyword">for</span>(var i=0; i&lt;curCode.length; i++)&#123;</div><div class="line">        var obj = curCode[i];</div><div class="line">        obj.ondblclick = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            var objClass = this.className;</div><div class="line">            <span class="keyword">if</span>(objClass.indexOf(<span class="string">"fold"</span>)&gt;-1)&#123;</div><div class="line">                this.className=objClass.replace(<span class="string">"fold"</span>,<span class="string">""</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                this.className=objClass+<span class="string">" fold"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<script async src="/js/src/fli-customer.js"></script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring security运行流程图]]></title>
      <url>http://www.missfli.com/2016/09/28/spring-security-flowsheet/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/u011511684/article/details/31394493" target="_blank" rel="external">文章出处</a><br>最近在研究 spring security 的配置，研究了一个星期了，在官网看了下，只配置出来了简单的登录，但不知怎样从数据库读取，从网上找了几篇文章，大家的配置都是大同小异，基本上都一样的，下载我贴出我整理出来的 security 执行时的流程图，供大家参考一下，迟下我再将我的笔记整理出来给大家看看，不过我已经将我的项目上传到了网上，大家可以下载下来看看，是用 maven 构建的，无需再去找jar包了。我的 spring security 项目示例下载地址：<a href="http://download.csdn.net/detail/u011511684/7506455" target="_blank" rel="external">http://download.csdn.net/detail/u011511684/7506455</a></p>
<a id="more"></a>
<h2 id="spring-security里面的四个重要的类，都需自己去实现："><a href="#spring-security里面的四个重要的类，都需自己去实现：" class="headerlink" title="spring security里面的四个重要的类，都需自己去实现："></a>spring security里面的四个重要的类，都需自己去实现：</h2><ol>
<li>UserDetailsService  读取登录用户信息、权限</li>
<li>AbstractSecurityInterceptor 这个类是用来继承的，还要实现servler的Filter，作用过滤url</li>
<li>FilterInvocationSecurityMetadataSource  读取url资源</li>
<li>AccessDecisionManager 控制访问权限</li>
</ol>
<p><strong>说明 ：蓝色框是类，黄色框是对应的类的方法，绿色是发送url请求</strong></p>
<h2 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h2><p><img src="/images/blog/spring-security-flowsheet.png" alt="security flowsheet"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring官网下载dist.zip的几种方法]]></title>
      <url>http://www.missfli.com/2016/09/28/spring-download-jar/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/yjmyzz/p/3847364.html" target="_blank" rel="external">文章出处</a><br>Spring官网改版后，很多项目的完整zip包下载链接已经隐掉了，虽然Spring旨在引导大家用更“高大上”的maven方式来管理所依赖的jar包，但是完全没想到中国的国情，在伟大的墙内，直接通过maven下载墙外的东西，要么龟速，要么直接被和谐。<br>下面是从网上搜集的一些方法，可用于一次性下载Spring各项目的完整dist.zip</p>
<a id="more"></a>
<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>直接<br><a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.8.RELEASE/spring-framework-3.2.8.RELEASE-dist.zip" target="_blank" rel="external">http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.8.RELEASE/spring-framework-3.2.8.RELEASE-dist.zip</a><br><a href="http://repo.spring.io/libs-release-local/org/springframework/security/spring-security/3.2.3.RELEASE/spring-security-3.2.3.RELEASE-dist.zip" target="_blank" rel="external">http://repo.spring.io/libs-release-local/org/springframework/security/spring-security/3.2.3.RELEASE/spring-security-3.2.3.RELEASE-dist.zip</a><br>直接粘到地址栏或者下载工具里，每次有更新只要改版本号就可以；</p>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p><a href="http://repo.springsource.org/libs-release-local/" target="_blank" rel="external">http://repo.springsource.org/libs-release-local/</a><br>把这个粘到地址栏里，你会看到一个树型目录，然后就是一级一级往下点了；</p>
<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p>你要在官网的 projects 里找到 spring framework ，然后左侧的”小猫”图标，跳到 github ，在 Downloading artifacts 下面 找到<code>building a distribution with dependencies</code> 的超链，进去后再找 到 <code>the SpringSource repository</code> 的超链，接着打开 <code>Spring repository FAQ</code> 后，找到 libs- release-local ，进去后点 Artifacts 页签，再在左边的列表里先 simple brower ，后面的流程和第二步一样。(不过，Github 在墙内很不稳定，你懂的。。。)</p>
<h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2><p><http: repo.spring.io="" webapp="" search="" artifact="" ?0&q="spring-framework" 或=""><br><a href="http://repo.spring.io/webapp/search/artifact/?0&amp;q=spring-security" target="_blank" rel="external">http://repo.spring.io/webapp/search/artifact/?0&amp;q=spring-security</a><br>把q后的关键字换成Spring子项目的名称即可</http:></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gulp-less使用中的问题]]></title>
      <url>http://www.missfli.com/2016/09/22/gulp-less-usequetion/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>在开发的过程，使用 <code>gulp-less</code> 来编译 <code>.less</code> 文件的时候经常遇到，不小心出现代码的编写错误，gulp就会报错停止watch了。请问怎样可以就算遇到了代码编写错误也不会停止watch。</p>
<a id="more"></a>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>通过 <code>gulp-plumber</code> 插件来忽略less编译错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var gulp = require(<span class="string">'gulp'</span>);</div><div class="line">var less = require(<span class="string">'gulp-less'</span>);</div><div class="line">var LessPluginAutoPrefix = require(<span class="string">'less-plugin-autoprefix'</span>);</div><div class="line">var autoprefix = new LessPluginAutoPrefix(&#123;</div><div class="line">    browsers: [<span class="string">"last 5 versions"</span>],</div><div class="line">    cascade: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">var plumber = require(<span class="string">'gulp-plumber'</span>);</div><div class="line"></div><div class="line">gulp.src(<span class="string">'./main.less'</span>)</div><div class="line">    .pipe(plumber())</div><div class="line">    .pipe(less(&#123;</div><div class="line">        plugins: [autoprefix]</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./dest/'</span>));</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gulp的插件教程系列]]></title>
      <url>http://www.missfli.com/2016/09/22/gulp-plugins-courses/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ydcss.com" target="_blank" rel="external">文章出处</a><br>在使用gulp的前端自动化构建工具时，搜了很多教程，发现<a href="http://www.ydcss.com" target="_blank" rel="external">http://www.ydcss.com</a>的教程写的比较详细，适合新手，在此做个收藏，方便大家使用。<br><a id="more"></a></p>
<h2 id="gulp的插件教程系列"><a href="#gulp的插件教程系列" class="headerlink" title="gulp的插件教程系列"></a>gulp的插件教程系列</h2><ul>
<li><a href="http://www.ydcss.com/archives/424" target="_blank" rel="external">gulp教程之gulp中文API</a></li>
<li><a href="http://www.ydcss.com/archives/34" target="_blank" rel="external">gulp教程之gulp-less</a></li>
<li><a href="http://www.ydcss.com/archives/54" target="_blank" rel="external">gulp教程之gulp-uglify</a></li>
<li><a href="http://www.ydcss.com/archives/83" target="_blank" rel="external">gulp教程之gulp-concat</a></li>
<li><a href="http://www.ydcss.com/archives/20" target="_blank" rel="external">gulp教程之gulp-htmlmin</a></li>
<li><a href="http://www.ydcss.com/archives/26" target="_blank" rel="external">gulp教程之gulp-imagemin</a></li>
<li><a href="http://www.ydcss.com/archives/41" target="_blank" rel="external">gulp教程之gulp-minify-css【gulp-clean-css】</a></li>
<li><a href="http://www.ydcss.com/archives/49" target="_blank" rel="external">gulp教程之gulp-rev-append</a></li>
<li><a href="http://www.ydcss.com/archives/94" target="_blank" rel="external">gulp教程之gulp-autoprefixer</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gulp详细入门教程]]></title>
      <url>http://www.missfli.com/2016/09/22/gulp-getting-started-detail/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">文章出处</a><br>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。</p>
<p>gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。</p>
<p>gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。</p>
<a id="more"></a>
<p><em>本示例以 gulp-less 为例（将 less 编译成css的gulp插件）展示gulp的常规用法，只要我们学会使用一个gulp插件后，其他插件就差看看其帮助文档了。让我们一起来学习gulp吧！ ^_^</em></p>
<p><strong>gulp常用地址：</strong></p>
<ul>
<li>gulp官方网址：<a href="http://gulpjs.com" target="_blank" rel="external">http://gulpjs.com</a>和<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">http://www.gulpjs.com.cn/</a></li>
<li>gulp插件地址：<a href="http://gulpjs.com/plugins" target="_blank" rel="external">http://gulpjs.com/plugins</a></li>
<li>gulp官方API：<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">https://github.com/gulpjs/gulp/blob/master/docs/API.md</a></li>
<li>gulp中文API：<a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">http://www.gulpjs.com.cn/docs/</a></li>
</ul>
<p>在学习前，先谈谈大致使用gulp的步骤，给读者以初步的认识。首先当然是安装nodejs，通过nodejs的npm全局安装和项目安装gulp，其次在项目里安装所需要的gulp插件，然后新建gulp的配置文件gulpfile.js并写好配置信息（定义gulp任务），最后通过命令提示符运行gulp任务即可。</p>
<p><strong>安装nodejs -&gt; 全局安装gulp -&gt; 项目安装gulp以及gulp插件 -&gt; 配置gulpfile.js -&gt; 运行任务</strong></p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol>
<li>说明：gulp是基于nodejs，理所当然需要安装nodejs；</li>
<li>安装：打开<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs官网</a>，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后像安装QQ一样安装它就可以了（安装路径随意）。</li>
</ol>
<h2 id="使用命令行（如果你熟悉命令行，可以直接跳到第3步）"><a href="#使用命令行（如果你熟悉命令行，可以直接跳到第3步）" class="headerlink" title="使用命令行（如果你熟悉命令行，可以直接跳到第3步）"></a>使用命令行（如果你熟悉命令行，可以直接跳到第3步）</h2><ol>
<li>说明：什么是命令行？命令行在OSX是终端（Terminal），在windows是命令提示符（Command Prompt）；</li>
<li>注：之后操作都是在windows系统下；</li>
<li>简单介绍gulp在使用过程中常用命令，打开命令提示符执行下列命令（打开方式：window + r 输入cmd回车）：<ul>
<li><strong>node -v</strong>  查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs。PS：未能出现版本号，请尝试注销电脑重试；</li>
<li><strong>npm -v</strong>  查看npm的版本号，npm是在安装nodejs时一同安装的nodejs包管理器，那它有什么用呢？稍后解释；</li>
<li><strong>cd</strong>  定位到目录，用法：cd + 路径 ；</li>
<li><strong>dir</strong>  列出文件列表；</li>
<li><strong>cls</strong>  清空命令提示符窗口内容。<br><img src="/images/blog/gulp-install01.png" alt="gulp install"></li>
</ul>
</li>
</ol>
<h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><ol>
<li>说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</li>
<li>使用npm安装插件：命令提示符执行<strong><code>npm install &lt;name&gt; [-g] [--save-dev]</code></strong>;<ul>
<li><strong><code>&lt;name&gt;</code></strong>：node插件名称。例：<strong><code>npm install gulp-less --save-dev</code></strong></li>
<li><strong>-g</strong>：全局安装。将会安装在<code>C:\Users\Administrator\AppData\Roaming\npm</code>，并且写入系统环境变量；  非全局安装：将会安装在当前定位目录；  全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；</li>
<li><strong>–save</strong>：将保存配置信息至<code>package.json</code>（package.json是nodejs项目配置文件）；</li>
<li><strong>-dev</strong>：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；一般保存在dependencies的像这些<code>express/ejs/body-parser</code>等等。</li>
<li>为什么要保存至package.json？因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包，<code>npm install --production</code>只下载dependencies节点的包）。</li>
</ul>
</li>
<li>使用npm卸载插件：<code>npm uninstall &lt;name&gt; [-g] [--save-dev]</code>  PS：不要直接删除本地插件包<ul>
<li>删除全部插件：<code>npm uninstall gulp-less gulp-uglify gulp-concat</code> ……???太麻烦</li>
<li>借助rimraf：<code>npm install rimraf -g 用法：rimraf node_modules</code></li>
</ul>
</li>
<li>使用npm更新插件：<code>npm update &lt;name&gt; [-g] [--save-dev]</code><ul>
<li>更新全部插件：<code>npm update [--save-dev]</code></li>
</ul>
</li>
<li>查看npm帮助：<code>npm help</code></li>
<li>当前目录已安装插件：<code>npm list</code></li>
</ol>
<p><strong>PS：npm安装插件过程：从<a href="http://registry.npmjs.org" target="_blank" rel="external">http://registry.npmjs.org</a>下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），解决办法往下看↓↓↓↓↓↓。</strong></p>
<h2 id="选装cnpm"><a href="#选装cnpm" class="headerlink" title="选装cnpm"></a>选装cnpm</h2><ol>
<li>说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。来自官网：<strong>“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”</strong>；</li>
<li>官方网址：<a href="http://npm.taobao.org" target="_blank" rel="external">http://npm.taobao.org</a>；</li>
<li>安装：命令提示符执行<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code>；  注意：安装完后最好查看其版本号<code>cnpm -v</code>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；<br><em>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。</em></li>
</ol>
<h2 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h2><ol>
<li>说明：全局安装gulp目的是为了通过她执行gulp任务；</li>
<li>安装：命令提示符执行<code>cnpm install gulp -g</code>；</li>
<li>查看是否正确安装：命令提示符执行<code>gulp -v</code>，出现版本号即为正确安装。</li>
</ol>
<h2 id="新建package-json文件"><a href="#新建package-json文件" class="headerlink" title="新建package.json文件"></a>新建package.json文件</h2><ol>
<li>说明：<code>package.json</code>是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</li>
<li><p>它是这样一个json文件<strong>（注意：json文件内是不能写注释的，复制下列内容请删除注释）</strong>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"test"</span>,   //项目名称（必须）</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,   //项目版本（必须）</div><div class="line">  <span class="string">"description"</span>: <span class="string">"This is for study gulp project !"</span>,   //项目描述（必须）</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">""</span>,   //项目主页</div><div class="line">  <span class="string">"repository"</span>: &#123;    //项目资源库</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://git.oschina.net/xxxx"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: &#123;    //项目作者信息</div><div class="line">    <span class="string">"name"</span>: <span class="string">"surging"</span>,</div><div class="line">    <span class="string">"email"</span>: <span class="string">"surging2@qq.com"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,    //项目许可协议</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;    //项目依赖的插件</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span>,</div><div class="line">    <span class="string">"gulp-less"</span>: <span class="string">"^3.0.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当然我们可以手动新建这个配置文件，但是作为一名有志青年，我们应该使用更为效率的方法：命令提示符执行<code>cnpm init</code><br><img src="/images/blog/gulp-install02.png" alt="gulp install"></p>
</li>
<li>查看package.json帮助文档，命令提示符执行<code>cnpm help package.json</code><br>特别注意：package.json是一个普通json文件，所以不能添加任何注释。参看 <a href="http://www.zhihu.com/question/23004511" target="_blank" rel="external">http://www.zhihu.com/question/23004511</a></li>
</ol>
<h2 id="本地安装gulp插件"><a href="#本地安装gulp插件" class="headerlink" title="本地安装gulp插件"></a>本地安装gulp插件</h2><ol>
<li>安装：定位目录命令后提示符执行<code>cnpm install --save-dev</code>；</li>
<li>本示例以gulp-less为例（编译less文件），命令提示符执行<code>cnpm install gulp-less --save-dev</code>；<br><img src="/images/blog/gulp-install03.png" alt="gulp install"></li>
<li>将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；</li>
<li>为了能正常使用，我们还得本地安装gulp：<code>cnpm install gulp --save-dev</code>；<br>PS：细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。</li>
</ol>
<h2 id="新建gulpfile-js文件（重要）"><a href="#新建gulpfile-js文件（重要）" class="headerlink" title="新建gulpfile.js文件（重要）"></a>新建gulpfile.js文件（重要）</h2><ol>
<li>说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。</li>
<li>它大概是这样一个js文件（更多插件配置请<a href="http://www.ydcss.com/archives/tag/gulp" target="_blank" rel="external">查看这里</a>）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//导入工具包 require(<span class="string">'node_modules里对应模块'</span>)</div><div class="line">var gulp = require(<span class="string">'gulp'</span>), //本地安装gulp所用到的地方</div><div class="line">    less = require(<span class="string">'gulp-less'</span>);</div><div class="line"></div><div class="line">//定义一个<span class="built_in">test</span>Less任务（自定义任务名称）</div><div class="line">gulp.task(<span class="string">'testLess'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    gulp.src(<span class="string">'src/less/index.less'</span>) //该任务针对的文件</div><div class="line">        .pipe(less()) //该任务调用的模块</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css'</span>)); //将会在src/css下生成index.css</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'testLess'</span>, <span class="string">'elseTask'</span>]); //定义默认任务 <span class="keyword">else</span>Task为其他任务，该示例没有定义<span class="keyword">else</span>Task任务</div><div class="line"></div><div class="line">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</div><div class="line">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组)</div><div class="line">//gulp.dest(path[, options]) 处理完后文件生成路径</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="运行gulp"><a href="#运行gulp" class="headerlink" title="运行gulp"></a>运行gulp</h2><ol>
<li>说明：命令提示符执行 <code>gulp 任务名称</code>；</li>
<li>编译less：命令提示符执行 <code>gulp testLess</code>；</li>
<li>当执行 <code>gulp default</code> 或 <code>gulp</code> 将会调用default任务里的所有任务<code>[‘testLess’,’elseTask’]</code>。</li>
</ol>
<h2 id="使用webstorm运行gulp任务"><a href="#使用webstorm运行gulp任务" class="headerlink" title="使用webstorm运行gulp任务"></a>使用webstorm运行gulp任务</h2><ol>
<li>说明：使用webstorm可视化运行gulp任务；</li>
<li>使用方法：将项目导入webstorm，右键gulpfile.js 选择”Show Gulp Tasks”打开Gulp窗口，若出现”No task found”，选择右键”Reload tasks”，双击运行即可。<br><img src="/images/blog/gulp-install04.png" alt="gulp install"></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><strong>安装nodejs</strong>: <code>node -v</code> 查看版本号确认是否安装完成；</li>
<li><strong>全局安装gulp</strong>: <code>npm install gulp -g</code>，然后用 <code>gulp -v</code> 查看是否安装完成；</li>
<li><strong>新建package.json文件</strong>: <code>npm init</code>，其中 <code>name</code> , <code>version</code> , <code>description</code> 必填，其他无所谓；</li>
<li><strong>项目内安装gulp</strong>: <code>npm install gulp --save-dev</code> 或 <code>npm install --save-dev gulp</code>；</li>
<li><strong>项目内安装gulp插件</strong>: <code>npm install 插件名称 --save-dev</code>或<code>npm install --save-dev 插件名称</code>；</li>
<li><strong>新建gulpfile.js文件</strong>；</li>
<li><strong>通过命令提示符运行gulp任务</strong>: <code>gulp default</code>或<code>gulp 任务名称</code>。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过gulp 在原html文件上自动化添加js、css版本号]]></title>
      <url>http://www.missfli.com/2016/09/12/gulp-auto-add-version/</url>
      <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000006204457" target="_blank" rel="external">文章出处</a></p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>修改js和css文件<br>通过对js,css文件内容进行hash运算，生成一个文件的唯一hash字符串(如果文件修改则hash号会发生变化)<br>替换html中的js,css文件名，生成一个带版本号的文件名</p>
<a id="more"></a>
<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><p>现在网上的方案都是生成一个新的dist目录，里面包含了要发布的html,js,css等文件。但是在实际的公司的项目中，会有情况不能生成新的HTML进行发布，需要在原来的HTML文件上进行js ,css版本的替换. 这里分享下我在实际项目中通过改动插件然后在原目录结构下进行版本的控制方案。</p>
<p>原html文件代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default.css"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>预期效果：在原目录结构下html文件代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default.css?v=5a636d79c4"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app.js?v=3a0d844594"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p><strong>1. 安装gulp和gulp插件</strong><br>执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div><div class="line">npm install --save-dev gulp-rev</div><div class="line">npm install --save-dev gulp-rev-collector</div><div class="line">npm install --save-dev run-sequence</div></pre></td></tr></table></figure>
<p><strong>2. 编写gulpfile.js</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//引入gulp和gulp插件</div><div class="line">var gulp = require(<span class="string">'gulp'</span>),</div><div class="line">    runSequence = require(<span class="string">'run-sequence'</span>),</div><div class="line">    rev = require(<span class="string">'gulp-rev'</span>),</div><div class="line">    revCollector = require(<span class="string">'gulp-rev-collector'</span>);</div><div class="line"></div><div class="line">//定义css、js源文件路径</div><div class="line">var cssSrc = <span class="string">'css/*.css'</span>,</div><div class="line">    jsSrc = <span class="string">'js/*.js'</span>;</div><div class="line"></div><div class="line"></div><div class="line">//CSS生成文件<span class="built_in">hash</span>编码并生成 rev-manifest.json文件名对照映射</div><div class="line">gulp.task(<span class="string">'revCss'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(cssSrc)</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'rev/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//js生成文件<span class="built_in">hash</span>编码并生成 rev-manifest.json文件名对照映射</div><div class="line">gulp.task(<span class="string">'revJs'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> gulp.src(jsSrc)</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'rev/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//Html替换css、js文件版本</div><div class="line">gulp.task(<span class="string">'revHtml'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> gulp.src([<span class="string">'rev/**/*.json'</span>, <span class="string">'View/*.html'</span>])</div><div class="line">        .pipe(revCollector())</div><div class="line">        .pipe(gulp.dest(<span class="string">'View'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//开发构建</div><div class="line">gulp.task(<span class="string">'dev'</span>, <span class="keyword">function</span> (<span class="keyword">done</span>) &#123;</div><div class="line">    condition = <span class="literal">false</span>;</div><div class="line">    runSequence(</div><div class="line">        [<span class="string">'revCss'</span>],</div><div class="line">        [<span class="string">'revJs'</span>],</div><div class="line">        [<span class="string">'revHtml'</span>],</div><div class="line">        <span class="keyword">done</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'dev'</span>]);</div></pre></td></tr></table></figure>
<p><strong>执行gulp命令后的效果</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//rev目录下生成了manifest.json对应文件</div><div class="line">&#123;</div><div class="line">  <span class="string">"default.css"</span>: <span class="string">"default-803a7fe4ae.css"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default-803a7fe4ae.css"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app-3a0d844594.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>很显然这不是我们需要的效果</p>
<p><strong>3. 更改gulp-rev和gulp-rev-collector</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开node_modules\gulp-rev\index.js</div><div class="line">第144行 manifest[originalFile] = revisionedFile;</div><div class="line">更新为: manifest[originalFile] = originalFile + <span class="string">'?v='</span> + file.revHash;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开nodemodules\gulp-rev\nodemodules\rev-path\index.js</div><div class="line">10行 <span class="built_in">return</span> filename + <span class="string">'-'</span> + <span class="built_in">hash</span> + ext;</div><div class="line">更新为: <span class="built_in">return</span> filename + ext;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开node_modules\gulp-rev-collector\index.js</div><div class="line">31行<span class="keyword">if</span> ( !_.isString(json[key]) || path.basename(json[key]).replace(new RegExp( opts.revSuffix ), <span class="string">''</span> ) !==  path.basename(key) ) &#123;</div><div class="line">更新为: <span class="keyword">if</span> ( !_.isString(json[key]) || path.basename(json[key]).split(<span class="string">'?'</span>)[0] !== path.basename(key) ) &#123;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开node_modules\gulp-rev-collector\index.js</div><div class="line">第107行 regexp: new RegExp( <span class="string">'([\/\\\\\'</span><span class="string">"])' + pattern, 'g' ),</span></div><div class="line">更新为: regexp: new RegExp( '([\/\\\\\'"])<span class="string">' + pattern+'</span>(\\?v=\\w&#123;10&#125;)?<span class="string">', '</span>g<span class="string">' ),</span></div></pre></td></tr></table></figure>
<p><strong>最终结果</strong></p>
<p>经过上面的四步修改之后现在你不管执行多少遍gulp命令，得到的html效果都是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../css/default.css?v=5a636d79c4"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"../js/app.js?v=3a0d844594"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[域名信息查询]]></title>
      <url>http://www.missfli.com/2016/09/07/domain-search-whois/</url>
      <content type="html"><![CDATA[<p>你想知道网站域名的相关信息吗？其实很简单，跟谷哥或度娘说：whois，一大堆结果。在这里呢，就只给你推荐几个比较权威准确点的。</p>
<a id="more"></a>
<h2 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h2><p>免费用户有查询次数限制：<a href="http://whois.domaintools.com/" target="_blank" rel="external">http://whois.domaintools.com/</a></p>
<h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><ul>
<li><a href="https://x.threatbook.cn/" target="_blank" rel="external">威胁情报分析平台ThreatBook</a></li>
<li><a href="https://whois.aliyun.com/" target="_blank" rel="external">阿里云域名查询</a></li>
<li><a href="http://whois.chinaz.com/" target="_blank" rel="external">站长工具域名查询</a></li>
</ul>
<p><strong>查询结果</strong></p>
<ul>
<li>www.google.com ：208.111.59.15/19/23/27/29/30/34/38/42/44/45/49/53/57/59,93.46.8.89</li>
<li>www.microsoft.com ：118.215.11.168,182.215.11.168</li>
<li>www.apple.com/cn ：23.15.152.48,17.142.160.11,17.172.224.30,17.178.96.11</li>
<li>www.focebook.com ：31.13.79.220,179.60.192.3</li>
<li>www.twitter.com ：104.244.42.193/65</li>
<li>www.youtube.com ：74.125.200.136/190/91/93,216.58.211.46</li>
<li>www.philips.com ：118.215.81.147 </li>
<li>www.linkedin.com ：103.20.94.1</li>
<li>www.amazon.com ：54.239.25.200,54.239.29.3</li>
<li>www.baidu.com ：14.215.177.37/38,103.235.46.212</li>
<li>www.alibaba.com ：205.204.101.42,110.75.112.20,140.205.94.148</li>
<li>www.qq.com ：101.226.103.106</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ip定位查询]]></title>
      <url>http://www.missfli.com/2016/09/07/ip-location/</url>
      <content type="html"><![CDATA[<p>有时候需要访客位置信息，这时你如果拿到访客的ip，那么通过下面的ip定位的方法就能做到了。搜集了不少资料，大致罗列了网上的方法，希望对你有用。国内国外大致就这些：淘宝，腾讯，新浪，百度，IP2Location,DB-IP,纯真IP数据库，MaxMind GeoLite2，当然还有其他的。</p>
<a id="more"></a>
<h2 id="调用三方的接口"><a href="#调用三方的接口" class="headerlink" title="调用三方的接口"></a>调用三方的接口</h2><p>推荐新浪接口，我用了一些常用和非常用ip（根据国内外大网站的域名查询出来的ip,文章末尾会将ip列举出来）做了个大致的查询比较。</p>
<ul>
<li>新浪接口：<code>http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;ip=54.239.25.200</code></li>
<li>淘宝接口：<code>http://ip.taobao.com/service/getIpInfo.php?ip=123.123.123.123</code></li>
<li>IP查询：<code>http://www.ipip.net/ip.html</code></li>
</ul>
<h2 id="调用自己本地数据库"><a href="#调用自己本地数据库" class="headerlink" title="调用自己本地数据库"></a>调用自己本地数据库</h2><p>这种方法就要你去网上下载相应的纯真IP数据库了。</p>
<ul>
<li><a href="http://www.ipip.net/" target="_blank" rel="external">http://www.ipip.net/</a></li>
<li><a href="http://lite.ip2location.com/" target="_blank" rel="external">http://lite.ip2location.com/</a></li>
<li><a href="https://www.maxmind.com/zh/geoip2-services-and-databases" target="_blank" rel="external">https://www.maxmind.com/zh/geoip2-services-and-databases</a></li>
</ul>
<h2 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h2><ul>
<li><a href="https://www.ipip.net/" target="_blank" rel="external">https://www.ipip.net/</a>免费版有1000次/天限制</li>
<li><a href="http://www.haoweichi.com/Index/iplocate" target="_blank" rel="external">http://www.haoweichi.com/Index/iplocate</a></li>
<li><a href="http://www.ip138.com/ips1388.asp" target="_blank" rel="external">http://www.ip138.com/ips1388.asp</a></li>
<li><a href="http://ip.lockview.cn/default.aspx" target="_blank" rel="external">http://ip.lockview.cn/default.aspx</a></li>
<li><a href="http://www.123cha.com/" target="_blank" rel="external">http://www.123cha.com/</a></li>
</ul>
<p><strong>IP列表</strong></p>
<ul>
<li>这几个比较偏：31.13.79.220，103.235.46.212，31.13.79.220，23.15.152.48，182.215.11.168，208.111.59.15</li>
<li>www.google.com ：208.111.59.15/19/23/27/29/30/34/38/42/44/45/49/53/57/59,93.46.8.89</li>
<li>www.microsoft.com ：118.215.11.168,182.215.11.168</li>
<li>www.apple.com/cn ：23.15.152.48,17.142.160.11,17.172.224.30,17.178.96.11</li>
<li>www.focebook.com ：31.13.79.220,179.60.192.3</li>
<li>www.twitter.com ：104.244.42.193/65</li>
<li>www.youtube.com ：74.125.200.136/190/91/93,216.58.211.46</li>
<li>www.philips.com ：118.215.81.147 </li>
<li>www.linkedin.com ：103.20.94.1</li>
<li>www.amazon.com ：54.239.25.200,54.239.29.3</li>
<li>www.baidu.com ：14.215.177.37/38,103.235.46.212</li>
<li>www.alibaba.com ：205.204.101.42,110.75.112.20,140.205.94.148</li>
<li>www.qq.com ：101.226.103.106</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jekyll和github pages搭建个人博客]]></title>
      <url>http://www.missfli.com/2016/09/04/jekyll-github-buildblog/</url>
      <content type="html"><![CDATA[<p>用过一些博客网站写博客，总会感觉要么这里差强人意，要么那里有些不舒服，然后搜集网上资料找博客平台，最后呢，发现还是得自己搭建。然后就发现了jekyll和github结合起来搭建博客不错，比较满意。虽然最后因为主题没自己喜欢的，编译没hexo快等等原因，而选择了重新用hexo和next。这里呢，不会讲详细的搭建细节，只是讲一下我的搭建历程。</p>
<a id="more"></a>
<p>发现了jekyll + github pages能搭建个人博客网站，虽然只能是静态页面，不过倒是蛮符合自己的需求的，然后就走上了这条坑爹的道路。反正这路上我是碰到不少坑。</p>
<p><strong>域名注册解析</strong></p>
<p>首先，我想博客网站有自己的域名，无意中发现阿里出了个<code>.xin</code>域名，然后兴冲冲的去阿里云官网去注册申请一个跟自己名字相关的域名，结果别人家注册了，最后想了个域名<code>www.nifei.xin</code>，中间部分更本人姓名谐音，然后连起来呢，寓意“你费点心”。付款后，才发现，坑啊，这种域名相对于其他类型的域名来说比较贵，并且国内域名（大陆）都要备案啊（方便政府监管呗），还有点小小不爽就是你只有域名的使用权，没有拥有权，有种租用的感觉。<br>哎，反正都付钱了，不管了。去github随便新建了个测试项目，开始着手域名解析过来，试试新域名的感觉。其实github针对每个账户是可以拥有一个专有的域名的（<code>username.github.io</code>）,你要是不介意这个域名了，也可以不去注册域名，也就不用解析域名了。跑到阿里云的域名管理区域，解析域名，发现一堆限制。看了一下他的具体解析规则，总结下来，就是<code>www.nifei.xin</code>的域名要解析，必须备案。然后查了一下发现备案短则两周，长则三周一个月。我那个去，火了，重新注册域名吧。<br>其实，也是之前看见<code>.xin</code>觉得新鲜，冲动了，没怎么搜相关资料进行详细了解和比较。这次做了各种比较后，去国外的网站<a href="https://hk.godaddy.com" target="_blank" rel="external">GoDaddy</a>注册了个新域名<code>www.missfli.com</code>。然后解析了，听说用域名服务商自己来解析比较慢，用国内的<a href="https://www.dnspod.cn/d]" target="_blank" rel="external">DNSpod</a>来解析比较快。也就是在这里解析，我才发现，其实之前的那个域名<code>www.nifei.xin</code>是可以解析的。只是之前的解析方式不对，所以没生效。</p>
<p><strong>jekyll安装</strong></p>
<p>接下来，就要开始搭建博客项目了。<a href="http://jekyll.bootcss.com/" target="_blank" rel="external">jekyll官网</a>有详细的安装步骤，当然，你也会发现他不推荐在windows上安装。所以，在windows可能会遇到各种坑，我就是那个倒霉的孩子，碰到了各种坑。<br>    比如：</p>
<ul>
<li>坑一：很多网上的安装教程（如<a href="http://pwnny.cn/original/2016/06/26/MakeBlog.html" target="_blank" rel="external">Jekyll和Github搭建个人静态博客</a>）在jekyll安装之前的步骤基本都一样的，就是<a href="http://railsinstaller.org/en" target="_blank" rel="external">ruby</a>的安装(用 RailsInstaller 来安装 Ruby 环境)。我就是按照这个步骤安装的，安装完后，用查看版本的命令<code>ruby -v</code>,<code>gem -v</code>都能看到对应的版本，也就是说ruby是安装成功滴。可是，等安装好后jekyll(用<code>jekyll -v</code>查看版本)用本地调试命令<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，总是不能正常访问。后来才发现，jekyll创建的默认项目对代码高亮支持是需要Pygments这个玩意的，所以最后，找到了<a href="http://www.madhur.co.in/blog/2011/09/01/runningjekyllwindows.html" target="_blank" rel="external">Running Jekyll on Windows</a>，才真正跑起来测试项目。</li>
<li>坑二：特别是安装jekyll和相关插件时，由于要翻墙，所以有时候不一定会安装成功。如果你不仔细还以为安装成功了，结果跑不起来。解决方法：多安装几次直到安装成功。</li>
<li>坑三：jekyll创建的默认项目。默认模板主题minima，要是你没有安装，也是跑不起来的。</li>
<li>坑四：安装好后，启动项目本地调试，总是报错，这个错跟“bundler”相关，这时，你需要用命令<code>gem install bundle</code>安装bundler。</li>
</ul>
<p>环境搭建好了，就是博客项目开工的时候了。其实呢，有三种方式：</p>
<ol>
<li>完全自己定制博客</li>
<li>找一份框架，修改后使用，比如<a href="http://jekyllbootstrap.com/" target="_blank" rel="external">http://jekyllbootstrap.com/</a></li>
<li>从GitHub上fork别人的博客代码，在其中添加自己的文章，自己Google一下 github.io 博客<br>能找到不少博客,去fork,然后修改一下就好。 最近有一个 jekyll-now，在 GitHub 上已经获取了 1000+ 的fork，可以关注一下<a href="https://github.com/barryclark/jekyll-now" target="_blank" rel="external">https://github.com/barryclark/jekyll-now</a></li>
</ol>
<p>我是选的第一种。为什么呢？第二种，我把他的里面的所有主题都试了一下，感觉不太满意。第三种呢，也看过没找到满意的。还专门去<a href="http://jekyllthemes.org/" target="_blank" rel="external">jekyll主题</a>全部看了一遍，还是没有满意的。还有一点，就是这些博客没有针对中文字体做排版，切换成中文后看起来就没那么舒服了。选了第一种后，又给自己挖坑了。字体选择，logo设计，页面布局排版，网页适配，博客分类等等，这些还好，可以慢慢来优化。<br>关键还是其他需要引入的插件：</p>
<ul>
<li>评论插件（<a href="http://www.tuicool.com/articles/YZfem2" target="_blank" rel="external">jekyll配置有言评论插件</a>）</li>
<li>分页功能（<a href="http://www.52ij.com/jishu/99014.html" target="_blank" rel="external">分页功能_jekyll 中使用分页功能</a>,但是好像jekyll的分页插件只能是博客首页，其他分类标签等等页面要使用分页的话，得自己另外写）</li>
<li>文章目录树（<a href="http://www.111cn.net/sys/linux/70052.htm" target="_blank" rel="external">Jekyll 生成文章目录树配置</a>）</li>
<li>文章分类索引（<a href="http://www.tuicool.com/articles/INBnMz" target="_blank" rel="external">使用Jekyll在Github上搭建个人博客（文章分类索引）</a>）</li>
<li>代码高亮（<a href="http://www.2cto.com/kf/201602/489968.html" target="_blank" rel="external">Jekyll 代码高亮的几种选择</a>，<a href="https://highlightjs.org/download" target="_blank" rel="external">highlightjs</a>，<a href="https://highlightjs.org/static/demo" target="_blank" rel="external">代码高亮的各种样式</a>）</li>
</ul>
<p>当把相关需要的资料准备好，搞到一半就发现了next主题，眼前一亮，就是我想要的那种。但是他不是jekyll的，是hexo的。然后就去搞hexo+next了，还不错，很快就出来雏形了，瞬间就抛弃了jekyll。但是说不准以后还会去折腾jekyll，所以写了这篇文章。之前的jekyll的雏形项目地址：<a href="https://github.com/woaiwojia321314/jekyllblog" target="_blank" rel="external">https://github.com/woaiwojia321314/jekyllblog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo免输入密码部署到github]]></title>
      <url>http://www.missfli.com/2016/09/03/hexo-deploy-no-psw/</url>
      <content type="html"><![CDATA[<p>hexo部署到github时，会要求你输入用户名密码，每次提交都要输入，肯定让你抓狂吧，下面的2步配置就能把你从痛苦中解救出来。</p>
<a id="more"></a>
<h6 id="在系统变量中添加一个环境变量："><a href="#在系统变量中添加一个环境变量：" class="headerlink" title="在系统变量中添加一个环境变量："></a>在系统变量中添加一个环境变量：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">变量名：HOME</div><div class="line">变量值：%USERPROFILE%</div></pre></td></tr></table></figure>
<p>见图：<br><img src="/images/blog/hexo-deploy-no-psw-01.jpg" alt="img"></p>
<h6 id="接着在你的用户目录（C-Users-username）下新建一个叫-netrc的文件编辑这个文件"><a href="#接着在你的用户目录（C-Users-username）下新建一个叫-netrc的文件编辑这个文件" class="headerlink" title="接着在你的用户目录（C:\Users\username）下新建一个叫 _netrc的文件编辑这个文件"></a>接着在你的用户目录（C:\Users\username）下新建一个叫 _netrc的文件编辑这个文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine github.com</div><div class="line">login username</div><div class="line">password password</div></pre></td></tr></table></figure>
<p>设置好这些后，当你再次部署时，就不用输入用户名和密码了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo问题--hexo部署到github]]></title>
      <url>http://www.missfli.com/2016/09/03/faq-hexo-deploy-q1/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>hexo部署到github时，报错：fatal: unable to auto-detect email address</p>
<a id="more"></a>
<p>异常信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">D:\workspace\fliblog&gt;hexo deploy</div><div class="line">INFO  Deploying: git</div><div class="line">INFO  Clearing .deploy_git folder...</div><div class="line">INFO  Copying files from public folder...</div><div class="line"></div><div class="line">*** Please tell me who you are.</div><div class="line"></div><div class="line">Run</div><div class="line"></div><div class="line">  git config --global user.email <span class="string">"you@example.com"</span></div><div class="line">  git config --global user.name <span class="string">"Your Name"</span></div><div class="line"></div><div class="line">to <span class="built_in">set</span> your account<span class="string">'s default identity.</span></div><div class="line">Omit --global to set the identity only in this repository.</div><div class="line"></div><div class="line">fatal: unable to auto-detect email address (got 'feili@feili-PC.(none)<span class="string">')</span></div><div class="line">Branch master set up to track remote branch master from https://github.com/woaiw</div><div class="line">ojia321314/woaiwojia321314.github.io.git.</div><div class="line">Everything up-to-date</div><div class="line">INFO  Deploy done: git</div></pre></td></tr></table></figure></p>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>找到工程目录的.git文件夹（比如我的项目是fliblog,路径就是…./fliblog/.deploy_git.git），打开之后找到config文件，在最后边加上一句话</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    email = your email</div><div class="line">    name = your name</div></pre></td></tr></table></figure>
<p>your email 和your name随便写上就行</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown常用语法(hexo)]]></title>
      <url>http://www.missfli.com/2016/09/01/markdown-test/</url>
      <content type="html"><![CDATA[<p>文章内容概要或引文</p>
<a id="more"></a>
<h2 id="h2标题二"><a href="#h2标题二" class="headerlink" title="h2标题二"></a>h2标题二</h2><h3 id="h3标题三"><a href="#h3标题三" class="headerlink" title="h3标题三"></a>h3标题三</h3><h4 id="h4标题四"><a href="#h4标题四" class="headerlink" title="h4标题四"></a>h4标题四</h4><h5 id="h5标题五"><a href="#h5标题五" class="headerlink" title="h5标题五"></a>h5标题五</h5><h6 id="h6标题六"><a href="#h6标题六" class="headerlink" title="h6标题六"></a>h6标题六</h6><p><strong>加粗</strong><br><em>斜体</em></p>
<p><code>行内代码</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span>代码块--行1</div><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo中文网</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题</a></p>
<p>引入代码双击展开收起js：</p>
<script async src="/js/src/fli-customer.js">

<p><img src="/images/blog/test.png" alt="img name"></p>
<blockquote class="blockquote-center"><p>居中文本text center </p>
</blockquote>
<img src="/images/blog/test.png" class="full-image" alt="alt" title="图片放大26%" />
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
<li>有序列表4</li>
</ol>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ol>
<li>有序列表嵌套无序列表</li>
<li>有序列表嵌套无序列表<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
</ul>
</li>
<li>有序列表嵌套无序列表</li>
<li>有序列表嵌套无序列表</li>
</ol>
</script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java获取客户端真实IP（转载）]]></title>
      <url>http://www.missfli.com/2016/08/31/fetch-customer-id-java/</url>
      <content type="html"><![CDATA[<p>转载自<a href="http://www.cnblogs.com/ITtangtang/p/3927768.html" target="_blank" rel="external"><strong>Java获取客户端IP</strong></a><br>有时候希望记录用户登录ip，用于获取他的登录地址。网上搜了很多资料，发现常用的1种方式比较全面而实用的方式：request获取。<br><a id="more"></a></p>
<h2 id="request获取方式"><a href="#request获取方式" class="headerlink" title="request获取方式"></a>request获取方式</h2><p>在开发工作中,我们常常需要获取客户端的IP。一般获取客户端的IP地址的方法是: <strong>request.getRemoteAddr()</strong> ;但是在通过了Apache,Squid等反向代理软件就不能获取到客户端的真实IP地址了。</p>
<p>原因:</p>
<p>由于在客户端和服务之间增加了中间代理,因此服务器无法直接拿到客户端的IP,服务器端应用也无法直接通过转发请求的地址返回给客户端。</p>
<p><strong>现在图示代理上网和IP的关系：</strong></p>
<p><em>第一种情况：不通过代理上网,服务器端拿到真实IP</em></p>
<p><img src="/images/blog/fetch-customer-id-java-01.png" alt="img"></p>
<p><em>第二种情况：通过代理服务器如:Nginx,Squid等一层代理或多层代理上网，如下图:</em></p>
<p><img src="/images/blog/fetch-customer-id-java-02.png" alt="img"></p>
<p>需要注意的是X-Forwarded-For和X-Real-IP都不是http的正式协议头，而是squid等反向代理软件最早引入的，之所以resin能拿到，是因为NGINX里一般缺省都会这么配置转发的http请求：</p>
<ul>
<li><p><strong>proxy_pass       <a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a>;</strong></p>
</li>
<li><p><strong>proxy_set_header   Host             $host;</strong></p>
</li>
<li><p><strong>proxy_set_header   X-Real-IP        $remote_addr;</strong></p>
</li>
<li><p><strong>proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</strong></p>
<p>从X-Forwarded-For的定义来看，ips[0]才是原始客户端ip，如果这个都不是，那拿第二个就更不靠谱了，我们平时检验的时候，可能是直接在内网挂代理去访问的，跟外面网友访问经过的网络路径不一样，后面不停添加的是经过的每一层代理ip才对,下面举例说明;</p>
</li>
<li><p><strong>request.getRemoteAddr() 192.168.239.196</strong></p>
</li>
<li><p><strong>request.getHeader(“X-Forwarded-For”) 58.63.227.162, 192.168.237.178, 192.168.238.218</strong></p>
</li>
<li><p><strong>request.getHeader(“X-Real-IP”) 192.168.238.218</strong></p>
</li>
</ul>
<p>所以访问的流程应该是这样，客户端58.63.227.162发出请求，经过192.168.237.178, 192.168.238.218两层转发，到了192.168.239.196这台NGINX上，NGINX就把X-Real-IP头设成了自己看到的remote_addr，也就是直接发给到他的192.168.238.218，这时候resin收到这个包，对resin来说直接发给他的remote_addr就是NGINX的ip，也就是192.168.239.196，那么resin里面的request.getRemoteAddr()就是192.168.239.196，那么在resin里拿最原始的ip逻辑（也就是拿能够知道的最外层的ip）应该是这样：</p>
<ol>
<li><p><strong>如果XFF不为空，拿XFF的左边第一个</strong></p>
</li>
<li><p><strong>如果XFF为空，拿XRI</strong></p>
</li>
<li><p><strong>如果XRI为空，只能拿request.getRemoteAddr()，也就是只能拿到最直接发给他的机器ip了，</strong></p>
</li>
</ol>
<p>其他都不可考究,参考代码如下(已经封装成一个工具类)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package com.le.util;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">public class IPFetch &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * fetch customer real ip</div><div class="line">	 * @param request</div><div class="line">	 * @<span class="built_in">return</span> string</div><div class="line">	 */</div><div class="line">	public static String getRealIp(HttpServletRequest request) &#123;</div><div class="line"></div><div class="line">        String ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip))&#123;</div><div class="line">            //多次反向代理后会有多个ip值，第一个ip才是真实ip</div><div class="line">            int index = ip.indexOf(<span class="string">","</span>);</div><div class="line">            <span class="keyword">if</span>(index != -1)&#123;</div><div class="line">                <span class="built_in">return</span> ip.substring(0,index);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">return</span> ip;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</div><div class="line">        <span class="keyword">if</span>(isNotEmpty(ip) &amp;&amp; !<span class="string">"unKnown"</span>.equalsIgnoreCase(ip))&#123;</div><div class="line">            <span class="built_in">return</span> ip;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> request.getRemoteAddr();</div><div class="line">    &#125;//method</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * Check whether string is empty</div><div class="line">	 * @param str String</div><div class="line">	 * @<span class="built_in">return</span> boolean</div><div class="line">	 */</div><div class="line">	public static boolean isNotEmpty(String str) &#123;</div><div class="line">		<span class="built_in">return</span> !(str == null || str.length() == 0);</div><div class="line">	&#125;//method</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js获取客户端真实IP]]></title>
      <url>http://www.missfli.com/2016/08/31/fetch-customer-id-js/</url>
      <content type="html"><![CDATA[<p>java获取客户端程序本身还有对应的对象来实现。而js却不行。搜罗了一些资料，发现比较全而好的前端获取客户端IP的方法基本都是通过三方接口。也就是调用别人写好的接口。用浏览器已有的控件ActiveXObject的控件方式，有一定的兼容性问题。<br><a id="more"></a></p>
<h2 id="方法一：（所有的平台及浏览器）"><a href="#方法一：（所有的平台及浏览器）" class="headerlink" title="方法一：（所有的平台及浏览器）"></a>方法一：（所有的平台及浏览器）</h2><p>使用搜狐接口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script src=<span class="string">"http://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.write(<span class="built_in">return</span>CitySN[<span class="string">"cip"</span>]+<span class="string">','</span>+<span class="built_in">return</span>CitySN[<span class="string">"cname"</span>])</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="方法二：（所有的平台及浏览器）"><a href="#方法二：（所有的平台及浏览器）" class="headerlink" title="方法二：（所有的平台及浏览器）"></a>方法二：（所有的平台及浏览器）</h2><p>使用新浪接口：(我测试过，此方法好像不行。访问网站也不能访问了。)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://counter.sina.com.cn/ip/"</span> charset=<span class="string">"gb2312"</span>&gt;&lt;/script&gt;       &lt;!--获取接口数据，注意charset --&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.writeln(<span class="string">"IP地址："</span>+ILData[0]+<span class="string">"&lt;br /&gt;"</span>);             //输出接口数据中的IP地址</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[1]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的类型</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[2]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的省市</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[3]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的</div><div class="line">document.writeln(<span class="string">"地址类型："</span>+ILData[4]+<span class="string">"&lt;br /&gt;"</span>);         //输出接口数据中的IP地址的运营商</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>个人Robert Hashemian写的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script language=<span class="string">"JavaScript"</span> src=<span class="string">"http://www.hashemian.com/js/visitorIP.js.php"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</div><div class="line">    VIH_BackColor = <span class="string">"palegreen"</span>;</div><div class="line">    VIH_ForeColor = <span class="string">"navy"</span>;</div><div class="line">    VIH_FontPix = <span class="string">"16"</span>;</div><div class="line">    VIH_DisplayFormat = <span class="string">"You are visiting from:&lt;br&gt;IP Address: %%IP%%&lt;br&gt;Host: %%HOST%%"</span>;</div><div class="line">    VIH_DisplayOnPage = <span class="string">"yes"</span>;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。"><a href="#方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。" class="headerlink" title="方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。"></a>方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。</h2><p>利用ActiveXObject控件，ie浏览器里要开启此控件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">GetLocalIPAddr</span></span>()&#123; var oSetting = null; var ip = null; try&#123; oSetting = new ActiveXObject(<span class="string">"rcbdyctl.Setting"</span>); ip = oSetting.GetIPAddress; <span class="keyword">if</span> (ip.length == 0)&#123; <span class="built_in">return</span> <span class="string">"没有连接到Internet"</span>; &#125; oSetting = null; &#125;catch(e)&#123; <span class="built_in">return</span> ip; &#125; <span class="built_in">return</span> ip; &#125; document.write(GetLocalIPAddr()+<span class="string">"&lt;br/&gt;"</span>)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.jb51.net/article/52484.htm" target="_blank" rel="external">JS获取客户端IP地址、MAC和主机名的7个方法汇总</a></li>
<li><a href="http://www.jb51.net/article/43586.htm" target="_blank" rel="external">js获取客户端外网ip的简单实例</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssm(struts2+spring3+mybatis3)问题集Q2]]></title>
      <url>http://www.missfli.com/2016/08/29/faq-ssm-q2/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>java.lang.NoClassDefFoundError: org/objectweb/asm/ClassVisitor<br><a id="more"></a></p>
<p>异常信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">SEVERE: Exception starting filter struts2</div><div class="line">java.lang.NoClassDefFoundError: org/objectweb/asm/ClassVisitor</div><div class="line">    at org.apache.struts2.convention.PackageBasedActionConfigBuilder.findActions(PackageBasedActionConfigBuilder.java:390)</div><div class="line">    at org.apache.struts2.convention.PackageBasedActionConfigBuilder.buildActionConfigs(PackageBasedActionConfigBuilder.java:347)</div><div class="line">    at org.apache.struts2.convention.ClasspathPackageProvider.loadPackages(ClasspathPackageProvider.java:53)</div><div class="line">    at com.opensymphony.xwork2.config.impl.DefaultConfiguration.reloadContainer(DefaultConfiguration.java:260)</div><div class="line">    at com.opensymphony.xwork2.config.ConfigurationManager.getConfiguration(ConfigurationManager.java:67)</div><div class="line">    at org.apache.struts2.dispatcher.Dispatcher.init_PreloadConfiguration(Dispatcher.java:429)</div><div class="line">    at org.apache.struts2.dispatcher.Dispatcher.init(Dispatcher.java:473)</div><div class="line">    at org.apache.struts2.dispatcher.ng.InitOperations.initDispatcher(InitOperations.java:74)</div><div class="line">    at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.init(StrutsPrepareAndExecuteFilter.java:51)</div><div class="line">    at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:281)</div><div class="line">    at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:262)</div><div class="line">    at org.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFilterConfig.java:107)</div><div class="line">    at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4775)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5452)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">    at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1559)</div><div class="line">    at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1549)</div><div class="line">    at java.util.concurrent.FutureTask<span class="variable">$Sync</span>.innerRun(Unknown Source)</div><div class="line">    at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(Unknown Source)</div><div class="line">    at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: java.lang.ClassNotFoundException: org.objectweb.asm.ClassVisitor</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1714)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1559)</div><div class="line">    ... 22 more</div></pre></td></tr></table></figure></p>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>添加以下struts的jar包：</p>
<ul>
<li>asm-commons-3.3.jar</li>
<li>asm-3.3.jar</li>
<li>asm-tree-3.3.jar</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssm(struts2+spring3+mybatis3)问题集Q1]]></title>
      <url>http://www.missfli.com/2016/08/29/faq-ssm-q1/</url>
      <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><p>不允许有匹配 “[xX][mM][lL]” 的处理指令目标。<br><a id="more"></a></p>
<p>异常信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">aused by: 不允许有匹配 <span class="string">"[xX][mM][lL]"</span> 的处理指令目标。 - file:/D:/apache-tomcat-7.0.70/webapps/security/WEB-INF/classes/struts.xml:1:7</div><div class="line">	at com.opensymphony.xwork2.util.DomHelper.parse(DomHelper.java:119)</div><div class="line">	at com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.loadConfigurationFiles(XmlConfigurationProvider.java:1021)</div><div class="line">	... 23 more</div><div class="line">Caused by: org.xml.sax.SAXParseException; systemId: file:/D:/apache-tomcat-7.0.70/webapps/security/WEB-INF/classes/struts.xml; lineNumber: 1; columnNumber: 7; 不允许有匹配 <span class="string">"[xX][mM][lL]"</span> 的处理指令目标。</div><div class="line">	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:198)</div><div class="line">	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1388)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLScanner.scanPIData(XMLScanner.java:675)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanPIData(XMLDocumentFragmentScannerImpl.java:980)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLScanner.scanPI(XMLScanner.java:643)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl<span class="variable">$PrologDriver</span>.next(XMLDocumentScannerImpl.java:913)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:607)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116)</div><div class="line">	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:489)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:835)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123)</div><div class="line">	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1210)</div><div class="line">	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl<span class="variable">$JAXPSAXParser</span>.parse(SAXParserImpl.java:568)</div><div class="line">	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.parse(SAXParserImpl.java:302)</div><div class="line">	at com.opensymphony.xwork2.util.DomHelper.parse(DomHelper.java:117)</div><div class="line">	... 24 more</div><div class="line">八月 29, 2016 10:20:43 上午 com.sun.faces.config.ConfigureListener contextInitialized</div></pre></td></tr></table></figure></p>
<h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>看看struts.xml配置文件的声明 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code> 前面是否有空格啥的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何把myeclipse中安装的SVN中文插件转变为英文版]]></title>
      <url>http://www.missfli.com/2014/11/14/myeclipse-svn-change-en/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_ec2031db0102v6tl.html" target="_blank" rel="external">原地址</a><br>在Eclipse的configuration文件下找到config.ini文件，用写字板打开，在最后面添加上如下代码即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Set Subversion English Version</span></div><div class="line">osgi.nl=en_US</div></pre></td></tr></table></figure></p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[oracle数据库安装卸载]]></title>
      <url>http://www.missfli.com/2014/07/11/oracle-install-and-uninstall/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_ec2031db0102uwyw.html" target="_blank" rel="external">原地址</a><br>oracle的安装和卸载相对于mysqll而言要麻烦些，故记录在此。方便以后查阅。<br><a id="more"></a></p>
<h2 id="Oracle-9i安装"><a href="#Oracle-9i安装" class="headerlink" title="Oracle 9i安装"></a>Oracle 9i安装</h2><ol>
<li>安装文件目录必须放置于非汉字目录下；</li>
<li>检查磁盘空间；</li>
<li>注意安装文件路径，一般不要放在C盘;</li>
<li>服务器安装时一般选择标准版或者企业版;</li>
<li>数据库的端口：1521</li>
</ol>
<p><strong>Oracle数据库创建：</strong></p>
<ol>
<li>configuration and migration tools –&gt; database configuration assistant –&gt; 创建数据库 –&gt; New Database  –&gt; 数据库名（英文）</li>
<li>enterprise manager console –&gt; 选择数据库，以系统管理员SYSDBA连接身份登录</li>
<li>创建表空间：存储 –&gt; 表空间 –&gt; 名称：比如vcall，数据文件：vcall_1、vcall_2、vcall_3，类型：永久</li>
<li>创建用户：安全性 –&gt; 用户 –&gt; 用户名，密码，表空间 –&gt; 角色：CONNECT,DBA</li>
</ol>
<h2 id="oracle-11g-2R安装"><a href="#oracle-11g-2R安装" class="headerlink" title="oracle 11g-2R安装"></a>oracle 11g-2R安装</h2><ol>
<li>安装程序目录和安装目录都不能含中文，安装目录还不能含有下划线。</li>
<li>密码是：首写字母大写，数字字母混合，不少于8位。</li>
<li>11g默认账户密码不存在过期问题，如果是新建账户，则只有180天的有效期，需要修改。<br><code>select * from dba_profiles where profile=&#39;DEFAULT&#39; and RESOURCE_NAME like &#39;PASSWORD%&#39;</code><br>以上语句可以查看相关信息。<br>如果想设置密码不过期，可用管理员登陆，然后执行：<br><code>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</code></li>
</ol>
<h2 id="oracle数据库卸载"><a href="#oracle数据库卸载" class="headerlink" title="oracle数据库卸载"></a>oracle数据库卸载</h2><ol>
<li><strong>关服务</strong><br>关闭oracle服务：services.msc</li>
<li><strong>卸产品</strong><br>用oracle自带的卸载项，卸载相关产品。</li>
<li><strong>删目录</strong><br>找到安装位置，删除oracle安装目录。</li>
<li><strong>删注册表</strong><br>打开注册表：regedit ,然后删除以下目录：<ul>
<li>注册oracle安装信息：<code>HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE</code></li>
<li>注册oracle服务：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\下oracle开头的服务名</code></li>
<li>写oracle事件日志：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\</code>下oracle开头的目录</li>
</ul>
</li>
<li><strong>删变量</strong><br>删除环境变量path中和oracle相关的内容（非必须的，不删也可以）。我的电脑–&gt;属性–&gt;高级–&gt;环境变量–&gt;PATH变量</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux设置中文输入法]]></title>
      <url>http://www.missfli.com/2014/07/11/linux-setting-chinese-input-method/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_ec2031db0102uwys.html" target="_blank" rel="external">原地址</a><br>有时候在linux环境下也是需要中文输入的。centos6自带有ibus输入法。<br><a id="more"></a></p>
<p><strong>ibus未安装时</strong></p>
<p><em>centos 6.2用yum安装ibus中文输入法:</em></p>
<ol>
<li>su root</li>
<li>yum install “@Chinese Support”</li>
<li>exit</li>
<li>回到桌面，system-&gt;preferences-&gt;input method</li>
<li>如果没有，先注销一下。</li>
<li>按照提示添加输入法。</li>
<li>最后 再次注销，登录即可。</li>
</ol>
<p><strong>ibus安装后：</strong></p>
<p>system–&gt;preferences–&gt;input method,调出中文拼音即可。</p>
]]></content>
    </entry>
    
  
  
</search>
