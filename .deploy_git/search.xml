<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue 使用预编译器 sass]]></title>
    <url>%2F2018%2F06%2F04%2Fvue-sass.html</url>
    <content type="text"><![CDATA[在基于 webpack 项目模板创建的项目（vue init webpack my-project）中使用 sass。在 webpack 中，所有的预处理器需要匹配对应的 loader。vue-loader 允许你使用其它 webpack loader 处理 Vue 组件的某一部分。它会根据 lang 属性自动推断出要使用的 loader。 sass 相关依赖包安装相关依赖包安装： 1npm install sass-loader node-sass --save-dev 使用sass 和 scss 语法不一样的，可以参考此文档。 下面列举 scss 版本的，对应的 sass 版本只需要将lang=&quot;scss&quot;改成lang=&quot;sass&quot;即可。 页面内样式： 1234567891011121314&lt;style lang="scss" scoped&gt; .sign &#123; height: 100%; min-height: 750px; text-align: center; font-size: 14px; background-color: #f1f1f1; .tag &#123; display: inline-block; height: 85%; vertical-align: middle; &#125; &#125;&lt;/style&gt; 引入样式文件： 123456&lt;style lang="scss" &gt; @import './assets/css/base.scss'; .demo &#123; &#125;&lt;/style&gt; 下面提供官方文档供参考和深入的配置： 官方一：简单使用 官方二：深入的配置 ps： 基于第二个文档，我配置过sass-loader 警告部分，总是报错。不配置这部分也能使用，后续解决了相关问题，再更新此文。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webstorm+gitlab 项目开发流程]]></title>
    <url>%2F2018%2F06%2F04%2Fwebstorm-gitlab.html</url>
    <content type="text"><![CDATA[以前都是作为一个 三方开发者 clone 别人的项目下来修改，现在需要自己作为项目的初始创建者发项目，碰到了不少坑。 gitlab 创建项目和分支创建项目登录账号，找到自己的项目分组，new project 。（找管理员或领导给你分配对应的创建项目权限） 创建分支这里跟 github 有点不太一样，github 创建一个项目后，有个默认的 master 分支。而 gitlab 没有，你注意上图中左边的目录，没有Files，也就是说看不到项目目录。当然，gitlab 提供了创建详细的步骤和命令。 ps：按照它给的步骤和命令一步一步执行完即可，此步骤不需要提交代码那部分，故而截图都没截。中间别漏掉一些命令，我试过，反正各种报错。 去 gitlab 上，进入到你创建的项目，可以看到Files，点进去后，能看到分支，就表示创建分支成功。 webstorm 提交项目代码当然，此步骤也可以直接用之前的 gitlab 创建项目步骤的命令方式提交。也可以用 webstorm 图形界面提交代码。看个人偏好了，我是实用主义者，图形界面省事。出现问题时，再开启命令模式。右键项目 –&gt; Git –&gt; Add –&gt; Commit Directory… –&gt; Push 。去 gitlab 确认代码是否提交成功。（首次提交代码时会要求你输入账号和密码，就是你 gitlab 的账号和密码，然后勾上记住密码就行。） 总结上面是项目首次创建和代码提交的流程。如果你是三方开发者，你只需要clone 下来项目，然后修改提交代码就行。clone 项目：VCS –&gt; Checkout from Version Control –&gt; Git ， 输入相应的远程代码库 url ，本地代码库目录，项目名字。 点击 test ，测试与远程代码库是否连接成功。输入相应的账号和密码，勾上记住密码。 项目 clone 下来后，本地修改调试代码。需要提交代码时，右键项目或修改的文件目录或文件，然后 Git –&gt; Add –&gt; Commit Directory… –&gt; Push 。]]></content>
      <tags>
        <tag>webstorm</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webstorm11--激活破解总结]]></title>
    <url>%2F2018%2F05%2F29%2Fwebstorm-regitstcode.html</url>
    <content type="text"><![CDATA[网上的方法很多，什么注册机，输入 server 地址等等，特别是输入地址的，总会出现用了一段时间就会不行了，现在整理了网上了一些靠谱点的方法。 ## License server 输入网址注册时，在打开的 License Activation 窗口中选择 “License server” ，在输入框输入下面的网址： http://hb5.s.osidea.cc:1017 （2018.4.23日） http://hb5.s.osidea.cc:1017(最新 18/05/10) http://im.js.cn:8888 (新,感谢 [ qq_34394012 ]) http://hb5.s.osidea.cc:1017 ( 新,感谢[ cometwo ] ) http://idea.lanyus.com ( 新.感谢[ weixin_38627258 ] ) 点击：Activate即可。 网友分享 : [感谢 weixin_41405655 ] 123456===== LICENSE BEGIN =====37362-1204201000000!enirob"h4FBnAgcpdNnIZydA9AikY7i7Ecn7GW7EvybU"YwuAPkdCwQn7Fp!9FpNvujTEghtbTGz1DutM216===== LICENSE END ===== 复制 license begin 和 license end 之间的一段代码可以用 ## 获取注册码打开网址（IntelliJ IDEA 注册码），我们能看到下面的界面，直接点击获取激活码，将生成的激活码粘贴到 WebStorm 激活对话框中的 Lisence Code 输入框，点击OK即可破解。 使用破解补丁(推荐)1. 拿到 jar 破解补丁文件去我的百度网盘下载（2018版）：链接：https://pan.baidu.com/s/1O8-NW_e9rsoTrQ1u1qjs7w 密码：26mm或去官网下载，如下图： 2. 修改配置文件将补丁复制到安装目录的bin目录下：C:\Program Files\JetBrains\WebStorm 2017.1.3\bin 修改同目录下的 WebStorm.exe.vmoptions 和WebStorm64.exe.vmoptions，这两个文件一个是32位的，一个是64位的，建议同步修改。用文本编辑器打开之后，在文件最上面加一行代码 ：-javaagent:C:\Program Files\JetBrains\WebStorm 2017.1.3\bin\JetbrainsCrack-2.7-release-str.jar 配置好之后，保存文件。在此再次启动 WebStorm ，就会看到下面所示界面，至此补丁激活就成功了。 自己搭建IntelliJ IDEA授权服务器比较繁琐，自己去折腾，给你个传送门。]]></content>
      <categories>
        <category>webstorm</category>
      </categories>
      <tags>
        <tag>webstorm11</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[photoshop 前端网页查看的基本设置]]></title>
    <url>%2F2018%2F05%2F29%2Fps-front.html</url>
    <content type="text"><![CDATA[前端开发用 photoshop 查看网页的一些基本设置。 新建 编辑 窗口 工作区（存储窗口预设） 视图 信息 图层]]></content>
      <categories>
        <category>Photoshop</category>
      </categories>
      <tags>
        <tag>Photoshop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题中添加人体时钟 hone hone clock]]></title>
    <url>%2F2018%2F05%2F29%2Fgithub-hexo-next-07.html</url>
    <content type="text"><![CDATA[给网站添加人体时钟 hone hone clock ，人体时钟是日本的出品，点此处去。 创建 js 文件 hone_hone_clock.js在next\source\js\src文件夹下创建hone_hone_clock.js，添加代码：123456789101112131415161718192021/*hone-hone-clock*/!function (e, t, a) &#123; /* code */ var initClock = function()&#123; var sHtml = ''; sHtml += '&lt;div style="position: fixed;right: 10px;top: 20px;width: 160px;height: 70px;"&gt;'; sHtml += ' &lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" width="160" height="70" id="honehoneclock" align="middle"&gt;'; sHtml += ' &lt;param name="allowScriptAccess" value="always"&gt;'; sHtml += ' &lt;param name="movie" value="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf"&gt;'; sHtml += ' &lt;param name="quality" value="high"&gt;'; sHtml += ' &lt;param name="bgcolor" value="#ffffff"&gt;'; sHtml += ' &lt;param name="wmode" value="transparent"&gt;'; sHtml += ' &lt;embed wmode="transparent" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf" quality="high" bgcolor="#ffffff" width="160" height="70" name="honehoneclock" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"&gt;'; sHtml += ' &lt;/object&gt;'; sHtml += '&lt;/div&gt;'; t = t || document; t.write(sHtml); &#125; initClock();&#125;(window, document); 引用在next\layout\_layout.swig文件中，添加引用（注：在 swig 末尾添加）：12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/hone_hone_clock.js"&gt;&lt;/script&gt; 其他其实稍微懂点代码的可以自行封装 js ，然后按照一样的引入方式引入就行。 你可以直接下载别人写好的 js 文件，然后引入你的项目。比如下面的：12&lt;script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"&gt;&lt;/script&gt; &lt;script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js"&gt;&lt;/script&gt; 或拿到人体时钟的swf文件，自行写代码封装也可以滴。 我的百度网盘有swf文件：链接：https://pan.baidu.com/s/16cNNaaFDsi1G_3g8YKF7fA 密码：7yob]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题中添加网页标题崩溃欺骗搞怪特效]]></title>
    <url>%2F2018%2F05%2F29%2Fgithub-hexo-next-06.html</url>
    <content type="text"><![CDATA[文章出处： https://asdfv1929.github.io/2018/01/25/crash-cheat/ 给网页title添加一些搞怪特效 ，提高页面体验。 创建js文件crash_cheat.js在next\source\js\src文件夹下创建crash_cheat.js，添加代码：1234567891011121314151617&lt;!--崩溃欺骗--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = '╭(°A°`)╮ 页面崩溃啦 ~'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = '(ฅ&gt;ω&lt;*ฅ) 噫又好了~' + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); 引用在next\layout\_layout.swig文件中，添加引用（注：在 swig 末尾添加）：12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/crash_cheat.js"&gt;&lt;/script&gt; 补充懂代码的会考虑横向和纵向的兼容性问题。我先贴个 visibilitychange 事件的桌面端和移动端兼容性图示，或者你直接点击此处过去查看。 至少得是ie10，所以你别考虑把 attachEvent 加入进来做 ie6,7,8 的兼容了。Android 不支持的，Safari 浏览器也不支持的。所以在这些设备上没看到效果，不要认为是你的代码问题。 另外，visibilitychange 事件在浏览器tab页面切换时执行，故而不停的切换tab页面也会出现这种假效果。哪怕页面正常加载完成。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题评论功能的筛选对比]]></title>
    <url>%2F2018%2F05%2F29%2Fgithub-hexo-next-05.html</url>
    <content type="text"><![CDATA[个人站点评论系统的选择的确让人头疼，我在这上面也折腾了很长时间，蛮难选的。大致整理了一下，看下表，后续深入了解后再更新此文。 评论系统对比表 名称 推荐星数 介绍 多说 0 在2017年06月01日就关闭评论服务了 网易云跟贴 0 2017年08月01日也停止服务了 来必力 3 国外的，不能匿名评论，支持邮箱账号注册评论，据说容易出现乱码。 DISQUS 2 国外的，界面又丑，加载又慢。 畅言 4 国内的，不能匿名评论，，需要手机号验证。需要你的备案号，不然你网站没法长时间使用畅言。据说灌水厉害，这个功能目前已经是出于失灵与半失灵的状态，官方估计也没怎么维护了。 有言 3 国内的，支持匿名评论（默认关闭，需手动开启），但只是匿名，没有留联系方式的地方。 Facebook Comments 3 国外的，个人网站很少见人用，不做评论。 HyperComments 4 国外的，支持匿名评论，可以评论上传图片、影片等。功能还是比较强大，设置界面是英文，且没有中文支持。收费，只能免费试用14天。界面美观。 Valine 3 国内的，不能匿名评论，但也不需要注册那么麻烦，简单风格。 gitment 2 不推荐gitment因为作者弃坑了，一堆兼容问题没人修复，包括提交的pr都没合并。 gitalk 3 支持Markdown。 基于 GitHub Issues 的评论系统 ，面向程序员，不能匿名评论，需博主初始化话题，用户需登录 github 账号评论。 推荐星际评定不一定合理，自行搜集相关资料选择心仪的。我暂定的 Valine 。 参考 Hexo（NexT 主题）评论系统哪个好？ Hexo-NexT主题添加评论功能（来必力、Hypercomments、畅言、友言）]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT：在文章中嵌入 CodePen或 jsFiddle]]></title>
    <url>%2F2018%2F05%2F29%2Fgithub-hexo-next-04.html</url>
    <content type="text"><![CDATA[建议直接去博客网站原文看效果，因为简书的markdown不支持此语法的。搞 IT 技术的人，写博客有时候需要在博文中展示一些实施的 demo 代码效果，这就涉及到需要在博文中嵌入 CodePen 或 jsFiddle，jsFiddle 有个国内版 jsrun，我就做了上面两种尝试，也就不讲其他的了。至于这两款需要翻墙，对于搞 IT 技术的你不算事儿吧。 提一句：需要拿出来做嵌入用的代码，你去你的 demo 页面找Embed，中文版的好像叫嵌入，里面有下面的嵌入代码的语法需要的参数。 在文章中嵌入 CodePen去 Hexo 官方插件页搜索codepen，然后找到hexo-codepen，点过去。或者直接点击此处。里面有文档和示例，大致讲解一下。 1.安装npm 安装：$ npm install hexo-codepen --save或 yarn 安装：$ yarn add hexo-codepen 2.用法语法结构：1&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125; deme 链接： https://codepen.io/CiTA/pen/bgjKKE 在 CodePen 里面 Embed 出来的html代码：12&lt;p data-height="265" data-theme-id="dark" data-slug-hash="bgjKKE" data-default-tab="css,result" data-user="CiTA" data-embed-version="2" data-pen-title="CSS sidebar toggle" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/CiTA/pen/bgjKKE/"&gt;CSS sidebar toggle&lt;/a&gt; by Silvestar Bistrović (&lt;a href="https://codepen.io/CiTA"&gt;@CiTA&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt; 参数对应关系： 字段 值 userId CiTA slugHash bgjKKE theme dark defaultTab css,result height 265 width 默认为：100%，此值应根据您的博客主题进行调整 示例效果：12#替换参数后的语法：(*设置宽高时不要用%，会导致编译错误*)&#123;% codepen CiTA bgjKKE dark [css,result [265]] %&#125; 运行后的： 当然也可以直接嵌入源码（CodePen 中 Embed 出来的代码支持3种格式：WordPress Shortcode、iFrame、HTML） ，也能看到效果，只是这个会带有源码，体验不太好。效果如下： See the Pen CSS sidebar toggle by Silvestar Bistrović (@CiTA) on CodePen. 在文章中嵌入 jsFiddle这个就省掉了安装依赖包的步骤了，本来官网也提供了语法，只是没有具体的示例，网上找了半天没资料。就自己参考 CodePen 的方式做了一个逆向推理出来的。 用法语法结构（官网也就只提供了这个）：(设置宽高时不要用%，会导致编译错误)1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; demo 链接： http://jsfiddle.net/AntBody/138zf8kk/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=138zf8kk 在文章中嵌入 jsfiddle 。 然后页面转化后，在浏览器里面开启调试控制台，看到如下图： 然后逆推，设置如下：1&#123;% jsfiddle AntBody/138zf8kk js,html,css,result light %&#125; 运行效果： 这些参数怎么对应过去的呢？看下图： 当然同样的，因为 jsfiddle 的Embed code 支持两种方式，也可以引入 iFarme 源码进来，因为本来 Hexo 的语法本来就是编译成 iframe 形式的。 另外说明一点，jsfiddle 的 demo 例子代码你得找到 Emebed才能看到相关需要的参数，如果找不到，可能就不知道怎么设置了。比如 Element UI 的随便一个例子： https://jsfiddle.net/api/post/library/pure/，不知道是不是因为没注册账号的原因引起的。（由于我一直用的codepen，就没去捉摸具体原因了。） 总结 codepen 嵌入 安装：$ npm install hexo-codepen --save 使用语法结构： 1&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125; 找到对应参数，对应过去就行。 jsfiddle 嵌入 使用语法结构： 1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; 找到对应参数，对应过去就行。 至于其他的像 dabbet、jsrun、jsbin、runjs 等等就自己去尝试了。另外，由于 hexo 解析后都是 iframe 的结果形式，故而可以直接引入 iframe 的代码也行，只是效果体验会差些，毕竟连源码也显示出来了。至于，其他的 js 嵌入或 html+js 嵌入就自己去尝试了。codepen 里面尝试了一下，跟 iframe 引入方式效果一样。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>CodePen</tag>
        <tag>jsFiddle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题中添加网页音乐播放器功能]]></title>
    <url>%2F2018%2F05%2F27%2Fgithub-hexo-next-03.html</url>
    <content type="text"><![CDATA[非原创，文章出处：https://asdfv1929.github.io/2018/05/26/next-add-music/ 。为博客添加网页音乐播放器功能 download点击访问 Aplayer 源码：GitHub Aplayer。下载到本地，解压后将dist文件夹复制到themes\next\source文件夹下。 music.js新建themes\next\source\dist\music.js文件，添加内容：12345678910111213141516171819202122232425const ap = new APlayer(&#123; container: document.getElementById('aplayer'), fixed: true, autoplay: false, audio: [ &#123; name: "PDD洪荒之力", artist: '徐梦圆', url: 'http://up.mcyt.net/?down/39868.mp3', cover: 'http://oeff2vktt.bkt.clouddn.com/image/84.jpg', &#125;, &#123; name: '9420', artist: '麦小兜', url: 'http://up.mcyt.net/?down/45967.mp3', cover: 'http://oeff2vktt.bkt.clouddn.com/image/8.jpg', &#125;, &#123; name: '风筝误', artist: '刘珂矣', url: 'http://up.mcyt.net/?down/46644.mp3', cover: 'http://oeff2vktt.bkt.clouddn.com/image/96.jpg', &#125; ]&#125;); 源码中对应的参数解释，这边都有： Aplayer 中文文档 audio 对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：http://up.mcyt.net/ ，搜索对应的音乐，然后复制 url 和右击封面图片链接粘贴到对应的位置上就行了。 注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。 _layout.swig打开themes\next\layout\_layout.swig文件，将1234&lt;link rel="stylesheet" href="/dist/APlayer.min.css"&gt;&lt;div id="aplayer"&gt;&lt;/div&gt;&lt;script type="text/javascript" src="/dist/APlayer.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="/dist/music.js"&gt;&lt;/script&gt; 添加到&lt;body itemscope ...&gt;后面就行，即在&lt;body&gt;&lt;/body&gt;里面。 重新生成，访问页面，就能看到左下角的音乐播放器了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Web Music</tag>
        <tag>Aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题添加点击爱心效果]]></title>
    <url>%2F2018%2F05%2F27%2Fgithub-hexo-next-02.html</url>
    <content type="text"><![CDATA[非原创，文章出处：https://asdfv1929.github.io/2018/01/26/click-love/ 。给NexT主题内添加页面点击出现爱心的效果 创建js文件在/themes/next/source/js/src下新建文件 clicklove.js ，接着把该链接下的代码拷贝粘贴到 clicklove.js 文件中。代码如下：1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 修改_layout.swig在\themes\next\layout\_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github 创建分支]]></title>
    <url>%2F2018%2F05%2F24%2Fgithub-new-branch.html</url>
    <content type="text"><![CDATA[文章出处git 管理分钟的相关命令。 clone 项目代码库clone Github 上的Repository，如下：git clone git@github.com:xxx/xxxx.git 管理分支查看分支 查看本地分支使用 git branch命令，如下：12$ git branch* master *标识的是你当前所在的分支。 查看远程分支：git branch -r 查看所有分支：git branch -a 本地创建新的分支命令：git branch [branch name]栗子：git branch gh-dev 切换到新分支命令：git checkout [branch name]栗子：12345Ricky@DESKTOP-1QPASTR MINGW64 /f/Git_Studio/design-patterns (master)$ git checkout gh-devSwitched to branch 'gh-dev'Ricky@DESKTOP-1QPASTR MINGW64 /f/Git_Studio/design-patterns (gh-dev) 创建+切换分支创建分支的同时切换到该分支上：git checkout -b [branch name]git checkout -b [branch name] 的效果相当于以下两步操作：12git branch [branch name]git checkout [branch name] 将新分支推送到github命令：git push origin [branch name]例如：git push origin gh-dev 删除本地分支命令：git branch -d [branch name]例如：git branch -d gh-dev 删除github远程分支命令：git push origin :[branch name]分支名前的冒号代表删除。例如：git push origin :gh-dev]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github 域名绑定]]></title>
    <url>%2F2018%2F05%2F23%2Fgithub-addon-domain.html</url>
    <content type="text"><![CDATA[利用 Github pages 搭建静态网页项目时，Github 提个一个和用户名有关的免费域名：username.github.io 。当然如果你不满意，而自己又有个常见格式的域名（.com，.cn等等），那么绑定在一起呢。我是去godaddy购买的域名，据说域名服务商解析比较慢，所以采用了国内的DNSPod来做域名解析，然后把域名的NS服务器指向 DNSPod。 获得域名 Godaddy首先你要注册一个域名，域名注册可以去去godaddy， 也可以去国内的阿里云，万维网等等。我是去 godaddy 购买的域名（www.missfli.com）。可以参考[此文](https://www.jianshu.com/p/05289a4bc8b2)的购买域名步骤。 绑定域名分2种情况：带www和不带www的。域名解析配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录。所以，你就有：购买的域名，github 提供的免费域名，和 github 免费域名IP。 在 DNSPod 上添加域名登录进 DNSPod 的控制界面：域名解析 –&gt;添加域名–&gt;输入域名–&gt;确定。这样就添加了一个域名到 DNSPod 了。（注意：输入域名时，不要带www） 添加好之后，需要为域名设置各种参数，如A记录，NS地址等。点击刚才添加的这个域名，进入域名设置界面。在这里，你可以看到DNSPOD已经为你提供了2个NS（Name Server）地址，你需要把这2个地址，在GoDaddy后台控制面板中进行设置（后面会讲）。 DNSPod 设置域名参数然后将 github 提供的域名和 IP 添加进来，注意看它的规则介绍。域名配置最常见有2种方式，CNAME 和 A 记录，CNAME 填写域名，A记录填写 IP ，由于不带 www 方式只能采用A记录，所以必须先 ping 一下你的用户名.github.io的IP，将A记录指向你ping出来的IP，将 CNAME 指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好。 Godaddy 配置由于配置了有些久了，截图没有了，就用别人的了。由于你的域名是在GoDaddy上注册的，也就是说，GoDaddy是该域名的托管商。因此，需要到GoDaddy的控制面板，指定域名的NS服务器。既然我们打算使用DNSPOD来解析域名，因此，在GoDaddy控制面板就需要把域名的NS设置为DNSPOD提供的地址。在上面第二步中，DNSPOD已经提供了2个NS地址，我们只需要把这2个地址添加到GoDaddy域名NS即可。 进入GoDaddy域名控制面板（登录后，在“My Account”模块下面），目光移向“Nameservers”区域，在该区域有一个“Set Nameservers”链接。这里就是设置域名NS的入口了，如图片五所示。 点击“Set Nameservers”链接，GoDaddy会弹出一个Nameservers设置界面，如图片六所示。在这个设置界面，选择“I have specific nameservers for my domains”单选按钮，在下面的文本框中，输入DNSPOD所提供的2个NS地址，设置好之后，点击【OK】，大功告成！ 这个时候，你只需要泡上一杯咖啡，等待10-15分钟，域名解析就能够生效啦！配置完后，查看域名相关信息： 总结大致步骤： Godaddy上购买域名：www.missfli.com 。 github 上的 woaiwojia321314.github.io 域名和该域名的 IP，并在该 xxx.github.io项目库的根目录，新建个CNAME文件，里面添加上购买的域名 www.missfli.com 。 DNSPod 上配置：添加购买域名(www.missfli.com)，然后添加`woaiwojia321314.github.io`和该域名IP。 Godaddy 上配置：DNSPOD提供的2个NS地址配置到 Godaddy 上。 参考 怎样将Godaddy域名解析到DNSPOD github怎么绑定自己的域名？]]></content>
      <tags>
        <tag>域名</tag>
        <tag>Github</tag>
        <tag>Godaddy</tag>
        <tag>DNSPod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[域名信息查询]]></title>
    <url>%2F2018%2F05%2F23%2Fdomain-look.html</url>
    <content type="text"><![CDATA[你想知道网站域名的相关信息吗？其实很简单，跟谷哥或度娘说：whois，一大堆结果。在这里呢，就只给你推荐几个比较权威准确点的。 国外免费用户有查询次数限制：http://whois.domaintools.com/ 国内 威胁情报分析平台ThreatBook 阿里云域名查询 站长工具域名查询 查询结果 www.google.com ：208.111.59.15/19/23/27/29/30/34/38/42/44/45/49/53/57/59,93.46.8.89 www.microsoft.com ：118.215.11.168,182.215.11.168 www.apple.com/cn ：23.15.152.48,17.142.160.11,17.172.224.30,17.178.96.11 www.focebook.com ：31.13.79.220,179.60.192.3 www.twitter.com ：104.244.42.193/65 www.youtube.com ：74.125.200.136/190/91/93,216.58.211.46 www.philips.com ：118.215.81.147 www.linkedin.com ：103.20.94.1 www.amazon.com ：54.239.25.200,54.239.29.3 www.baidu.com ：14.215.177.37/38,103.235.46.212 www.alibaba.com ：205.204.101.42,110.75.112.20,140.205.94.148 www.qq.com ：101.226.103.106]]></content>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IP 定位查询]]></title>
    <url>%2F2018%2F05%2F23%2Fip-lqs.html</url>
    <content type="text"><![CDATA[有时候需要访客位置信息，这时你如果拿到访客的ip，那么通过下面的ip定位的方法就能做到了。搜集了不少资料，大致罗列了网上的方法，希望对你有用。国内国外大致就这些：淘宝，腾讯，新浪，百度，IP2Location,DB-IP,纯真IP数据库，MaxMind GeoLite2，当然还有其他的。 调用三方的接口推荐新浪接口，我用了一些常用和非常用ip（根据国内外大网站的域名查询出来的ip,文章末尾会将ip列举出来）做了个大致的查询比较。 新浪接口：http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;ip=54.239.25.200 淘宝接口：http://ip.taobao.com/service/getIpInfo.php?ip=123.123.123.123 IP查询：http://www.ipip.net/ip.html 调用自己本地数据库这种方法就要你去网上下载相应的纯真IP数据库了。 http://www.ipip.net/ http://lite.ip2location.com/ https://www.maxmind.com/zh/geoip2-services-and-databases 在线查询 https://www.ipip.net/免费版有1000次/天限制 http://www.haoweichi.com/Index/iplocate http://www.ip138.com/ips1388.asp http://ip.lockview.cn/default.aspx http://www.123cha.com/ IP列表 这几个比较偏：31.13.79.220，103.235.46.212，31.13.79.220，23.15.152.48，182.215.11.168，208.111.59.15 www.google.com ：208.111.59.15/19/23/27/29/30/34/38/42/44/45/49/53/57/59,93.46.8.89 www.microsoft.com ：118.215.11.168,182.215.11.168 www.apple.com/cn ：23.15.152.48,17.142.160.11,17.172.224.30,17.178.96.11 www.focebook.com ：31.13.79.220,179.60.192.3 www.twitter.com ：104.244.42.193/65 www.youtube.com ：74.125.200.136/190/91/93,216.58.211.46 www.philips.com ：118.215.81.147 www.linkedin.com ：103.20.94.1 www.amazon.com ：54.239.25.200,54.239.29.3 www.baidu.com ：14.215.177.37/38,103.235.46.212 www.alibaba.com ：205.204.101.42,110.75.112.20,140.205.94.148 www.qq.com ：101.226.103.106]]></content>
      <tags>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js 获取客户端真实 IP]]></title>
    <url>%2F2018%2F05%2F23%2Fip-by-js.html</url>
    <content type="text"><![CDATA[java获取客户端程序本身还有对应的对象来实现。而js却不行。搜罗了一些资料，发现比较全而好的前端获取客户端IP的方法基本都是通过三方接口。也就是调用别人写好的接口。用浏览器已有的控件ActiveXObject的控件方式，有一定的兼容性问题。 方法一：（所有的平台及浏览器）使用搜狐接口：1234&lt;script src="http://pv.sohu.com/cityjson?ie=utf-8"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;document.write(returnCitySN["cip"]+','+returnCitySN["cname"])&lt;/script&gt; 方法二：（所有的平台及浏览器）使用新浪接口：(我测试过，此方法好像不行。访问网站也不能访问了。)12345678&lt;script type="text/javascript" src="http://counter.sina.com.cn/ip/" charset="gb2312"&gt;&lt;/script&gt; &lt;!--获取接口数据，注意charset --&gt;&lt;script type="text/javascript"&gt;document.writeln("IP地址："+ILData[0]+"&lt;br /&gt;"); //输出接口数据中的IP地址document.writeln("地址类型："+ILData[1]+"&lt;br /&gt;"); //输出接口数据中的IP地址的类型document.writeln("地址类型："+ILData[2]+"&lt;br /&gt;"); //输出接口数据中的IP地址的省市document.writeln("地址类型："+ILData[3]+"&lt;br /&gt;"); //输出接口数据中的IP地址的document.writeln("地址类型："+ILData[4]+"&lt;br /&gt;"); //输出接口数据中的IP地址的运营商&lt;/script&gt; 方法三：个人Robert Hashemian写的：12345678&lt;script language="JavaScript" src="http://www.hashemian.com/js/visitorIP.js.php"&gt;&lt;/script&gt;&lt;script language="JavaScript"&gt; VIH_BackColor = "palegreen"; VIH_ForeColor = "navy"; VIH_FontPix = "16"; VIH_DisplayFormat = "You are visiting from:&lt;br&gt;IP Address: %%IP%%&lt;br&gt;Host: %%HOST%%"; VIH_DisplayOnPage = "yes";&lt;/script&gt; 方法四：（只针对IE且客户端的IE允许AcitiveX运行，通过平台：XP，SERVER03，2000）。利用ActiveXObject控件，ie浏览器里要开启此控件：123&lt;script language="JavaScript"&gt;function GetLocalIPAddr()&#123; var oSetting = null; var ip = null; try&#123; oSetting = new ActiveXObject("rcbdyctl.Setting"); ip = oSetting.GetIPAddress; if (ip.length == 0)&#123; return "没有连接到Internet"; &#125; oSetting = null; &#125;catch(e)&#123; return ip; &#125; return ip; &#125; document.write(GetLocalIPAddr()+"&lt;br/&gt;")&lt;/script&gt; 参考 JS获取客户端IP地址、MAC和主机名的7个方法汇总 js获取客户端外网ip的简单实例]]></content>
      <tags>
        <tag>IP</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo（NexT主题）搭建博客]]></title>
    <url>%2F2018%2F05%2F23%2Fgithub-hexo-next-01.html</url>
    <content type="text"><![CDATA[由于曾经搭建过，但是不小心删掉了本地电脑上的源码，而 github 上也只有生成后的html页面代码，导致了没法继续发布新文章。并且那会儿倒腾的有些久，断断续续的弄得，也没写博文记录。现在重新搭建一次，并且记录一下。 准备工作域名我的域名：www.missfli.com ，不愿意花钱就跳过此步骤。去godaddy购买域名，英文，中文的话选择新加坡或台湾香港都行，基本都能懂。购买的教程，可以参考此文的 购买域名 步骤。 环境技术GitHub Pages 用到了github，那就来个github桌面版，图形化界面，好用，你要喜欢命令模式也行。Hexo 的安装前提就是得有 Node.js 和 Git 。这里，我们要区分清楚git与github。git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。下面提供相关的官方版本地址，安装教程去网上搜一下就很多。 Node 官方版本安装：https://nodejs.org/en/ Git 官方版本安装：https://git-scm.com/download/win Github桌面版安装：https://desktop.github.com/ Git 配置当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改： 12$ git config --global user.name "username"$ git config --global user.email "username@example.com" 对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private: 在GitHub右上方点击你的头像，选择”Settings”； 在右边的”Personal settings”侧边栏选择”Emails”； 选择”Keep my email address private”。 这样，你就可以使用如下格式的email进行配置：$ git config --global user.email &quot;username@users.noreply.github.com&quot; Github 配置创建仓库 new repository在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username 是你的账号名)。 在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。简单来说，User Pages 与 Project Pages的区别是： User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。 用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。 User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。 User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。 另外注意： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 创建仓库 借用别人的图： 创建分支相关命令可参考此文。创建新代码仓库时，默认是 master 分支，但是这里需要2个分支，一个存储博客网站源码，一个存储HTML静态网页代码。我的是 gh-dev 分支存放源码，master 分支存放HTML静态网页代码。步骤如下()：123#进入项目目录#创建新分支并切换到该分支 gh-dev$ git checkout -b gh-dev 然后登陆 github , 将 username.github.io 项目的默认分支 master 修改成 gh-dev 即可。切换分支可以查看源码和生成后的HTML静态文件代码（发布代码）。 Github 绑定域名如果你没购买域名，就用github提供的默认的 xxx.github.io 来访问，可忽略此步骤。具体的绑定步骤，参考此文Github 域名绑定 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 检查电脑是否已经有SSH KEYS。$ ls -al ~/.ssh默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。如果提示：No such file or directory 说明你是第一次使用git。 如果没有SSH KEY，则生成新的SSH KEY。ssh-keygen -t rsa -C &quot;your_email@example.com&quot;然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 测试是否成功$ ssh -T git@github.com 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置： 12$ git config --global user.name "liuxianan"// 你的github用户名，非昵称$ git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 具体这个配置是干嘛的我没仔细深究。 以上的配置流程，我是用的别人的，给你看个我运行的命令截图： 安装HexoHexo 官网有详细步骤。 注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的，在配置文件中修改时，冒号后面必须有一个空格，否则可能会出问题； Hexo 创建项目打开你 Git Bash ，进入到你项目所在目录： 123456789101112#Hexo 的安装$ npm install hexo-cli -g#查看版本，确认是否安装成功$ hexo -version #建站$ hexo init &lt;project-name&gt;$ cd &lt;project-name&gt;$ npm install#生成静态页面（markdown文件转化为html文件）$ hexo generate#网站预览（默认的主题风格landscape）$ hexo server NexT 安装你要是愿意用自带的 langscape 主题，可忽略此步骤。NexT 官网也有详细的步骤，文档也很详细，按照文档一步一步的设置一些基本和常用功能。网址：http://theme-next.iissnan.com/getting-started.html 安装 NexT 下载主题在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码： 12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题打开站点配置文件_config.ymltheme: next 验证主题验证相关配置是否正确：hexo s --debug提示：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 NexT 主题设定 选择风格 Scheme 设置 界面语言 设置 菜单 设置 侧边栏 设置 头像 设置 作者昵称 设置 站点描述 NexT 集成常用的第三方服务 百度统计 阅读次数统计（LeanCloud） Algolia 搜索 其他的设置和三方插件服务引入其他的设置和三方插件服务引入，官方没有或遇到了一些坑，后面再单独写博文记录。 常用hexo命令常见命令： 1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 发布到 github将上面hexo新建的项目里的所有文件复制到 username.github.io(从 github 上的 username.github.io 项目的 gh-dev 分支上 clone 下来项目)里， 首先，ssh key肯定要配置好。其次，配置_config.yml中有关deploy的部分。默认生成的_config.yml： 1234# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: 修改后的_config.yml： 123456deploy: type: git #对应仓库的SSH地址（可以在GitHub对应的仓库中复制） repo: git@github.com:woaiwojia321314/woaiwojia321314.github.io.git #（分支：User Pages为master，Project Pages为gh-pages） branch: master 为了能够使Hexo部署到GitHub上，需要安装一个插件：$ npm install hexo-deployer-git --save 然后，本地预览博客正常后，用git命令或github桌面端提交源码到 gh-dev 分支；用hexo deploy命令发布生成后的HTML代码到 master 分支上。执行下列指令即可完成部署： 12$ hexo generate$ hexo deploy 之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~ 部署与管理我的博客搭建流程 创建仓库：woaiwojia321314.github.io ； 创建两个分支：master 与 gh-dev ； 设置 gh-dev 为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； clone项目：github 桌面端或使用git clone git@github.com:woaiwojia321314/woaiwojia321314.github.io.git拷贝仓库； 在本地 woaiwojia321314.github.io 文件夹下通过 Git bash 依次执行 npm install hexo-cli、hexo init、npm install 和 npm install hexo-deployer- git（此时当前分支应显示为 gh-dev ）; 修改 _config.yml 中的 deploy 参数，分支应为 master , 这样就能保证发布代码发布到 master 分支上； 依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件，或者用 github 桌面端提交项目源码；执行hexo generate -d生成网站并部署到GitHub上。（git命令提交或github桌面端提交源码到 gh-dev ; hexo deploy 命令提交生成HTML文件到 master 分支）这样一来，在 GitHub 上的 woaiwojia321314.github.io 仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 我的博客管理流程日常修改在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理： 依次执行 git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为 gh-dev ）； 然后才执行hexo generate -d发布网站到 master 分支上。虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。 本地资料丢失当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： clone项目：github桌面端 或 使用 git clone git@github.com:woaiwojia321314/woaiwojia321314.github.io.git 拷贝仓库（默认分支为 gh-dev）； 在本地新拷贝的 woaiwojia321314.github.io 文件夹下通过 Git bash 依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。 保留CNAME、README.md等文件 CNAME、README.md、favicon.ico等文件放在source目录下。因为每次md转化为html时都会清空public文件夹，包括放在该目录下的CNAME、README.md、favicon.ico等等文件，放在source目录下，转化时会一起拿过去的。CNAME文件内容； www.misssfli.com 项目根目录：gitignore文件内容：12345.DS_StoreThumbs.dbdb.json*.lognode_modules/ 参考 GitHub Pages + Hexo搭建博客 如何搭建一个独立博客——简明Github Pages与Hexo教程 使用hexo+github搭建免费个人博客详细教程 搭建个人博客-hexo+github详细完整步骤]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Element ui之form表单使用]]></title>
    <url>%2F2018%2F05%2F20%2Felement-form.html</url>
    <content type="text"><![CDATA[初次使用Element ui，遇到不少坑。在此做些记录，方便日后查阅。 form 表单赋值/取值取值：获取 form 表单的每个表单项的值：this.formName.property，比如：this.ruleForm.username，this.ruleForm.psw赋值：大部分都是下面这种方式赋值格式（property: value），一般的 input ，赋值和显示的事一致的，而有些则不一定。比如下拉选择列表 select ，复选框 checkbox , 单选 radio ，日期 date 时间 time , 文件上传 fileupload 等等会有个显示文本（给用户看）和实际值（后台数据库存储的值）。 select 选择器设置默认选择，见此例https://jsfiddle.net/athena0304/g51g4L0L/ checkbox 复选框和文件上传 fileupload 的是数组 动态生成后的默认选项设置：label对应的string，:label对应的传过来的参数（string,number），见此例https://codepen.io/feili/pen/KReNWw form 表单验证自带验证和自定义验证。自带验证：123456789101112131415161718192021&lt;script&gt; export default &#123; data() &#123; return &#123; form: &#123; telphone: '', cardnum: '523456178988776111', &#125;, rules: &#123; telphone: [ &#123; required: true, message: '请输入手机号', trigger: 'blur' &#125; ], cardnum: [ &#123; required: true, message: '请输入买受人身份证号', trigger: 'blur' &#125; ], &#125; &#125; &#125;, ... &#125;&lt;/script&gt; 自定义验证：1234567891011121314151617181920212223242526272829303132333435&lt;script&gt; export default &#123; data() &#123; //自定义验证规则 //身份证验证 var checkCardnum = (rule, value, callback) =&gt; &#123; setTimeout(() =&gt; &#123; var reg = /(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/; if(!reg.test(value))&#123; callback(new Error('身份证输入不合法')); &#125;else&#123; callback(); &#125; &#125;, 1000); &#125;; return &#123; form: &#123; telphone: '', cardnum: '523456178988776111', &#125;, rules: &#123; telphone: [ &#123; required: true, message: '请输入手机号', trigger: 'blur' &#125;, &#123; pattern: /^1[34578]\d&#123;9&#125;$/, message: '目前只支持中国大陆的手机号码' &#125; ], cardnum: [ &#123; required: true, message: '请输入买受人身份证号', trigger: 'blur' &#125;, &#123; validator: checkCardnum, trigger: 'blur' &#125; ], &#125; &#125; &#125;, ... &#125;&lt;/script&gt; 当然，自定义验证规则时，一般都会是单独的文件做相关验证规则限制，然后引入调用。validate.js，customValidate.js， xxx.vue。validate.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/** * Created by feili on 2018/5/11. */export default function (type,val) &#123; //type的值：qq-QQ号，mobile-手机号，phone-座机号，cardid-身份证号，integer-数字，moneynum-货币数字（带两位小数），... var result = false; //QQ var isQQ = function (val) &#123; const reg = /^[1-9][0-9]&#123;4,10&#125;$/; return reg.test(val); &#125; //邮箱 var isEmail = function (val) &#123; const reg = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]&#123;2,3&#125;$/; return reg.test(val); &#125; //手机号(目前只支持中国大陆的手机号码) var isMobile = function (val) &#123; const reg = /^1[34578]\d&#123;9&#125;$/; return reg.test(val); &#125; //座机号 var isPhone = function (val) &#123; const reg = /^0\d&#123;2,3&#125;-\d&#123;7,8&#125;$/; return reg.test(val); &#125; //身份证号(15位和18位) var isCardID = function (val) &#123; const reg = /(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/; return reg.test(val); &#125; //车牌号(川B12345) var isPlateNumber = function (val) &#123; const reg = /(^[\u4E00-\u9FA5]&#123;1&#125;[A-Z0-9]&#123;6&#125;$)|(^[A-Z]&#123;2&#125;[A-Z0-9]&#123;2&#125;[A-Z0-9\u4E00-\u9FA5]&#123;1&#125;[A-Z0-9]&#123;4&#125;$)|(^[\u4E00-\u9FA5]&#123;1&#125;[A-Z0-9]&#123;5&#125;[挂学警军港澳]&#123;1&#125;$)|(^[A-Z]&#123;2&#125;[0-9]&#123;5&#125;$)|(^(08|38)&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警军港澳]&#123;1&#125;$)/; return reg.test(val); &#125; //数字（正整数和0） var isInteger = function (val) &#123; const reg = /^([1-9]\d*|[0]&#123;1,1&#125;)$/; return reg.test(val); &#125; //货币数字（最多带两位小数） var isMoneynum = function (val) &#123; const reg = /^([1-9]\d+|0)(\.[\d]&#123;1,2&#125;)?$/; return reg.test(val); &#125; switch(type) &#123; case 'qq': result = isQQ(val); break; case 'mobile': result = isMobile(val); break; case 'phone': result = isPhone(val); break; case 'cardid': result = isCardID(val); break; case 'platenumber': result = isPlateNumber(val); break; case 'integer': result = isInteger(val); break; case 'moneynum': result = isMoneynum(val); break; default: break; &#125; return result;&#125; customValidate.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081/** * Created by feili on 2018/5/11. */import validate from './validate.js'export default &#123; /*qq号*/ isQQ: (rule, value, callback) =&gt; &#123; if((value || '')!='') &#123; if(!validate('qq',value)) &#123; callback(new Error('您输入的QQ号不正确!')) &#125; else &#123; callback() &#125; &#125; else&#123; callback(); &#125; &#125;, /*手机号*/ isMobile: (rule, value, callback) =&gt; &#123; if((value || '')!='') &#123; if(!validate('mobile',value)) &#123; callback(new Error('您输入的手机号不正确!')) &#125; else &#123; callback() &#125; &#125; else&#123; callback(); &#125; &#125;, /*座机号*/ isPhone:(rule, value, callback) =&gt; &#123; if((value || '')!='') &#123; if(!validate('phone',value)) &#123; callback(new Error('您输入的座机号不正确!')) &#125; else &#123; callback() &#125; &#125; else&#123; callback(); &#125; &#125;, /*身份证号*/ isCardID:(rule, value, callback) =&gt; &#123; if((value || '')!='') &#123; if(!validate('cardid',value)) &#123; callback(new Error('您输入的身份证号不正确!')) &#125; else &#123; callback() &#125; &#125; else&#123; callback(); &#125; &#125;, /*数字（正整数和0）*/ isInteger: (rule, value, callback) =&gt; &#123; if((value || '')!='') &#123; if(!validate('integer',value)) &#123; callback(new Error('请输入数字!')) &#125; else &#123; callback() &#125; &#125; else&#123; callback(); &#125; &#125;, /*保留两位小数*/ isMoneynum:(rule, value, callback) =&gt; &#123; if((value || '')!='') &#123; if(!validate('moneynum',value)) &#123; callback(new Error('请输入正确的数字，最多保留两位小数!')) &#125; else &#123; callback() &#125; &#125; else&#123; callback(); &#125; &#125;,&#125; xxx.vueimport customValid from &#39;@/util/customValidate&#39;1234567891011121314rules: &#123; renttype: [ &#123; required: true, message: '请选择出租方式', trigger: 'change' &#125; ], rentarea: [ &#123; required: true, message: '此项必填', trigger: 'blur' &#125;, &#123; validator: customValid.isMoneynum, trigger: 'blur' &#125; ], rentcash: [ &#123; required: true, message: '此项必填', trigger: 'blur' &#125;, &#123; validator: customValid.isInteger, trigger: 'blur' &#125; ], ...&#125; 参考 ElementUi rules表单验证 vue+element-ui中的表单验证（电话等等）]]></content>
      <categories>
        <category>Element</category>
      </categories>
      <tags>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue2 ：axios 使用之（一）]]></title>
    <url>%2F2018%2F05%2F20%2Fvue-axios.html</url>
    <content type="text"><![CDATA[据说vuejs2.0已经不在维护vue-resource了，vuejs2.0 已经使用了axios了，并且官方也推荐使用axios 。 简介Axios 官网。axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征： 浏览器端发起XMLHttpRequests请求 Node端发起http请求 支持Promise API 拦截请求和响应 转化请求和响应（数据） 取消请求 自动转化json数据 客户端支持抵御XSRF（跨站请求伪造） 浏览器兼容性： 安装Vue项目中使用如下命令安装：npm install axios --save也可以使用cdn： 使用参考的git代码库api/index.js 文件：123456789101112131415161718192021222324252627282930313233343536373839import axios from 'axios'import QS from 'qs'let api = axios.create(&#123; baseURL: 'http://www.dragonflyxd.com/api/', //接口前缀（域名） method: 'GET', headers: &#123; 'Content-Type': 'application/x-www-form-urlencoded', 'Accept': 'application/json' &#125;, params: &#123;&#125;, timeout: 10000, withCredentials: false, responseType: 'json', maxContentLength: 2000, validateStatus: function (status) &#123; return status &gt;= 200 &amp;&amp; status &lt; 500 &#125;, maxRedirects: 5, transformRequest: [data =&gt; QS.stringify(data)], paramsSerializer: params =&gt; QS.stringify(params), data: &#123;&#125;&#125;)// http request 拦截器api.interceptors.request.use(config =&gt; &#123; return config&#125;, error =&gt; &#123; return Promise.reject(error)&#125;)// http response 拦截器api.interceptors.response.use(response =&gt; &#123; return response&#125;, error =&gt; &#123; return Promise.reject(error)&#125;)export default api 页面上调用：123456789101112131415import api from '@/api/index'api.post('/mk_login', data) .then(res =&gt; &#123; console.log(res.data); //后台返回的数据 //if(res.data.status)&#123; // 登录成功 //this.setUserInfo2(data); // this.$router.replace('/home'); //&#125; &#125;) .catch(error =&gt; &#123; console.log("login异常：") console.log(error) &#125;) 其他由于IE9不支持Promise，因此需要在项目入口main.js中打个补丁,否则无法发出请求：import &#39;babel-polyfill&#39;如上，已经能在IE9+上发起网络请求，但是IE9上有个问题：response.data为undefined,因此需要对返回的数据针对不同浏览器进行处理，在API.js中加入如下拦截器：1234567891011121314151617// 响应拦截axios.interceptors.response.use(function (response) &#123; var data // IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串) if(response.data == undefined)&#123; data = response.request.responseText &#125; else&#123; data = response.data &#125; // 判断data不是Object时，解析成Object if(!(data instanceof Object))&#123; data = JSON.parse(data) &#125; return data&#125;, function (error) &#123; return Promise.reject(error)&#125;); axios跨域请求问题： No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.网上搜了不少资料，很多都说需要前端配置，比如下面2种方式： 代理：config/index.js: proxyTable相关设置 浏览器chrome装个插件：Allow-Control-Allow-Origin 做本地开发 实际上，我这里配置了上面的也没用，只需要后台那边配置就行（后台开发人员知道的，你跟他沟通一下就行），比如下面两种方式： Servlet，MVC都可以，Web.xmlhttps://www.cnblogs.com/best/p/8202370.html Spring MVC，修改Spring 配置文件，低Spring版本不支持https://www.cnblogs.com/best/p/8202370.html 参考 浅谈 Axios 在 Vue 项目中的使用 vue axios全攻略 axios post提交的Content-Type axios —— 极简封装的艺术]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue2 ：百度图表 Echarts]]></title>
    <url>%2F2018%2F05%2F19%2Fvue-echarts.html</url>
    <content type="text"><![CDATA[在后台管理系统中，图表是一个很普遍的元素。目前常用的图标插件有 charts, Echarts, highcharts。这次将介绍 Echarts 在 Vue 项目中的应用。 一、安装插件npm 安装 Echarts ，进入项目目录：npm install echarts -S和 axios 类似，echarts 也不能通过 Vue.use() 进行全局调用通常是在需要使用图表的 .vue 文件中直接引入：import echarts from &#39;echarts&#39;另外一只方式：挂到vue上，再使用：在 main.js 中引入，然后修改原型链：12import echarts from 'echarts' Vue.prototype.$echarts = echarts 然后就可以全局使用了let myChart = this.$echarts.init(document.getElementById(&#39;myChart&#39;)) 二、创建图表需要注意的是，图表的容器必须指定宽高，也就是说 width，height 不能使用百分比，只能用 px。简单封装：Echarts.vue12345678910111213141516&lt;template&gt; &lt;div style="width: 500px;height: 300px" :id="id" :class="className"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; import * as echarts from 'echarts'; export default &#123; props: ['options','id','className'], data: function () &#123; return &#123; &#125; &#125;, mounted: function()&#123; var myChart = echarts.init(document.getElementById(this.id)); myChart.setOption(this.options); &#125; &#125;&lt;/script&gt; 然后使用：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;template&gt; &lt;div class="center"&gt; &lt;h3&gt;ECharts 入门示例&lt;/h3&gt; &lt;Echarts id="main" :options='options' class="echarts" style="width: 500px;height: 300px"&gt;&lt;/Echarts&gt; &lt;Echarts id="main2" :options='optionsLine' class="echarts" style="width: 500px;height: 300px"&gt;&lt;/Echarts&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import * as echarts from 'echarts'; import Echarts from '@/components/Echarts/Echarts.vue'; //组件 export default &#123; data: function () &#123; return &#123; options:&#123; title: &#123; text: '柱形图Bar' &#125;, tooltip: &#123;&#125;, xAxis: &#123; data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子'] &#125;, yAxis: &#123;&#125;, series: [&#123; name: '销量', type: 'bar', data: [5, 20, 36, 10, 10, 20] &#125;] &#125;, optionsLine: &#123; title: &#123; text: '线状图Line' &#125;, xAxis: &#123; type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] &#125;, yAxis: &#123; type: 'value' &#125;, series: [&#123; data: [820, 932, 901, 934, 1290, 1330, 1320], type: 'line' &#125;] &#125;, &#125; &#125;, components: &#123; 'Echarts': Echarts, &#125; &#125;&lt;/script&gt;&lt;style&gt; .echarts&#123; float: left; &#125;&lt;/style&gt; 三、按需引入上面引入的 echarts 包含了所有图表，但有时候我们只需要一两个基本图表，这时候完整的 echarts 就显得累赘。假如只需要创建一个饼图，那么可以这么做：1234567// 引入基本模板let echarts = require('echarts/lib/echarts')// 引入饼图组件require('echarts/lib/chart/pie')// 引入提示框和图例组件require('echarts/lib/component/tooltip')require('echarts/lib/component/legend') 可以按需引入的模块列表见 https://github.com/ecomfe/echarts/blob/master/index.js 其他如果在页面加载之后，仍需要图表自适应宽高，就需要用到 echarts 的媒体查询 参考 在Vue上初级使用ECharts 在vue-cli项目中使用echarts Vue 爬坑之路（八）—— 使用 Echarts 创建图表 做一个具有异步加载特性的 echarts-vue 组件 vue 将echarts封装为组件一键使用]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue2 ：百度地图bmap]]></title>
    <url>%2F2018%2F05%2F19%2Fvue-bmap.html</url>
    <content type="text"><![CDATA[百度地图JavaScript API是一套由JavaScript语言编写的应用程序接口，可帮助您在网站中构建功能丰富、交互性强的地图应用，支持PC端和移动端基于浏览器的地图应用开发，且支持HTML5特性的地图开发。 该套API免费对外开放。自v1.5版本起，您需先申请密钥（ak）才可使用，接口无使用次数限制。 地址传送门：http://lbsyun.baidu.com/index.php?title=jspopular 申请密钥点击此处申请密钥，然后在首页index.html的head引入下面的js代码：&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=密钥&quot;&gt;&lt;/script&gt;注意：建议先写个简单的html确认密钥正确可用后，再讲其引入vue的项目中。因为有些教程这里引入的js的src末尾带有 &amp;callback=init ，这个参数导致了报错（见下图），而始终无法正常使用百度地图api。 webpack 配置文件如果只是第一步，你调用百度地图api时，报错： Bmap is not defined ，那么就配置 webpack 配置文件（webpack.base.conf.js）的module.exports中加个externals：123456789module.exports = &#123; context: path.resolve(__dirname, '../'), entry: &#123; app: './src/main.js' &#125;, //百度地图配置20180518 externals: &#123; "BMap": "BMap" &#125;,...&#125; 调用12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;!--地图容器--&gt; &lt;div id="fli" class="fli"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name:'', data () &#123; return &#123; &#125; &#125;, mounted()&#123; var map = new BMap.Map('fli',&#123;enableMapClick:true&#125;); // 创建Map实例 map.centerAndZoom(new BMap.Point(104.06, 30.67), 11); // 初始化地图,设置中心点坐标和地图级别 //添加地图类型控件 map.addControl(new BMap.MapTypeControl(&#123; mapTypes:[ BMAP_NORMAL_MAP, BMAP_HYBRID_MAP ]&#125;)); map.setCurrentCity("成都"); // 设置地图显示的城市 此项是必须设置的 map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放 &#125;,&#125;&lt;/script&gt;&lt;style scoped&gt; .fli&#123; width: 100%; height: 100%; overflow: hidden; margin: 0; &#125;&lt;/style&gt; 另一种方式：异步加载跟百度api官网里的异步加载很像。首先跟入口 js（main.js）一样，新建一个 map.js 。（ak 就是你的密钥）123456789101112export function MP(ak) &#123; return new Promise(function (resolve, reject) &#123; window.onload = function () &#123; resolve(BMap) &#125; var script = document.createElement("script"); script.type = "text/javascript"; script.src = "http://api.map.baidu.com/api?v=2.0&amp;ak="+ak+"&amp;callback=init"; script.onerror = reject; document.head.appendChild(script); &#125;) &#125; 在页面中调用：1234567891011121314151617import &#123;MP&#125; from '@/map.js' export default &#123; data () &#123; return &#123; ak:'', // 这里就是百度地图密钥 &#125; &#125;, mounted()&#123; this.$nextTick(function() &#123; var _this = this; MP(_this.ak).then(BMap =&gt; &#123; // 百度地图API功能 ... &#125;) &#125;) &#125;,&#125; 注意：说到 src 末尾的 callback 参数，是否需要，值又是什么（ init, initialize ），自己去试验，随便写个简单的html，调试通了再引入vue。 小提示： 使用BMap的时候不需要import了，import反而会报错：BMap is not defined 注意一定要给bmap的div设置高度，否则会看不见 参考 前端框架Vue（9）——百度地图使用 vue调用百度地图api时Bmap没有定义的解决办法]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>百度地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue2 ：Mockjs 前端模拟假数据]]></title>
    <url>%2F2018%2F05%2F19%2Fvue-mockjs.html</url>
    <content type="text"><![CDATA[在前后端分离的大环境下，前端需要后端的接口去完成页面的渲染，但是大部分的情况下,前后端需要同时进行开发，这种情况下,后端还没完成数据输出，前端只好写静态模拟数据。面临一些问题：数据太长了，将数据写在js文件里，完成后挨个改url；某些逻辑复杂的代码，加入或去除模拟数据时得小心翼翼；想要尽可能还原真实的数据，要么编写更多代码，要么手动修改模拟数据；特殊的格式，例如IP,随机数，图片，地址，需要去收集等等。Mock.js 正是这样一款类库，可以帮我们模拟生成一堆数据，也能解决那些问题。 安装mock官网npm安装：npm install mockjspackage文件中显示当前mockjs版本说明安装成功。(也可以引入cdn：&lt;script src=&quot;http://mockjs.com/dist/mock.js&quot;&gt;&lt;/script&gt;) mockjs 文件在main.js同级下建立mock.js文件：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105// 引入mockjsconst Mock = require('mockjs');const qs = require('qs');// 获取 mock.Random 对象const Random = Mock.Random;// 登录const login = function() &#123; let status = false;//登录状态：ture--成功，false--失败 status = true; return &#123; status: status &#125;&#125;// 表格分页const tblList = function(param) &#123; param = param.body || '';//获取传过来的参数 // console.log(qs.parse(param));//因为axios的post带参数被qs.stringfy()转换了，需要转回来。 if(param == '')&#123; //无查询条件 let bookdata = Mock.mock(&#123; 'books|1-10': [&#123; 'sid|+1': 1, 'date': '@date("yyyy-MM-dd")', 'name': '@csentence()', 'address': '@county(true)', 'region': '双流区' &#125;] &#125;); // console.log(bookdata); return bookdata; &#125;else&#123; //带查询条件 let paramObj = qs.parse(param); console.log('input parameter：...'); console.log(paramObj); let books = []; for (let i = 0; i &lt; 10; i++) &#123; let newBook = &#123; // thumbnail_pic_s: Random.dataImage('300x250', 'mock的图片'), // Random.dataImage( size, text ) 生成一段随机的 Base64 图片编码 date: Random.date(), name: paramObj.name+Random.csentence(), address: Random.county(true), region: paramObj.region &#125; books.push(newBook) &#125; return &#123; books: books &#125; &#125;&#125;//图书列表const bookList = function(param) &#123; param = param.body || '';//获取传过来的参数 // console.log(qs.parse(param)); // 因为axios的post带参数被qs.stringfy()转换了，需要转回来。 let paramObj = qs.parse(param); console.log(paramObj); let nameInput = paramObj.name || ''; let books = []; for (let i = 0; i &lt; 10; i++) &#123; let temp = i+1; let newBook = &#123; sid: temp, // thumbnail_pic_s: Random.dataImage('300x250', 'mock的图片'), // Random.dataImage( size, text ) 生成一段随机的 Base64 图片编码 author: Random.name(2,4), name: '《'+nameInput+Random.csentence()+"》", publishAt: Random.date(), description: Random.cparagraph() &#125; books.push(newBook) &#125; return &#123; books: books &#125;&#125;//获取文件列表const fileList = function (param) &#123; param = param.body || '';//获取传过来的参数 // console.log(qs.parse(param)); // 因为axios的post带参数被qs.stringfy()转换了，需要转回来。 let paramObj = qs.parse(param); console.log(paramObj); let files = []; for (let i = 0; i &lt; 3; i++) &#123; let newFile = &#123; name: paramObj.username + i +'.png', url: Random.dataImage('300x250', 'mock的图片'), // Random.dataImage( size, text ) 生成一段随机的 Base64 图片编码 &#125; files.push(newFile) &#125; return &#123; fileList: files &#125;&#125;// Mock.mock( url, post/get , 返回的数据)；Mock.mock('/mk_login', 'post', login);// 登录Mock.mock('/mk_tbllist', 'post', tblList);// 表格分页Mock.mock('/mk_booklist', 'post',bookList);// 图书列表Mock.mock('/mk_fileupload', 'post',&#123;&#125;);// 文件上传Mock.mock('/mk_fetchFiles', 'post',fileList);// 获取文件列表 main.js 引入mock在main.js中引入mock文件：require(&#39;./mock&#39;); 使用vue文件中访问该接口mock：(调用的url接口和mock.js文件的Mock.mock( url, post/get , 返回的数据)的url接口一致，就能被mock拦截。)12345678910111213api.post('/mk_login', data) .then(res =&gt; &#123; console.log(res.data); if(res.data.status)&#123; // 登录成功 this.setUserInfo2(data); this.$router.replace('/home'); &#125; &#125;) .catch(error =&gt; &#123; console.log("login异常：") console.log(error) &#125;) 参考 vue中mock.js使用 【Mock.js】前端模拟假数据，不用在手拼了 Mockjs,再也不用追着后端小伙伴要接口了 使用Mock.js进行独立于后端的前端开发]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Mockjs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue+element ui 之二：开发配置 webstorm]]></title>
    <url>%2F2018%2F05%2F06%2Fvue-element-02.html</url>
    <content type="text"><![CDATA[浏览器插件安装chrome浏览器：Vue.js devtools插件，去应用商店装上此插件。然后找到此插件对应的 manifest.json（用everything搜或磁盘搜索，当搜出多个目录下的 manifest.json 文件时，根据插件的标签签名（如nhdogjmejiglipccpnnnanhbledajbpd）或安装时间（如2018/4/27）可以找到），将&quot;persistent&quot;: false,改为&quot;persistent&quot;: true,。如下图： webstorm相关配置 添加vue插件: vue.js 设置js版本：es6 添加vue.js文件模版 配置babel（类似sass）：es6 转 es5安装：$ npm install -g babel配置： webstorm内存配置：bin目录下WebStorm.exe.vmoptions和WebStorm64.exe.vmoptions两个文件，修改如下(-Xms和-Xmx配置)：1234567891011-server-Xms512m-Xmx1024m-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow （ps：这里-Xms最大值不能超过1024，否则webstorm将无法打开） 开发调试配置npm（或者node或JavaScript debug） 参考 利用webstrom调试Vue.js单页面程序的方法教程 webstorm创建和调试vue项目 解决webstorm卡顿问题 vue开发环境搭建（WebStorm） webstorm 设置ES6语法支持以及添加vuejs开发配置 webstorm开发vue，进行一些配置 Vue.js devtools：调试vue.js应用的浏览器扩展 Chrome插件图文教程]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Element</tag>
        <tag>Vue2</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue+element ui 之一：环境搭建和项目创建]]></title>
    <url>%2F2018%2F05%2F06%2Fvue-element-01.html</url>
    <content type="text"><![CDATA[替换老技术ext.js，故而用Element UI。 node安装（npm跟node是配套的，无须单独安装），去官网下载安装就行。如果你已经有了，但是版本低了，需要升级，可以参考此文。Vue + Element UI 的项目搭建有两种方式： 一、直接用 Element 的项目模板Element 脚手架方式，点此去：123456789101112# 克隆项目 $ git clone https://github.com/ElementUI/element-starter.git# 查看目录$ ls# 进入项目目录$ cd element-starter# 安装相关依赖包$ yarn# 运行$ npm run dev# 打包压缩$ npm run build 二、先搭建Vue项目，再引入Element UI注：1、查看 node,npm,vue,webpack 版本：xx -v，命令不对是，用xx -help查看相关命令。比如：node -v，node -help。（特例：vue 查看版本 vue -V）2、需要再多个项目用的的用全局安装 npm install xx -g 或 --global，只是某个项目里用到的，进入该项目目录，再安装 npm install xx --save-dev 或 -D。 12345678910111213141516171819202122# 安装node和npm（直接用的官网的安装文件安装的），查看一下版本号可以确认安装成功$ node -v$ npm -v# 安装vue，查看版本 vue -V$ npm install vue@2.5.2 -g# 全局安装 vue-cli$ npm install vue-cli -g# 安装webpack$ npm install webpack -g# 创建一个基于 webpack 模板的新项目my-project$ vue init webpack my-project# 进入项目目录$ cd my-project# 安装依赖，走你$ npm install XX# 运行项目$ npm run dev# 打包项目$ npm run build# 到此，vue的脚手架项目创建完成# 再引入element ui相关东西（i: install, -D: --save -dev）：$ npm i element-ui@2.3.6 -D 相关目录情况项目创建完后的相关目录介绍如下图： 注意： assets和static目录：assets存相对路径用的图片，会打包进js里，不方便更换图片，如logo,导航的背景图和icon等等。static存绝对路径用的图片，可随时更换，如商品图片和产品图片等等。做了一个小测试：同时在两个目录下,放入同名的css和图片。在打包后，css不会有影响，因为命令不同，图片最终会被static覆盖。看下图： index.js配置文件比较重要，需要熟悉里面的每项配置。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// see http://vuejs-templates.github.io/webpack for documentation.var path = require('path')//使用Node自带的文件路径插件module.exports = &#123; //生产环境配置 build: &#123; //http://vuejs-templates.github.io/webpack/backend.html // 使用 config/prod.env.js 中定义的编译环境 env: require('./prod.env'), index: path.resolve(__dirname, '../dist/index.html'), // 编译注入的 index.html 文件,必须是本地的绝对路径 assetsRoot: path.resolve(__dirname, '../dist'), // 编译输出的静态资源根路径 assetsSubDirectory: 'static', // 编译输出的二级目录 assetsPublicPath: '/', // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名 productionSourceMap: true, //生成用于生产构建的源映射 // https://webpack.js.org/configuration/devtool/#production devtool: '#source-map', // Gzip off by default as many popular static hosts such as // Surge or Netlify already gzip all static assets for you. // Before setting to `true`, make sure to: // npm install --save-dev compression-webpack-plugin productionGzip: false, // 是否开启 gzip productionGzipExtensions: ['js', 'css'], // 需要使用 gzip 压缩的文件扩展名 // Run the build command with an extra argument to // View the bundle analyzer report after build finishes: // `npm run build --report` // Set to `true` or `false` to always turn it on or off bundleAnalyzerReport: process.env.npm_config_report //一个实用工具,用于分析项目的依赖关系https://www.npmjs.com/package/webpack-bundle-analyzer &#125;, //开发环境 dev: &#123; // Paths assetsSubDirectory: 'static', assetsPublicPath: '/', proxyTable: &#123;&#125;, env: require('./dev.env'), // 使用 config/dev.env.js 中定义的编译环境 port: 8081, // 运行测试页面的端口 autoOpenBrowser: true, //是否自动打开浏览器 assetsSubDirectory: 'static', // 编译输出的二级目录 assetsPublicPath: '/', // 编译发布上线路径的根目录，可配置为资源服务器域名或 CDN 域名 proxyTable: &#123; //https://github.com/chimurai/http-proxy-middleware,配置方式 &#125;, // 需要 proxyTable 代理的接口（可跨域）http://vuejs-templates.github.io/webpack/proxy.html /** * Source Maps */ // https://webpack.js.org/configuration/devtool/#development devtool: 'cheap-module-eval-source-map', // If you have problems debugging vue-files in devtools, // set this to false - it *may* help // https://vue-loader.vuejs.org/en/options.html#cachebusting cacheBusting: true, cssSourceMap: true // 是否开启 cssSourceMap &#125;&#125; 参考： Element UI Vue项目目录结构注解附assets与static目录的区别 Vue-webpack项目配置详解]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Element</tag>
        <tag>Vue2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node 升级版本]]></title>
    <url>%2F2018%2F04%2F27%2Fnode-version-upgrade.html</url>
    <content type="text"><![CDATA[个人博客网站用的4.5的node，现在工作需要用element ui，需要node&gt;=6，也就产生了node的升级需求。 方法一node有一个模块叫n，是专门用来管理node.js的版本。1234567891011# 查看版本node -v # 清除npm cachenpm cache clean -force# 安装n模块npm install -g n # 不行就这样：npm install -g n -f# 升级新版本（稳定版 stable ,最新版 latest ,指定版本号v8.11.1）n latest# 查看版本号，确认是否升级成功node -v 方法二GNVM 是一个简单的 Windows 下 Node.js 多版本管理器，类似的 nvm nvmw nodist 。感谢一下这位哥（kenshin）吧，点此查看，有详细的操作文档。注：不过，我好像运气不太好，方法一没搞定，方法二呢，node是升级成功了，可是npm升级时就不行了，可以看下面的截图。最后用方法三搞定的。 方法三去官网下载个你需要的版本，覆盖安装或先卸载再安装都行。不记得node的安装目录不要紧，where node 命令可以看到。everything 搜索工具也可以全盘搜索的。]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[滚动到底部加载更多]]></title>
    <url>%2F2018%2F04%2F25%2Fscroll-more.html</url>
    <content type="text"><![CDATA[移动端加载数据时，由于数据太多，不会一次性全部加载出来。有些会采用pc端那样用分页码的形式，但是更多的确实滑动滚动条到内容最后，加载更多内容出来。一般引入了三方的前端框架和插件，基本都会有此功能。偶尔会需要采用原生js实现，故而此处就介绍下原生js的实现方式。另外附上jquery的实现方式。 原生js实现思路需要三个高度：scrollHeight（文档内容实际高度，包括超出视窗的溢出部分）、scrollTop（滚动条滚动距离）、clientHeight（窗口可视范围高度）。当 clientHeight + scrollTop &gt;= scrollHeight 时，表示已经抵达内容的底部了，可以加载更多内容。 scrollHeight：通过 document.documentElement.scrollHeight 、document.body.scrollHeight 可以获取; scrollTop：通过window.pageYOffset 、 document.documentElement.scrollTop 、 document.body.scrollTop 可以获取;（window.scrollY也可以，只是ie根本不支持。点此查看） clientHeight：通过window.innerHeight 、 document.documentElement.clientHeight 、 document.body.clientHeight 可以获取; 下面我先附上我的大致测试结果图（页面代码和测试表格数据最后附上） 从第一行数据可以看出来，2000(content)+2*2(border)+20(margin-top)=2024才是全部内容。故var scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight); 。第二行数据，window.pageYOffset 不支持ie8；另外查询其他文档得知，document.documentElement.scrollTop 和 document.body.scrollTop 只会生效一个；window.scrollY也是一样的功能，但是兼容性比第一个还差（点此查看）。故var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;。第三行数据：显而易见，数字小的那个才是窗口可是区域高度。故var clientHeight = window.innerHeight || Math.min(document.documentElement.clientHeight,document.body.clientHeight);。 所以最后的js代码如下：12345678910111213window.onscroll= function()&#123; //文档内容实际高度（包括超出视窗的溢出部分） var scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight); //滚动条滚动距离 var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop; //窗口可视范围高度 var clientHeight = window.innerHeight || Math.min(document.documentElement.clientHeight,document.body.clientHeight); if(clientHeight + scrollTop &gt;= scrollHeight)&#123; console.log("===加载更多内容……==="); &#125;&#125; jquery的实现方式代码如下：1234567891011121314&lt;script&gt; $(window).on("resize scroll",function()&#123; var windowHeight = $(window).height();//当前窗口的高度 var scrollTop = $(window).scrollTop();//当前滚动条从上往下滚动的距离 var docHeight = $(document).height(); //当前文档的高度 console.log(scrollTop, windowHeight, docHeight); //当 滚动条距底部的距离 + 滚动条滚动的距离 &gt;= 文档的高度 - 窗口的高度 //换句话说：（滚动条滚动的距离 + 窗口的高度 = 文档的高度） 这个是基本的公式 if (scrollTop + windowHeight &gt;= docHeight) &#123; console.log("===加载更多数据==="); &#125; &#125;);&lt;/script&gt; 测试页面代码：1234567891011121314151617181920212223242526272829303132333435363738&lt;!-- &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt; --&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;test&lt;/title&gt; &lt;meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"&gt;&lt;style&gt;* &#123; margin: 0; padding: 0;&#125;.scroll&#123; margin-top: 20px; border: 2px solid #00f; height: 2000px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="scroll"&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; sdhfiahdifashdifhid &lt;span id="js_con"&gt;&lt;/span&gt;&lt;/div&gt;&lt;script&gt; window.onscroll= function()&#123; var str = ''; // str += window.scrollY+",";//ie不支持。 str += "("+document.documentElement.scrollHeight+","+document.body.scrollHeight+"),"; str += "("+window.pageYOffset+","+document.documentElement.scrollTop+","+document.body.scrollTop+"),"; str += "("+window.innerHeight+","+document.documentElement.clientHeight+","+document.body.clientHeight+"),"; document.getElementById('js_con').innerHTML = str; console.log(str); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; ####测试结果： 获取方式 chrome 66 firefox59 edge ie8 document.documentElement.scrollHeight，document.body.scrollHeight (2024,2004) (2024,2004) (2024,2004) (2024,2004) window.pageYoffset，document.documentElement.scrollTop，document.body.scrollTop (100,100,0) (132,132,0) (94,94,0) (undefined,94,0) window.innerHeight，document.documentElement.clientHeight，document.body.clientHeight (636,636,2004) (619,619,2004) (628,628,2004) (undefined,624,2004) 参考： 滚动条 clientHeight、offsetHeight、scrollTop。 JavaScript滚动到底部触发加载数据 Window pageXOffset 和 pageYOffset 属性 HTML DOM innerheight、innerwidth 属性 Window.scrollY]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文本溢出显示省略号(单行和多行)]]></title>
    <url>%2F2017%2F09%2F05%2Ftext-overflow-ellipsis.html</url>
    <content type="text"><![CDATA[平时用的较多的事单行文本溢出显示省略号，做微信端发现移动端不少效果都是多行文本溢出显示省略号，故而总结一下，方便今后使用。 单行文本的溢出123overflow: hidden;text-overflow:ellipsis;white-space: nowrap; 效果： 多行文本的溢出12345display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3;/*行数*/overflow: hidden;text-overflow: ellipsis; 效果： 适用范围：因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；注： -webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性： display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。 -webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。 另外还有一些解决方法： 利用伪类:after 利用绝对定位和padding;(跨浏览器解决方案)(跟第一种用伪类的方案类似) 利用js插件来实现该功能，如Clamp.js,jQuery.dotdotdot 利用伪类:after1234567891011121314151617181920&lt;div id="con"&gt; &lt;span id="txt"&gt;文本溢出显示省略号,文本溢出显示省略号,文本溢出显示省略号,文本溢出显示省略&lt;/span&gt; &lt;span class="t"&gt;&lt;/span&gt;&lt;/div&gt;&lt;style&gt;#txt&#123; display: inline-block; height: 40px; width: 250px; line-height: 20px; overflow: hidden; font-size: 16px;&#125;.t:after&#123; display: inline; content: "..."; font-size: 16px; &#125;&lt;/style&gt; 效果： 注：该方法适用范围广，但文字未超出行的情况下也会出现省略号,可结合js优化该方法。 该方法改良版：12345678910111213141516171819202122232425262728293031&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;test&lt;/title&gt; &lt;meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"&gt;&lt;/script&gt; &lt;style&gt; #txt&#123; display: inline-block; height: 40px; width: 15em; line-height: 20px; overflow: hidden; font-size: 16px; border: 1px solid #f00; position: relative; &#125; #txt:after&#123; display: block; content: "..."; font-size: inherit; width: 2em; position: absolute; bottom: 0; right: 0; background: #fff; &#125; &lt;/style&gt;&lt;body&gt;&lt;span id="txt"&gt;简书是一个优质的创作社区,在这里,你可以任性地创作,一篇短文、一张照片、一首诗、一幅画……我们相信,每个人都是生活中的艺术家,有着无穷的创造力。&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 效果图： 注：当文字不满2行时，省略号和文本最后一个字有空白区，还是加js判断才能完美达到效果。 利用绝对定位和padding;(跨浏览器解决方案)123456789101112131415161718&lt;p id="con2"&gt; 文本溢出显示省略号,文本溢出显示省略号,文本溢出显示省略号,文本溢出显示省略&lt;span class="t2"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;style&gt;#con2&#123; position: relative; height: 40px; width: 250px; line-height: 20px; overflow: hidden; padding-right: 12px;&#125; .t2&#123; position: absolute; right: 0; bottom: 0;&#125;&lt;/style&gt; 效果： 参考： CSS文本溢出显示省略号 CSS实现单行、多行文本溢出显示省略号（…）]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 Test 之单位]]></title>
    <url>%2F2017%2F08%2F02%2Fcss-unit.html</url>
    <content type="text"><![CDATA[平时或许你用过不少css的单位，相对和绝对单位你都用过，这里将会列出所有的。 css单位css单位：em，ex， %，px，cm，mm，mozmm，in，pt， pc，ch，rem，vh，vw，vmin，vmax。先看看各单位的浏览器兼容性： 单位分类单位分类：相对单位和绝对单位。 1. 相对单位 em 相对于直接父元素的字体大小（font-size）。 ex 相对于当前字体的小写x字母的高度或者 1/2 的 1em（很少用）。很多时候，它是字体的中间标志。 大部分用于版式的微调。比如下标，上标等。 ch 相对于数字“0”的宽度。如：将一个等宽字体的字母”N”的宽度设置为40ch，那么在另一种类型的字体里它却可以包含40个字母。这个单位的传统用途主要是盲文的排版。 rem 相对于根元素的字体大小（网页中的根元素为html）。如：大多数浏览器默认字体大小：font-size: 16px。`html{ font-size：62.5%；/ 16×62.5%=10px /}`，那么1rem=10px。 vw 相对于视窗（viewport）的宽度的1%。如：浏览器宽度750px, 1 vw = 750px/100 = 7.5px。 vh 相对于视窗（viewport）的高度的1%。如：浏览器高度1334px, 1 vh = 1334px/100 = 13.34px。 vmin 相对于视窗（viewport）的较小尺寸的1％，就是指视窗的宽和高中较小那个。如：浏览器的宽度750px，高度1334px，1vmin = 750px/100 = 7.5px。 vmax 相对于视窗（viewport）的较大尺寸的1％，就是指视窗的宽和高中较大那个。如：浏览器的宽度750px，高度1334px，1vmax = 1334px/100 = 13.34px。 % 百分比。 注：em, rem, %常用于自适应处理。Viewport =浏览器窗口大小。 2. 绝对单位 cm 厘米 mm 毫米 in 英寸(1in = 96px = 2.54cm) px 像素 (1px = 1/96th of 1in) pt 点(1pt = 1in/72) pc 排卡(1pc = 12 pt)，相当于我国新四号铅字的尺寸。 *注：1in = 2.54cm = 25.4 mm = 72pt = 6pc 单位对比这些单位的大小对比，可以看这里。 参考： CSS Units CSS Ruler 7个你可能不认识的CSS单位]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apache tomcat6.0 支持sthml]]></title>
    <url>%2F2017%2F06%2F26%2Ftomcat6-sthml.html</url>
    <content type="text"><![CDATA[####1.修改web.xml文件把后面的相关注释去掉。 去掉 后面的注释 ####2.修改context.xml给Context加一个privileged=&quot;true&quot;，重启动tomcat ,如果发现网页是乱码则在ssi servlet 中加如下代码12345678&lt;init-param&gt; &lt;param-name&gt;inputEncoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;outputEncoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt;&lt;/init-param&gt; 修改完后重新启动服务器即可！]]></content>
      <tags>
        <tag>tomcat6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp 安装使用步骤]]></title>
    <url>%2F2016%2F09%2F24%2Fgulp-install.html</url>
    <content type="text"><![CDATA[以 gulp-less 的使用为例讲解gulp的基本安装使用。 安装nodejs进入nodejs官网，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后像安装QQ一样安装它就可以了（安装路径随意）。进入命令行模式，输入node -v命令，查看node版本号，有版本号表示安装完成；node里带有npm的，所以也能查看npm版本号（npm -v） 全局安装gulp输入npm install gulp -g命令，然后用 gulp -v查看是否安装完成； 新建package.json文件 进入你的本地项目（我的是testgulp），输入npm init命令，其中 name, version, description必填，其他无所谓，填完后保存，在testgulp项目下就会生成package.json文件；12345678910&#123; "name": "test", //必填 "version": "1.0.0", //必填 "description": "This is for study gulp project !", //必填 "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "author": "fli", "license": "ISC"&#125; 项目内安装gulp 用npm install gulp --save-dev或 npm install --save-dev gulp命令（卸载的话将前面的命令中install换成uninstall即可）；安装完后，在package.json里能看到具体版本信息。 项目内安装gulp插件命令格式：npm install 插件名称 --save-dev或npm install --save-dev 插件名称； 安装完后，在package.json里能看到具体版本信息。此时的文件：123456789101112131415&#123; "name": "test", "version": "1.0.0", "description": "This is for study gulp project !", "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "author": "fli", "license": "ISC", "devDependencies": &#123; "gulp": "^3.9.1", "gulp-less": "^3.1.0" &#125;&#125; 新建gulpfile.js文件文件如下：1234567891011/*** Created by feili on 2016/9/24. *///导入工具包 require('node_modules里对应模块')var gulp = require('gulp'), //本地安装gulp所用到的地方 less = require('gulp-less');//定义一个testLess任务（自定义任务名称）gulp.task('testLess', function () &#123; gulp.src('less/index.less') //该任务针对的文件 .pipe(less()) //该任务调用的模块 .pipe(gulp.dest('css')); //将会在src/css下生成index.css&#125;);gulp.task('default',['testLess', 'elseTask']); //定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务 通过命令提示符运行gulp任务gulp default或gulp 任务名称。]]></content>
      <categories>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端web网页的 meta 设置]]></title>
    <url>%2F2016%2F05%2F06%2Fmobile-meta.html</url>
    <content type="text"><![CDATA[为了让手机网页有更好的体验，需要重置一些meta。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;meta charset='utf-8'&gt;&lt;!-- 声明文档使用的字符编码 --&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/&gt;&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;&lt;meta name="description" content="不超过150个字符"/&gt;&lt;!-- 页面描述 --&gt;&lt;meta name="keywords" content=""/&gt;&lt;!-- 页面关键词 --&gt;&lt;meta name="author" content="name, email@gmail.com"/&gt;&lt;!-- 网页作者 --&gt;&lt;!-- all：文件将被检索，且页面上的链接可以被查询； none：文件将不被检索，且页面上的链接不可以被查询；index：文件将被检索； follow：页面上的链接可以被查询； noindex：文件将不被检索； nofollow：页面上的链接不可以被查询。 --&gt;&lt;meta name="robots" content="index,follow"/&gt;&lt;!-- 搜索引擎抓取 --&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"&gt;&lt;!-- 为移动设备添加 viewport, `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz , 不过我倾向于加上`width=device-width`，毕竟iphone5渐渐会被淘汰--&gt;&lt;meta name="renderer" content="webkit"&gt;&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;&lt;meta name="format-detection" content="telphone=no, email=no"/&gt;&lt;!-- 忽略页面中的数字识别为电话，忽略email识别--&gt;&lt;link rel="shortcut icon" type="image/ico" href="/favicon.ico"/&gt;&lt;!-- 添加 favicon icon --&gt;&lt;!-- iOS 设备 begin --&gt; &lt;meta name="apple-mobile-web-app-capable" content="yes"/&gt;&lt;!-- 当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari (ios7.0版本以后，safari上已看不到效果) --&gt;&lt;meta name="apple-touch-fullscreen" content="yes"/&gt;&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;&lt;meta name="apple-mobile-web-app-status-bar-style" content="black"/&gt;&lt;!-- 设置苹果工具栏颜色:默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）； --&gt;&lt;meta name="apple-mobile-web-app-title" content="标题"&gt;&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;&lt;meta name="apple-itunes-app" content="app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"&gt;&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;&lt;meta http-equiv="Cache-Control" content="no-siteapp" /&gt;&lt;!-- 不让百度转码 --&gt;&lt;meta name="HandheldFriendly" content="true"&gt;&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;&lt;meta name="MobileOptimized" content="320"&gt;&lt;!-- 微软的老式浏览器 --&gt;&lt;meta name="screen-orientation" content="portrait"&gt;&lt;!-- uc强制竖屏 --&gt;&lt;meta name="x5-orientation" content="portrait"&gt;&lt;!-- QQ强制竖屏 --&gt;&lt;meta name="full-screen" content="yes"&gt;&lt;!-- UC强制全屏 --&gt;&lt;meta name="x5-fullscreen" content="true"&gt;&lt;!-- QQ强制全屏 --&gt;&lt;meta name="browsermode" content="application"&gt;&lt;!-- UC应用模式 --&gt;&lt;meta name="x5-page-mode" content="app"&gt;&lt;!-- QQ应用模式 --&gt;&lt;meta name="msapplication-tap-highlight" content="no"&gt;&lt;!-- windows phone 点击无高光 --&gt;&lt;!-- iOS 图标 begin --&gt;&lt;!--网站添加至ios桌面时的图标--&gt;&lt;link rel="apple-touch-icon-precomposed" sizes="57x57" href="table_ico57.png"&gt;&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;&lt;link rel="apple-touch-icon-precomposed" sizes="72x72" href="table_ico72.png"&gt;&lt;link rel="apple-touch-icon-precomposed" sizes="114x114" href="table_ico114.png"&gt;&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;&lt;link rel="apple-touch-icon-precomposed" sizes="144x144" href="table_ico144.png"&gt;&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;&lt;!-- iOS 图标 end --&gt;&lt;!-- iOS 启动画面 begin --&gt;&lt;link rel="apple-touch-startup-image" sizes="768x1004" href="/splash-screen-768x1004.png"/&gt;&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;&lt;link rel="apple-touch-startup-image" sizes="1024x748" href="/Default-Portrait-1024x748.png"/&gt;&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;&lt;link rel="apple-touch-startup-image" sizes="1536x2008" href="/splash-screen-1536x2008.png"/&gt;&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;&lt;link rel="apple-touch-startup-image" sizes="2048x1496" href="/splash-screen-2048x1496.png"/&gt;&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;&lt;link rel="apple-touch-startup-image" href="/splash-screen-320x480.png"/&gt;&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;&lt;link rel="apple-touch-startup-image" sizes="640x960" href="/splash-screen-640x960.png"/&gt;&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;&lt;link rel="apple-touch-startup-image" sizes="640x1136" href="/splash-screen-640x1136.png"/&gt;&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;&lt;!-- iOS 启动画面 end --&gt;&lt;!-- iOS 设备 end --&gt;&lt;meta name="msapplication-TileColor" content="#000"/&gt;&lt;!-- Windows 8 磁贴颜色 --&gt;&lt;meta name="msapplication-TileImage" content="icon.png"/&gt;&lt;!-- Windows 8 磁贴图标 --&gt;&lt;link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml"/&gt;&lt;!-- 添加 RSS 订阅 --&gt;&lt;!-- sns 社交标签 begin --&gt;&lt;!-- 参考微博API --&gt;&lt;meta property="og:type" content="类型" /&gt;&lt;meta property="og:url" content="URL地址" /&gt;&lt;meta property="og:title" content="标题" /&gt;&lt;meta property="og:image" content="图片" /&gt;&lt;meta property="og:description" content="描述" /&gt;&lt;!-- sns 社交标签 end --&gt; 1.使用特殊链接：如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接&lt;a href=&quot;tel:12345654321&quot;&gt;打电话给我&lt;/a&gt;&lt;a href=&quot;sms:12345654321&quot;&gt;发短信&lt;/a&gt; 或用于单元格：&lt;td onclick=&quot;location.href=&#39;tel:122&#39;&quot;&gt; 2.自动大写与自动修正：要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项：&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt; 参考： 关于meta知多少 手机端页面开发心得（1）——meta设置 移动前端头部标签(HTML5 head meta) 移动端 meta 移动平台对 META 标签的定义]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端web网页的 css 设置]]></title>
    <url>%2F2016%2F05%2F06%2Fmobile-css-reset.html</url>
    <content type="text"><![CDATA[做网页自适应或移动端web页面开发时，总是被浏览器默认自带的样式折腾的死去活来，然后你就想将他们重置成常规默认设置，然后自定义样式。 css样式 -webkit-tap-highlight-color-webkit-tap-highlight-color: rgba(0,0,0,0); //透明度设置为0，去掉点击链接和文本框对象时默认的灰色半透明覆盖层(iOS)或者虚框(Android)-webkit-tap-highlight-color: rgba(255,0,0,0.5); //利用此属性，设置touch时链接区域高亮为50%的透明红，只在ios上起作用。android上只要使用了此属性就表现为边框。在body上加此属性，这样就保证body的点击区域效果一致了 outline：none(1)在pc端为a标签定义这个样式的目的是为了取消ie浏览器下点击a标签时出现的虚线。ie7及以下浏览器还不识别此属性，需要在a标签上添加hidefocus=”true”(2)input，textarea{outline:none} 取消chrome下默认的文本框聚焦样式(3)在移动端是不起作用的，想要去除文本框的默认样式可以使用-webkit-appearance，聚焦时候默认样式的取消是-webkit-tap-highlight-color。看到一些移动端reset文件加了此属性，其实是多余。比如：/防止获取焦点时，出现边框/:focus { outline: 0; -webkit-tap-highlight-color: transparent } -webkit-appearance-webkit-appearance: none; //消除输入框和按钮的原生外观，在iOS上加上这个属性才能给按钮和输入框自定义样式不同type的input使用这个属性之后表现不一。text、button无样式，radio、checkbox直接消失、另外，select加上这个属性后，select的高度就可以改变了。如：select{-webkit-appearance:none;} -webkit-user-select-webkit-user-select: none; // 禁止页面文字选择 ，此属性不继承，一般加在body上规定整个body的文字都不会自动调整 -webkit-text-size-adjust-webkit-text-size-adjust: none; //禁止文字自动调整大小(默认情况下旋转设备的时候文字大小会发生变化)，此属性也不继承，一般加在body上规定整个body的文字都不会自动调整 -webkit-touch-callout-webkit-touch-callout:none; //禁用长按页面时的弹出菜单(iOS下有效) ,img和a标签都要加 -webkit-overflow-scrolling-webkit-overflow-scrolling: touch; //局部滚动(仅iOS 5以上支持) -webkit-box-sizing-webkit-box-sizing: border-box; //转变盒模型（width定义变为包括padding，border-width，不含margin） 参考： 移动端页面默认样式重置 手机端web页面css初始化－去除浏览器默认效果（附详解） 移动端重要的几个CSS3属性设置]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webstorm 使用之 markdown 插件]]></title>
    <url>%2F2016%2F03%2F21%2Fwebstorm-plugin-markdown.html</url>
    <content type="text"><![CDATA[Markdown的相关语法，自己去官网看，或网上搜资料很多的。这里讲一下webstorm安装使用markdown插件。 步骤 打开webstorm，File–&gt;Setting–&gt;输入plugin–&gt;Install JetBrains plugin…–&gt;输入markdown–&gt;点击右边的“Install”,安装完，重启webstorm。 新建test.md，然后编辑，如果没有效果的话。File–&gt;Setting–&gt;输入file type–&gt;找到Markdown–&gt;在下面的Registers Patterns添加上*.md。 参考： 用WebStorm编辑Markdown]]></content>
      <tags>
        <tag>webstorm</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webstorm11--常见配置（二）]]></title>
    <url>%2F2016%2F03%2F15%2Fwebstorm-setting-01.html</url>
    <content type="text"><![CDATA[如果你用过IDE类工具，脑海里都会出现一下常规配置项。比如主题配色，打开多个项目，配置端口（方便其他ip设备访问），文件编码（常规utf-8）,快捷键配置，字体大小颜色风格，插件配置，配置的导入导出（一次配置，到处用）等等。注：File -&gt; Settings，进入配置界面后，尽量用搜索框来快速定位配置项位置。 ##一、主题配色主题设置方法：File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Appearance -&gt;Theme.配色设置方法：File -&gt; Settings -&gt; Editor -&gt; Colors &amp; Fonts-&gt;Scheme.（注：如果你是从从Sublime text3转过来的朋友，比较偏好monokia配色的，可以参见此文 webstorm入门1-主题和配色） ##二、打开多个项目WebStorm默认情况下一次只能打开一个项目，这点很不爽，其实是可以设置的。（注：如果你一开始就建了项目再来配置，记得要把左边显示的根路径移除，不然可能点击Add Content Root配置后也不一定能生效）方法：File -&gt; Settings -&gt; Directories -&gt; Add Content Root 中添加你当前的工程目录。 ##三、配置webserver选项（端口）方便其他ip设备访问(如手机等测试效果）方法：File -&gt; Settings -&gt; Build,Execution,Development -&gt; Debugger -&gt;port ##四、设置文件的默认编码方法：File -&gt; Settings -&gt; Editor -&gt; File Encodings -&gt; IDE Encoding,Project Encoding.(注：配置前和配置后都可以打开页面，在页面的右下角显示有编码，下面截图右下角就有) ##五、快捷键配置你可以使用默认快捷键配置，也可以根据自己的风格选择配置。习惯eclipse和myeclipse开发的可以配置成eclipse快捷键。方法：File -&gt; Settings -&gt; Keymap-&gt; Keymaps ##六、emmet配置，语法等等上面提到了快捷键，webstorm自带emmet插件。用过zen coding的人应该都知道，emmet就是zen coding的升级版。当然，webstorm也不是支持所有的emmet语法，不过够用了。可以参考此文Enabling Emmet Support看看具体情况。如下图，可以看到css自动加浏览器厂商前缀。 ##七、行号，换行，参考线打开页面后，右击页面左边边界，弹窗选项，根据自己需要勾选就是，如下图： ##八、导入导出配置当你需要在其他电脑的webstorm上也想用自己编码风格时，将配置文件导入重启webstorm即可生效。导出方法：File -&gt; Export Settings… -&gt;自己选择选项和路径。用默认也可以。导入方法：File -&gt; Import Settings… -&gt;选择.jar文件路径。 ##九、插件配置webstorm自带很多插件，你可以根据自己需要配置。我暂时未使用，如果你用到了，可以参考下面的一些文章。 SVN、Git插件配置，CSS预处理语言的预编译、JS 实时压缩等等可以参考此文webstorm入门2-配置 使用css预编译器（sass,less）的朋友,可以省掉gulp、grunt类前端辅助工具,参考此文webstorm入门5-sass、scss、less监听编译 ####参考： webstorm入门1-主题和配色 webstorm入门5-sass、scss、less监听编译 webstorm入门2-配置 Enabling Emmet Support WebStorm 自定义字体+颜色+语法高亮+导入导出用户设置 Emmet：HTML/CSS代码快速编写神器 emmet语法 Webstorm10.0.3破解程序及汉化包下载、Webstorm配置入门指南 webstorm 配置webserver选项，让其他ip设备可访问(如手机等测试效果） WebStorm 打开多个项目的方法]]></content>
      <tags>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页高清屏和retina（视网膜）屏的双倍图解决办法]]></title>
    <url>%2F2016%2F02%2F06%2Fresolution-retina-2x.html</url>
    <content type="text"><![CDATA[通过搜集相关资料，发现一个比较普遍的解决方案：retina.js+CSS Media Queries。 retina.jsretina.js下载地址：retina.js官网下载 和 免费cdn。详细介绍和步骤啥的，看这个《走向视网膜（Retina）的Web时代》和《如何一步步把网站Retina优化》文章。retina.js针对img标签的图片，直接用就行。背景图片还是得用CSS Media Queries示例代码：12345&lt;div class="img"&gt; [站外图片上传中……(3)] [站外图片上传中……(4)] &lt;div class="logo"&gt;&lt;/div&gt;&lt;/div&gt; CSS Media Queriescss属性：device-pixel-ratio和-webkit-image-set先看看两者的兼容性： 第二个截图，不是确切。加上私有属性“–webkit-”，Safari 6+和chrome 21+都支持的。这个属性仅是CSS4的一个草案。（注：第二种方法没法用于img标签。）看见上面两种方法的兼容性都不咋地好，你可能会立马否决使用它。其实不然，上面提到我是看了好几个网站的源码才偶然发现第二种方法的，那么久给你看看结果：苹果网站（第一种），华为（第一种，不过由于它使用的jquery fancybox插件，是这个插件带得，可以估计不算在内。），魅族（第二种），小米（第二种），锤子（第二种），腾讯首页（第二种）。再者你仔细想想，retina屏的用户群，都是些苹果的手机(iphone)和ipad以及笔记本（rmbp）等等设备，也就恰好在该属性兼容范围内。示例代码：12345678910111213141516171819.test &#123; background-image: url(&apos;img/logo.jpg&apos;); background-image: -webkit-image-set(url(&apos;img/logo.jpg&apos;) 1x,url(&apos;img/logo@2x.jpg&apos;) 2x); background-size: 425px 195px; width: 425px; height: 195px;&#125;@media only screen and (-Webkit-min-device-pixel-ratio: 1.5),only screen and (-moz-min-device-pixel-ratio: 1.5),only screen and (-o-min-device-pixel-ratio: 3/2),only screen and (min-device-pixel-ratio: 1.5),(min-resolution: 192dpi) &#123; .logo &#123; background-image: url(&apos;img/logo@2x.jpg&apos;); background-size: 425px 195px; width: 425px; height: 195px; &#125; &#125; #####参考 走向视网膜（Retina）的Web时代 如何一步步把网站Retina优化 image-set实现Retina屏幕下图片显示 高清显示屏原理及设计方案 随方逐圆 – 全面理解 CSS 媒体查询]]></content>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[svg和@2x图（双倍图）切图--Photoshop CC]]></title>
    <url>%2F2016%2F02%2F06%2Fps-photo-2x.html</url>
    <content type="text"><![CDATA[近来开发网站，发现网站在retina屏上显示图片模糊的问题。然后发现2x图可以解决此问题，当然不可能整个网站所有的图片都是2x图。故此，小图icon类（一些线条组合的图形）采用svg，其他icon类和一般大小图片采用png(可以考虑“交错”)，大一些的图片用jpg(特别是全屏图：横向全屏，整个全屏)。大图呢模糊的话就得用2x图了。我的需求是这样，可是设计师和ui美工告诉我，他不知道怎么弄，不懂那玩意。他们手头上的事也很忙，故此，我就自己去折腾了。发现Photoshop CC可以做到，并且很方便。（注：2013及以前的版本没有此功能） ##Photoshop CC 2014 的安装，设置，切图： 一、 Photoshop CC 2014 的安装（安装程序网上随便搜，很多的，也可以去官网下载） 解压下载的PS CC软件，打开文件夹，双击“Set-up.exe”进行正常安装。 点击“安装”按钮(注意：不要点击“试用”按钮，否则安装的结果就不是完整版的)。 点击右下角“登录”按钮，点击“稍后连接”按钮，然后点击“接受”按钮。 序列号随意输入，比如分别输入111 111 111 111 111 111，点击“下一步”按钮，点击“稍后连接”按钮。 接一下，如果你是64位系统的就都选择，如果是32位系统的当然只有一个了。点击“安装”按钮进行安装。 点击“关闭”按钮关闭。 这时系统菜单已经有程序存在，把它们添加到桌面快捷方式。 双击程序图标，弹出“需要登录”对话框，点击“以后登录”按钮，打开PS CC程序，弹出提示对话框，勾选“不再显示”复选框，点击“确定”按钮。然后关闭程序。 复制64位破解补丁到程序的安装目录，默认是：C:\Program Files\Adobe\Adobe Photoshop CC(64bit)，出现“复制文件”提示，点击“复制和替换”，这样64位的就完成破解。同样的方法，把32位程序创建桌面快捷方式，复制32位破解补丁到程序的安装目录，默认是：C:\Program Files\Adobe\Adobe Photoshop CC 2014，同样出现“复制文件”提示，点击“复制和替换”，完成32位的破解。（破解补丁（网上找，都差不多是amtlib.dll文件）） 连接网线，你可以像正版一样使用了，界面很美妙，开始你的PS之旅吧！ 二、 Photoshop CC 2014 的设置 请保持菜单“编辑-&gt;首选项-&gt;增效工具”中的“生成器”为启用状态； 依次点击菜单“文件-&gt;生成-&gt;图像资源”，确认该菜单项已被勾选； 开启 WebP、SVG 格式的自动输出： 新建 generator.json 文件，内容如下：{ &quot;generator-assets&quot;: { &quot;svg-enabled&quot;: true, &quot;webp-enabled&quot;: true } }将此配置文件拷贝至： Windows: (Win+R后输入 %USERPROFILE% )目录下，如 C:\Users\xxx Mac OS: $HOME 如“Macintosh HD&gt;Users&gt;xxx” 目录下 WebP 输出暂只支持 Mac OS。 三、 Photoshop CC 2014 的切图 将某个图层或组的名字改成对应格式的即可。如”首页”， 改成”首页.png”就会在你所打开的psd或图片的文件对应的位置生成”首页.png”图片； 改成”首页.svg”就会在你所打开的psd或图片的文件对应的位置生成”首页.svg”svg图; 改成”200%首页@2x.png”就会在你所打开的psd或图片的文件对应的位置生成”首页@2x.png”两倍图。 #####参考 利用PS自动切图、支持svg且支持icoMoon——再也不用四处去转格式了 PS CC 自动切图（含WebP、SVG格式） ADOBE CC 2014/2015 全系列通用破解补丁下载！PHOTOSHOP CC 2014/2015完美破解版]]></content>
      <tags>
        <tag>photoshop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5视频转换工具]]></title>
    <url>%2F2016%2F02%2F05%2Ftool-html5-video.html</url>
    <content type="text"><![CDATA[10个免费的HTML5视频转换工具下载，搜过一些工具，跟此文的工具都差不多。然后下载了好几款试用了一下，最后比较满意的是any-video-converter。其他的，我就简单说说使用情况吧。先提一句：html5的视频播放格式编码要求：h264/mp4, theora/ogg, vp8/webm。 Miro Video Converter 能转，但是转完后就不能用。 Miro Video Converter 这个比较悲剧，找半天都没找到转成webm格式的地方。 Freemake Video Converter 能转，也能用，但是具体参数比较少。 Easy HTML5 Video 能转，并且比any-video-converter转的视频大小还小些，看了一下，视频没有失真没有出入。但是他丫的居然在右上角有个水印，导致了没法商用。 any-video-converter 能转的格式不全，还是收费的。 Online-Convert.Com 具体编码参数基本没有，懒得试了。 any-video-converter 各种格式和参数比较齐全，pc端手机端平板端的都有。转完还有demo页面。]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页(UI)设计--切图标注工具]]></title>
    <url>%2F2016%2F02%2F05%2Ftool-cut-mark.html</url>
    <content type="text"><![CDATA[cutterman(免费)–切图（ps 插件） parker(收费)–标注（ps 插件） PxCook(免费)–标注 ASSISTOR PS(免费)–切图，标注（ps 标注） BigShear(收费)–切图 markman(收费)–标注 标注的工具试过几个。PxCook和markman功能类似，不足：没法准确取色，特别是带透明色；无法准确获取文字（字体，字体大小，字体颜色，行高）。parker功能都有，但是外边距只能量2个图层，无法多个图层一起标注外边距。ASSISTOR PS功能都有，但是内边距需要自己手动拉个选框出来，再选中2个图层，才能量了。 切图类工具呢，虽然没怎么试过，不过大家都推荐cutterman。标注类工具呢，跟ps一起用的话，推荐ASSISTOR PS。单独用呢，用markman（mac版收费，windows有破解版，虽然官网说基本版免费，你用了就会发现啥叫基本功能了）和PxCook都行。 免费了！切图标记外挂神器ASSISTOR PS深入解读（上）免费了！切图标记外挂神器ASSISTOR PS深入解读（下）]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>photoshop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[-webkit-text-size-adjust使用汇总]]></title>
    <url>%2F2016%2F02%2F05%2Fwebkit-text-size-adjust.html</url>
    <content type="text"><![CDATA[-webkit-text-size-adjust 的本职是用于mobile的，见规范 CSS Mobile Text Size Adjustment Module Level 1 和 apple 的 Safari Web Content Guide。之所以现在的桌面版webkit浏览器支持他，是因为实际上这是一下bug。Bug 56543 – CSS property “-webkit-text-size-adjust” means different things in Safari and iOS这个bug在最新版的 WebKit Nightly Builds 里已经被修复了。这属性现在的一般用处是防止iPhone在坚屏转向横屏时放大文字（注意，就算viewport设置了maximum-scale=1.0 文字还是会放大的）。而且iPhone和iPad的默认设定是不一样的iPhone默认设定 -webkit-text-size-adjust: auto;iPad默认设定-webkit-text-size-adjust: none;所以iPad默认是不调节的。此属性还支持百分比，这在当前的桌面版的webkit浏览器是不支持的，所以如果不想让iPhone横坚屏切换的时候调节文字，用-webkit-text-size-adjust: 100%;绝对不能用-webkit-text-size-adjust: none;这会导致仍然支持 -webkit-text-size-adjust: none;的桌面版的webkit浏览器无法人为放大文字大小，严重影响可用性。关于如何在chrome里实现小于12px的文字。当然文字缩小到12px以下本来就一定程度影响到可用性了，建议无视chrome的这个特性。硬要实现的话，我想到的一个变通方法是先用js判断是否为chrome （至今还没听说有区分safari 和 chrome 的 css hack ）var isChrome = !!window.chrome;再用-webkit-transform: scale( ) 缩小到合适值。如果你非得要font-size:10px(使用em单位时方便计算)，你会发现在chrome里最小还是12px，就算你设置了font-size: 10px;-webkit-text-size-adjust: 100%;(或-webkit-text-size-adjust: none;)也没用。原因如下： -webkit-text-size-adjust: 100%|none; 只对chrome27.0 版本以下有效，27.0以上版本无效； 只对英文才有效，对中文无效。 在新版的chrome中，已经禁止了改属性,建议使用CSS3中的方法:transform:scale(0.875);当使用transform:scale(0.875)时; 不仅是文字变小了，整个文字所在的容器也同时会变小。 #####综上所述： 采用-webkit-text-size-adjust: 100%; 必须要用小于12px字体时，用-webkit-transform: scale( ) 缩小到合适值。 #####参考 CSS中-webkit-text-size-adjust:none如何兼容blink？ -webkit-text-size-adjust:none;为什么在谷歌中不起作用？]]></content>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown 常用语法（Hexo）]]></title>
    <url>%2F2014%2F12%2F22%2Ftemplate.html</url>
    <content type="text"><![CDATA[摘要：Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 引用 &gt; 引用的一段话。 标题一级标题二级标题三级标题四级标题五级标题六级标题列表(-或+或*或1.) 无序列表* 无序列表- 无序列表+ 无序列表+ 无序列表- 无序列表 有序列表1. 有序列表1. 有序列表1. ##链接（文本链接，图片链接）自动链接：http://example.com/文本链接：baidu图片链接： 强调粗体斜体文字删除线single asterisks_斜体_double asterisks粗体double 代码块行内代码：inline code代码块：123$(function()&#123;alert("This is a test js !!!!")&#125;); 代码块2：12# 代码块$ hexo new "My New Post" codepen 和 jsfiddle 代码引入，相关设置见此文。 在文章中嵌入codepen代码： 1&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125; 原链接： See the Pen CSS sidebar toggle by Silvestar Bistrović (@CiTA) on CodePen. 在文章中嵌入 jsFiddle 代码： 1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; 分割线 表格表格（:在两边， 文本居中；在左边，文本居中；在右边，文本居右）： 姓名 年龄 身高 其他 fli 27 175 无 wdy 22 180 无 kiyei 19 170 有 参考 参考1 参考2]]></content>
      <categories>
        <category>class</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>标签2</tag>
      </tags>
  </entry>
</search>
