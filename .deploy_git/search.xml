<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo NexT：在文章中嵌入 CodePen或 jsFiddle]]></title>
    <url>%2F2018%2F05%2F29%2Fgithub-hexo-next-04.html</url>
    <content type="text"><![CDATA[建议直接去博客网站原文看效果，因为简书的markdown不支持此语法的。搞 IT 技术的人，写博客有时候需要在博文中展示一些实施的 demo 代码效果，这就涉及到需要在博文中嵌入 CodePen 或 jsFiddle，jsFiddle 有个国内版 jsrun，我就做了上面两种尝试，也就不讲其他的了。至于这两款需要翻墙，对于搞 IT 技术的你不算事儿吧。 提一句：需要拿出来做嵌入用的代码，你去你的 demo 页面找Embed，中文版的好像叫嵌入，里面有下面的嵌入代码的语法需要的参数。 在文章中嵌入 CodePen去 Hexo 官方插件页搜索codepen，然后找到hexo-codepen，点过去。或者直接点击此处。里面有文档和示例，大致讲解一下。 1.安装npm 安装：$ npm install hexo-codepen --save或 yarn 安装：$ yarn add hexo-codepen 2.用法语法结构：1&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125; deme 链接： https://codepen.io/CiTA/pen/bgjKKE 在 CodePen 里面 Embed 出来的html代码：12&lt;p data-height="265" data-theme-id="dark" data-slug-hash="bgjKKE" data-default-tab="css,result" data-user="CiTA" data-embed-version="2" data-pen-title="CSS sidebar toggle" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/CiTA/pen/bgjKKE/"&gt;CSS sidebar toggle&lt;/a&gt; by Silvestar Bistrović (&lt;a href="https://codepen.io/CiTA"&gt;@CiTA&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt; 参数对应关系： 字段 值 userId CiTA slugHash bgjKKE theme dark defaultTab css,result height 265 width 默认为：100%，此值应根据您的博客主题进行调整 示例效果：12#替换参数后的语法：(*设置宽高时不要用%，会导致编译错误*)&#123;% codepen CiTA bgjKKE dark [css,result [265]] %&#125; 运行后的： 当然也可以直接嵌入源码（CodePen 中 Embed 出来的代码支持3种格式：WordPress Shortcode、iFrame、HTML） ，也能看到效果，只是这个会带有源码，体验不太好。效果如下： See the Pen CSS sidebar toggle by Silvestar Bistrović (@CiTA) on CodePen. 在文章中嵌入 jsFiddle这个就省掉了安装依赖包的步骤了，本来官网也提供了语法，只是没有具体的示例，网上找了半天没资料。就自己参考 CodePen 的方式做了一个逆向推理出来的。 用法语法结构（官网也就只提供了这个）：(设置宽高时不要用%，会导致编译错误)1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; demo 链接： http://jsfiddle.net/AntBody/138zf8kk/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=138zf8kk 在文章中嵌入 jsfiddle 。 然后页面转化后，在浏览器里面开启调试控制台，看到如下图： 然后逆推，设置如下：1&#123;% jsfiddle AntBody/138zf8kk js,html,css,result light %&#125; 运行效果： 这些参数怎么对应过去的呢？看下图： 当然同样的，因为 jsfiddle 的Embed code 支持两种方式，也可以引入 iFarme 源码进来，因为本来 Hexo 的语法本来就是编译成 iframe 形式的。 另外说明一点，jsfiddle 的 demo 例子代码你得找到 Emebed才能看到相关需要的参数，如果找不到，可能就不知道怎么设置了。比如 Element UI 的随便一个例子： https://jsfiddle.net/api/post/library/pure/，不知道是不是因为没注册账号的原因引起的。（由于我一直用的codepen，就没去捉摸具体原因了。） 总结 codepen 嵌入 安装：$ npm install hexo-codepen --save 使用语法结构： 1&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125; 找到对应参数，对应过去就行。 jsfiddle 嵌入 使用语法结构： 1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; 找到对应参数，对应过去就行。 至于其他的像 dabbet、jsrun、jsbin、runjs 等等就自己去尝试了。另外，由于 hexo 解析后都是 iframe 的结果形式，故而可以直接引入 iframe 的代码也行，只是效果体验会差些，毕竟连源码也显示出来了。至于，其他的 js 嵌入或 html+js 嵌入就自己去尝试了。codepen 里面尝试了一下，跟 iframe 引入方式效果一样。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>CodePen</tag>
        <tag>jsFiddle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题中添加网页音乐播放器功能]]></title>
    <url>%2F2018%2F05%2F27%2Fgithub-hexo-next-03.html</url>
    <content type="text"><![CDATA[非原创，文章出处：https://asdfv1929.github.io/2018/05/26/next-add-music/ 。为博客添加网页音乐播放器功能 download点击访问 Aplayer 源码：GitHub Aplayer。下载到本地，解压后将dist文件夹复制到themes\next\source文件夹下。 music.js新建themes\next\source\dist\music.js文件，添加内容：12345678910111213141516171819202122232425const ap = new APlayer(&#123; container: document.getElementById('aplayer'), fixed: true, autoplay: false, audio: [ &#123; name: "PDD洪荒之力", artist: '徐梦圆', url: 'http://up.mcyt.net/?down/39868.mp3', cover: 'http://oeff2vktt.bkt.clouddn.com/image/84.jpg', &#125;, &#123; name: '9420', artist: '麦小兜', url: 'http://up.mcyt.net/?down/45967.mp3', cover: 'http://oeff2vktt.bkt.clouddn.com/image/8.jpg', &#125;, &#123; name: '风筝误', artist: '刘珂矣', url: 'http://up.mcyt.net/?down/46644.mp3', cover: 'http://oeff2vktt.bkt.clouddn.com/image/96.jpg', &#125; ]&#125;); 源码中对应的参数解释，这边都有： Aplayer 中文文档 audio 对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：http://up.mcyt.net/ ，搜索对应的音乐，然后复制 url 和右击封面图片链接粘贴到对应的位置上就行了。 注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。 _layout.swig打开themes\next\layout\_layout.swig文件，将1234&lt;link rel="stylesheet" href="/dist/APlayer.min.css"&gt;&lt;div id="aplayer"&gt;&lt;/div&gt;&lt;script type="text/javascript" src="/dist/APlayer.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="/dist/music.js"&gt;&lt;/script&gt; 添加到&lt;body itemscope ...&gt;后面就行，即在&lt;body&gt;&lt;/body&gt;里面。 重新生成，访问页面，就能看到左下角的音乐播放器了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Web Music</tag>
        <tag>Aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题添加点击爱心效果]]></title>
    <url>%2F2018%2F05%2F27%2Fgithub-hexo-next-02.html</url>
    <content type="text"><![CDATA[非原创，文章出处：https://asdfv1929.github.io/2018/01/26/click-love/ 。给NexT主题内添加页面点击出现爱心的效果 创建js文件在/themes/next/source/js/src下新建文件 clicklove.js ，接着把该链接下的代码拷贝粘贴到 clicklove.js 文件中。代码如下：1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 修改_layout.swig在\themes\next\layout\_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo（NexT主题）搭建博客]]></title>
    <url>%2F2018%2F05%2F23%2Fgithub-hexo-next-01.html</url>
    <content type="text"><![CDATA[由于曾经搭建过，但是不小心删掉了本地电脑上的源码，而 github 上也只有生成后的html页面代码，导致了没法继续发布新文章。并且那会儿倒腾的有些久，断断续续的弄得，也没写博文记录。现在重新搭建一次，并且记录一下。 准备工作域名我的域名：www.missfli.com ，不愿意花钱就跳过此步骤。去godaddy购买域名，英文，中文的话选择新加坡或台湾香港都行，基本都能懂。购买的教程，可以参考此文的 购买域名 步骤。 环境技术GitHub Pages 用到了github，那就来个github桌面版，图形化界面，好用，你要喜欢命令模式也行。Hexo 的安装前提就是得有 Node.js 和 Git 。这里，我们要区分清楚git与github。git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。下面提供相关的官方版本地址，安装教程去网上搜一下就很多。 Node 官方版本安装：https://nodejs.org/en/ Git 官方版本安装：https://git-scm.com/download/win Github桌面版安装：https://desktop.github.com/ Git 配置当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改： 12$ git config --global user.name "username"$ git config --global user.email "username@example.com" 对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private: 在GitHub右上方点击你的头像，选择”Settings”； 在右边的”Personal settings”侧边栏选择”Emails”； 选择”Keep my email address private”。 这样，你就可以使用如下格式的email进行配置：$ git config --global user.email &quot;username@users.noreply.github.com&quot; Github 配置创建仓库 new repository在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username 是你的账号名)。 在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。简单来说，User Pages 与 Project Pages的区别是： User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。 用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。 User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。 User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。 另外注意： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 创建仓库 借用别人的图： 创建分支相关命令可参考此文。创建新代码仓库时，默认是 master 分支，但是这里需要2个分支，一个存储博客网站源码，一个存储HTML静态网页代码。我的是 gh-dev 分支存放源码，master 分支存放HTML静态网页代码。步骤如下()：123#进入项目目录#创建新分支并切换到该分支 gh-dev$ git checkout -b gh-dev 然后登陆 github , 将 username.github.io 项目的默认分支 master 修改成 gh-dev 即可。切换分支可以查看源码和生成后的HTML静态文件代码（发布代码）。 Github 绑定域名如果你没购买域名，就用github提供的默认的 xxx.github.io 来访问，可忽略此步骤。具体的绑定步骤，参考此文Github 域名绑定 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 检查电脑是否已经有SSH KEYS。$ ls -al ~/.ssh默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。如果提示：No such file or directory 说明你是第一次使用git。 如果没有SSH KEY，则生成新的SSH KEY。ssh-keygen -t rsa -C &quot;your_email@example.com&quot;然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 测试是否成功$ ssh -T git@github.com 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置： 12$ git config --global user.name "liuxianan"// 你的github用户名，非昵称$ git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 具体这个配置是干嘛的我没仔细深究。 以上的配置流程，我是用的别人的，给你看个我运行的命令截图： 安装HexoHexo 官网有详细步骤。 注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的，在配置文件中修改时，冒号后面必须有一个空格，否则可能会出问题； Hexo 创建项目打开你 Git Bash ，进入到你项目所在目录： 123456789101112#Hexo 的安装$ npm install hexo-cli -g#查看版本，确认是否安装成功$ hexo -version #建站$ hexo init &lt;project-name&gt;$ cd &lt;project-name&gt;$ npm install#生成静态页面（markdown文件转化为html文件）$ hexo generate#网站预览（默认的主题风格landscape）$ hexo server NexT 安装你要是愿意用自带的 langscape 主题，可忽略此步骤。NexT 官网也有详细的步骤，文档也很详细，按照文档一步一步的设置一些基本和常用功能。网址：http://theme-next.iissnan.com/getting-started.html 安装 NexT 下载主题在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码： 12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题打开站点配置文件_config.ymltheme: next 验证主题验证相关配置是否正确：hexo s --debug提示：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 NexT 主题设定 选择风格 Scheme 设置 界面语言 设置 菜单 设置 侧边栏 设置 头像 设置 作者昵称 设置 站点描述 NexT 集成常用的第三方服务 百度统计 阅读次数统计（LeanCloud） Algolia 搜索 其他的设置和三方插件服务引入其他的设置和三方插件服务引入，官方没有或遇到了一些坑，后面再单独写博文记录。 常用hexo命令常见命令： 1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 发布到 github将上面hexo新建的项目里的所有文件复制到 username.github.io(从 github 上的 username.github.io 项目的 gh-dev 分支上 clone 下来项目)里， 首先，ssh key肯定要配置好。其次，配置_config.yml中有关deploy的部分。默认生成的_config.yml： 1234# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: 修改后的_config.yml： 123456deploy: type: git #对应仓库的SSH地址（可以在GitHub对应的仓库中复制） repo: git@github.com:woaiwojia321314/woaiwojia321314.github.io.git #（分支：User Pages为master，Project Pages为gh-pages） branch: master 为了能够使Hexo部署到GitHub上，需要安装一个插件：$ npm install hexo-deployer-git --save 然后，本地预览博客正常后，用git命令或github桌面端提交源码到 gh-dev 分支；用hexo deploy命令发布生成后的HTML代码到 master 分支上。执行下列指令即可完成部署： 12$ hexo generate$ hexo deploy 之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~ 部署与管理我的博客搭建流程 创建仓库：woaiwojia321314.github.io ； 创建两个分支：master 与 gh-dev ； 设置 gh-dev 为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； clone项目：github 桌面端或使用git clone git@github.com:woaiwojia321314/woaiwojia321314.github.io.git拷贝仓库； 在本地 woaiwojia321314.github.io 文件夹下通过 Git bash 依次执行 npm install hexo-cli、hexo init、npm install 和 npm install hexo-deployer- git（此时当前分支应显示为 gh-dev ）; 修改 _config.yml 中的 deploy 参数，分支应为 master , 这样就能保证发布代码发布到 master 分支上； 依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件，或者用 github 桌面端提交项目源码；执行hexo generate -d生成网站并部署到GitHub上。（git命令提交或github桌面端提交源码到 gh-dev ; hexo deploy 命令提交生成HTML文件到 master 分支）这样一来，在 GitHub 上的 woaiwojia321314.github.io 仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 我的博客管理流程日常修改在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理： 依次执行 git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为 gh-dev ）； 然后才执行hexo generate -d发布网站到 master 分支上。虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。 本地资料丢失当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： clone项目：github桌面端 或 使用 git clone git@github.com:woaiwojia321314/woaiwojia321314.github.io.git 拷贝仓库（默认分支为 gh-dev）； 在本地新拷贝的 woaiwojia321314.github.io 文件夹下通过 Git bash 依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。 保留CNAME、README.md等文件 CNAME、README.md、favicon.ico等文件放在source目录下。因为每次md转化为html时都会清空public文件夹，包括放在该目录下的CNAME、README.md、favicon.ico等等文件，放在source目录下，转化时会一起拿过去的。CNAME文件内容； www.misssfli.com 项目根目录：gitignore文件内容：12345.DS_StoreThumbs.dbdb.json*.lognode_modules/ 参考 GitHub Pages + Hexo搭建博客 如何搭建一个独立博客——简明Github Pages与Hexo教程 使用hexo+github搭建免费个人博客详细教程 搭建个人博客-hexo+github详细完整步骤]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown 常用语法（Hexo）]]></title>
    <url>%2F2014%2F12%2F22%2Ftemplate.html</url>
    <content type="text"><![CDATA[摘要：Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 引用 &gt; 引用的一段话。 标题一级标题二级标题三级标题四级标题五级标题六级标题列表(-或+或*或1.) 无序列表* 无序列表- 无序列表+ 无序列表+ 无序列表- 无序列表 有序列表1. 有序列表1. 有序列表1. ##链接（文本链接，图片链接）自动链接：http://example.com/文本链接：baidu图片链接： 强调粗体斜体文字删除线single asterisks_斜体_double asterisks粗体double 代码块行内代码：inline code代码块：123$(function()&#123;alert("This is a test js !!!!")&#125;); 代码块2：12# 代码块$ hexo new "My New Post" codepen 和 jsfiddle 代码引入，相关设置见此文。 在文章中嵌入codepen代码： 1&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125; 原链接： See the Pen CSS sidebar toggle by Silvestar Bistrović (@CiTA) on CodePen. 在文章中嵌入 jsFiddle 代码： 1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; 分割线 表格表格（:在两边， 文本居中；在左边，文本居中；在右边，文本居右）： 姓名 年龄 身高 其他 fli 27 175 无 wdy 22 180 无 kiyei 19 170 有 参考 参考1 参考2]]></content>
      <categories>
        <category>Diary</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>PS3</tag>
        <tag>Games</tag>
        <tag>标签3</tag>
      </tags>
  </entry>
</search>
